{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../node_modules/svelte-router-spa/src/store.js","../../node_modules/svelte-router-spa/src/router/url_parser.js","../../node_modules/svelte-router-spa/src/lib/utils.js","../../node_modules/svelte-router-spa/src/router/current.js","../../node_modules/svelte-router-spa/src/router/redirect.js","../../node_modules/svelte-router-spa/src/router/guard.js","../../node_modules/svelte-router-spa/src/router/path.js","../../node_modules/svelte-router-spa/src/router/finder.js","../../node_modules/svelte-router-spa/src/router/route.js","../../node_modules/svelte-router-spa/src/spa_router.js","../../node_modules/svelte-router-spa/src/components/route.svelte","../../node_modules/svelte-router-spa/src/components/router.svelte","../../src/ConnectedUser.svelte","../../node_modules/@microsoft/signalr/dist/esm/Errors.js","../../node_modules/@microsoft/signalr/dist/esm/HttpClient.js","../../node_modules/@microsoft/signalr/dist/esm/ILogger.js","../../node_modules/@microsoft/signalr/dist/esm/Loggers.js","../../node_modules/@microsoft/signalr/dist/esm/Utils.js","../../node_modules/@microsoft/signalr/dist/esm/FetchHttpClient.js","../../node_modules/@microsoft/signalr/dist/esm/XhrHttpClient.js","../../node_modules/@microsoft/signalr/dist/esm/DefaultHttpClient.js","../../node_modules/@microsoft/signalr/dist/esm/TextMessageFormat.js","../../node_modules/@microsoft/signalr/dist/esm/HandshakeProtocol.js","../../node_modules/@microsoft/signalr/dist/esm/IHubProtocol.js","../../node_modules/@microsoft/signalr/dist/esm/Subject.js","../../node_modules/@microsoft/signalr/dist/esm/HubConnection.js","../../node_modules/@microsoft/signalr/dist/esm/DefaultReconnectPolicy.js","../../node_modules/@microsoft/signalr/dist/esm/HeaderNames.js","../../node_modules/@microsoft/signalr/dist/esm/ITransport.js","../../node_modules/@microsoft/signalr/dist/esm/AbortController.js","../../node_modules/@microsoft/signalr/dist/esm/LongPollingTransport.js","../../node_modules/@microsoft/signalr/dist/esm/ServerSentEventsTransport.js","../../node_modules/@microsoft/signalr/dist/esm/WebSocketTransport.js","../../node_modules/@microsoft/signalr/dist/esm/HttpConnection.js","../../node_modules/@microsoft/signalr/dist/esm/JsonHubProtocol.js","../../node_modules/@microsoft/signalr/dist/esm/HubConnectionBuilder.js","../../src/signalr.js","../../src/Lobby.svelte","../../src/Index.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true && boolean_attributes.has(name) ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.45.0' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { writable } from 'svelte/store';\n\nconst { set, subscribe } = writable({});\n\nconst remove = () => {\n  set({});\n};\n\nconst activeRoute = {\n  subscribe,\n  set,\n  remove,\n};\n\nexport { activeRoute };\n","const UrlParser = (urlString, namedUrl = '') => {\n  const urlBase = new URL(urlString);\n\n  /**\n   * Wrapper for URL.hash\n   *\n   **/\n  function hash() {\n    return urlBase.hash;\n  }\n\n  /**\n   * Wrapper for URL.host\n   *\n   **/\n  function host() {\n    return urlBase.host;\n  }\n\n  /**\n   * Wrapper for URL.hostname\n   *\n   **/\n  function hostname() {\n    return urlBase.hostname;\n  }\n\n  /**\n   * Returns an object with all the named params and their values\n   *\n   **/\n  function namedParams() {\n    const allPathName = pathNames();\n    const allNamedParamsKeys = namedParamsWithIndex();\n\n    return allNamedParamsKeys.reduce((values, paramKey) => {\n      values[paramKey.value] = allPathName[paramKey.index];\n      return values;\n    }, {});\n  }\n\n  /**\n   * Returns an array with all the named param keys\n   *\n   **/\n  function namedParamsKeys() {\n    const allNamedParamsKeys = namedParamsWithIndex(namedUrl);\n\n    return allNamedParamsKeys.reduce((values, paramKey) => {\n      values.push(paramKey.value);\n      return values;\n    }, []);\n  }\n\n  /**\n   * Returns an array with all the named param values\n   *\n   **/\n  function namedParamsValues() {\n    const allPathName = pathNames();\n    const allNamedParamsKeys = namedParamsWithIndex();\n\n    return allNamedParamsKeys.reduce((values, paramKey) => {\n      values.push(allPathName[paramKey.index]);\n      return values;\n    }, []);\n  }\n\n  /**\n   * Returns an array with all named param ids and their position in the path\n   * Private\n   **/\n  function namedParamsWithIndex() {\n    const namedUrlParams = getPathNames(namedUrl);\n\n    return namedUrlParams.reduce((validParams, param, index) => {\n      if (param[0] === ':') {\n        validParams.push({ value: param.slice(1), index });\n      }\n      return validParams;\n    }, []);\n  }\n\n  /**\n   * Wrapper for URL.port\n   *\n   **/\n  function port() {\n    return urlBase.port;\n  }\n\n  /**\n   * Wrapper for URL.pathname\n   *\n   **/\n  function pathname() {\n    return urlBase.pathname;\n  }\n\n  /**\n   * Wrapper for URL.protocol\n   *\n   **/\n  function protocol() {\n    return urlBase.protocol;\n  }\n\n  /**\n   * Wrapper for URL.search\n   *\n   **/\n  function search() {\n    return urlBase.search;\n  }\n\n  /**\n   * Returns an object with all query params and their values\n   *\n   **/\n  function queryParams() {\n    const params = {};\n    urlBase.searchParams.forEach((value, key) => {\n      params[key] = value;\n    });\n\n    return params;\n  }\n\n  /**\n   * Returns an array with all the query param keys\n   *\n   **/\n  function queryParamsKeys() {\n    const params = [];\n    urlBase.searchParams.forEach((_value, key) => {\n      params.push(key);\n    });\n\n    return params;\n  }\n\n  /**\n   * Returns an array with all the query param values\n   *\n   **/\n  function queryParamsValues() {\n    const params = [];\n    urlBase.searchParams.forEach((value) => {\n      params.push(value);\n    });\n\n    return params;\n  }\n\n  /**\n   * Returns an array with all the elements of a pathname\n   *\n   **/\n  function pathNames() {\n    return getPathNames(urlBase.pathname);\n  }\n\n  /**\n   * Returns an array with all the parts of a pathname\n   * Private method\n   **/\n  function getPathNames(pathName) {\n    if (pathName === '/' || pathName.trim().length === 0) return [pathName];\n    if (pathName.slice(-1) === '/') {\n      pathName = pathName.slice(0, -1);\n    }\n    if (pathName[0] === '/') {\n      pathName = pathName.slice(1);\n    }\n\n    return pathName.split('/');\n  }\n\n  return Object.freeze({\n    hash: hash(),\n    host: host(),\n    hostname: hostname(),\n    namedParams: namedParams(),\n    namedParamsKeys: namedParamsKeys(),\n    namedParamsValues: namedParamsValues(),\n    pathNames: pathNames(),\n    port: port(),\n    pathname: pathname(),\n    protocol: protocol(),\n    search: search(),\n    queryParams: queryParams(),\n    queryParamsKeys: queryParamsKeys(),\n    queryParamsValues: queryParamsValues(),\n  });\n};\n\nexport { UrlParser };\n","/**\n * Returns true if object has any nested routes empty\n * @param routeObject\n **/\nconst anyEmptyNestedRoutes = (routeObject) => {\n  let result = false;\n  if (Object.keys(routeObject).length === 0) {\n    return true;\n  }\n\n  if (routeObject.childRoute && Object.keys(routeObject.childRoute).length === 0) {\n    result = true;\n  } else if (routeObject.childRoute) {\n    result = anyEmptyNestedRoutes(routeObject.childRoute);\n  }\n\n  return result;\n};\n\n/**\n * Compare two routes ignoring named params\n * @param pathName string\n * @param routeName string\n **/\n\nconst compareRoutes = (pathName, routeName) => {\n  routeName = removeSlash(routeName);\n\n  if (routeName.includes(':')) {\n    return routeName.includes(pathName);\n  } else {\n    return routeName.startsWith(pathName);\n  }\n};\n\n/**\n * Returns a boolean indicating if the name of path exists in the route based on the language parameter\n * @param pathName string\n * @param route object\n * @param language string\n **/\n\nconst findLocalisedRoute = (pathName, route, language) => {\n  let exists = false;\n\n  if (language) {\n    return { exists: route.lang && route.lang[language] && route.lang[language].includes(pathName), language };\n  }\n\n  exists = compareRoutes(pathName, route.name);\n\n  if (!exists && route.lang && typeof route.lang === 'object') {\n    for (const [key, value] of Object.entries(route.lang)) {\n      if (compareRoutes(pathName, value)) {\n        exists = true;\n        language = key;\n      }\n    }\n  }\n\n  return { exists, language };\n};\n\n/**\n * Return all the consecutive named param (placeholders) of a pathname\n * @param pathname\n **/\nconst getNamedParams = (pathName = '') => {\n  if (pathName.trim().length === 0) return [];\n  const namedUrlParams = getPathNames(pathName);\n  return namedUrlParams.reduce((validParams, param) => {\n    if (param[0] === ':') {\n      validParams.push(param.slice(1));\n    }\n\n    return validParams;\n  }, []);\n};\n\n/**\n * Split a pathname based on /\n * @param pathName\n * Private method\n **/\nconst getPathNames = (pathName) => {\n  if (pathName === '/' || pathName.trim().length === 0) return [pathName];\n\n  pathName = removeSlash(pathName, 'both');\n\n  return pathName.split('/');\n};\n\n/**\n * Return the first part of a pathname until the first named param is found\n * @param name\n **/\nconst nameToPath = (name = '') => {\n  let routeName;\n  if (name === '/' || name.trim().length === 0) return name;\n  name = removeSlash(name, 'lead');\n  routeName = name.split(':')[0];\n  routeName = removeSlash(routeName, 'trail');\n\n  return routeName.toLowerCase();\n};\n\n/**\n * Return the path name excluding query params\n * @param name\n **/\nconst pathWithoutQueryParams = (currentRoute) => {\n  const path = currentRoute.path.split('?');\n  return path[0];\n};\n\n/**\n * Return the path name including query params\n * @param name\n **/\nconst pathWithQueryParams = (currentRoute) => {\n  let queryParams = [];\n  if (currentRoute.queryParams) {\n    for (let [key, value] of Object.entries(currentRoute.queryParams)) {\n      queryParams.push(`${key}=${value}`);\n    }\n  }\n\n  const hash = currentRoute.hash ? currentRoute.hash : '';\n\n  if (queryParams.length > 0) {\n    return `${currentRoute.path}?${queryParams.join('&')}${hash}`;\n  } else {\n    return currentRoute.path + hash;\n  }\n};\n\n/**\n * Returns a string with trailing or leading slash character removed\n * @param pathName string\n * @param position string - lead, trail, both\n **/\nconst removeExtraPaths = (pathNames, basePathNames) => {\n  const names = basePathNames.split('/');\n  if (names.length > 1) {\n    names.forEach(function (name, index) {\n      if (name.length > 0 && index > 0) {\n        pathNames.shift();\n      }\n    });\n  }\n\n  return pathNames;\n};\n\n/**\n * Returns a string with trailing or leading slash character removed\n * @param pathName string\n * @param position string - lead, trail, both\n **/\n\nconst removeSlash = (pathName, position = 'lead') => {\n  if (position === 'trail' || position === 'both') {\n    pathName = pathName.replace(/\\/$/, '');\n  }\n\n  if (position === 'lead' || position === 'both') {\n    pathName = pathName.replace(/^\\//, '');\n  }\n\n  return pathName;\n};\n\n/**\n * Returns the name of the route based on the language parameter\n * @param route object\n * @param language string\n **/\n\nconst routeNameLocalised = (route, language = null) => {\n  if (!language || !route.lang || !route.lang[language]) {\n    return route.name;\n  } else {\n    return route.lang[language];\n  }\n};\n\n/**\n * Return the path name excluding query params\n * @param name\n **/\nconst startsWithNamedParam = (currentRoute) => {\n  const routeName = removeSlash(currentRoute);\n\n  return routeName.startsWith(':');\n};\n\n/**\n * Updates the base route path.\n * Route objects can have nested routes (childRoutes) or just a long name like \"admin/employees/show/:id\"\n *\n * @param basePath string\n * @param pathNames array\n * @param route object\n * @param language string\n **/\n\nconst updateRoutePath = (basePath, pathNames, route, language, convert = false) => {\n  if (basePath === '/' || basePath.trim().length === 0) return { result: basePath, language: null };\n\n  let basePathResult = basePath;\n  let routeName = route.name;\n  let currentLanguage = language;\n\n  if (convert) {\n    currentLanguage = '';\n  }\n\n  routeName = removeSlash(routeName);\n  basePathResult = removeSlash(basePathResult);\n\n  if (!route.childRoute) {\n    let localisedRoute = findLocalisedRoute(basePathResult, route, currentLanguage);\n\n    if (localisedRoute.exists && convert) {\n      basePathResult = routeNameLocalised(route, language);\n    }\n\n    let routeNames = routeName.split(':')[0];\n    routeNames = removeSlash(routeNames, 'trail');\n    routeNames = routeNames.split('/');\n    routeNames.shift();\n    routeNames.forEach(() => {\n      const currentPathName = pathNames[0];\n      localisedRoute = findLocalisedRoute(`${basePathResult}/${currentPathName}`, route, currentLanguage);\n\n      if (currentPathName && localisedRoute.exists) {\n        if (convert) {\n          basePathResult = routeNameLocalised(route, language);\n        } else {\n          basePathResult = `${basePathResult}/${currentPathName}`;\n        }\n        pathNames.shift();\n      } else {\n        return { result: basePathResult, language: localisedRoute.language };\n      }\n    });\n    return { result: basePathResult, language: localisedRoute.language };\n  } else {\n    return { result: basePath, language: currentLanguage };\n  }\n};\n\nexport {\n  anyEmptyNestedRoutes,\n  compareRoutes,\n  findLocalisedRoute,\n  getNamedParams,\n  getPathNames,\n  nameToPath,\n  pathWithQueryParams,\n  pathWithoutQueryParams,\n  removeExtraPaths,\n  removeSlash,\n  routeNameLocalised,\n  startsWithNamedParam,\n  updateRoutePath,\n};\n","import { UrlParser } from './url_parser';\n\nimport { pathWithQueryParams, removeSlash } from '../lib/utils';\n\nconst RouterCurrent = (trackPage) => {\n  const trackPageview = trackPage || false;\n  let activeRoute = '';\n\n  const setActive = (newRoute, updateBrowserHistory) => {\n    activeRoute = newRoute.path;\n    pushActiveRoute(newRoute, updateBrowserHistory);\n  };\n\n  const active = () => {\n    return activeRoute;\n  };\n\n  /**\n   * Returns true if pathName is current active route\n   * @param pathName String The path name to check against the current route.\n   * @param includePath Boolean if true checks that pathName is included in current route. If false should match it.\n   **/\n  const isActive = (queryPath, includePath = false) => {\n    if (queryPath[0] !== '/') {\n      queryPath = '/' + queryPath;\n    }\n\n    // remove query params for comparison\n    let pathName = UrlParser(`http://fake.com${queryPath}`).pathname;\n    let activeRoutePath = UrlParser(`http://fake.com${activeRoute}`).pathname;\n\n    pathName = removeSlash(pathName, 'trail');\n\n    activeRoutePath = removeSlash(activeRoutePath, 'trail');\n\n    if (includePath) {\n      return activeRoutePath.includes(pathName);\n    } else {\n      return activeRoutePath === pathName;\n    }\n  };\n\n  const pushActiveRoute = (newRoute, updateBrowserHistory) => {\n    if (typeof window !== 'undefined') {\n      const pathAndSearch = pathWithQueryParams(newRoute);\n\n      if (updateBrowserHistory) {\n        window.history.pushState({ page: pathAndSearch }, '', pathAndSearch);\n      }\n      // Moving back in history does not update browser history but does update tracking.\n      if (trackPageview) {\n        gaTracking(pathAndSearch);\n      }\n    }\n  };\n\n  const gaTracking = (newPage) => {\n    if (typeof ga !== 'undefined') {\n      ga('set', 'page', newPage);\n      ga('send', 'pageview');\n    }\n  };\n\n  return Object.freeze({ active, isActive, setActive });\n};\n\nexport { RouterCurrent };\n","import { RouterGuard } from './guard';\n\nconst RouterRedirect = (route, currentPath) => {\n  const guard = RouterGuard(route.onlyIf);\n\n  const path = () => {\n    let redirectTo = currentPath;\n    if (route.redirectTo && route.redirectTo.length > 0) {\n      redirectTo = route.redirectTo;\n    }\n\n    if (guard.valid() && guard.redirect()) {\n      redirectTo = guard.redirectPath();\n    }\n\n    return redirectTo;\n  };\n\n  return Object.freeze({ path });\n};\n\nexport { RouterRedirect };\n","export const RouterGuard = (onlyIf) => {\n  const guardInfo = onlyIf;\n\n  const valid = () => {\n    return guardInfo && guardInfo.guard && typeof guardInfo.guard === 'function';\n  };\n\n  const redirect = () => {\n    return !guardInfo.guard();\n  };\n\n  const redirectPath = () => {\n    let destinationUrl = '/';\n    if (guardInfo.redirect && guardInfo.redirect.length > 0) {\n      destinationUrl = guardInfo.redirect;\n    }\n\n    return destinationUrl;\n  };\n\n  return Object.freeze({ valid, redirect, redirectPath });\n};\n","import {\n  getNamedParams,\n  nameToPath,\n  updateRoutePath,\n  removeExtraPaths,\n  routeNameLocalised\n} from '../lib/utils';\n\nfunction RouterPath({ basePath, basePathName, pathNames, convert, currentLanguage }) {\n  let updatedPathRoute;\n  let route;\n  let routePathLanguage = currentLanguage;\n\n  function updatedPath(currentRoute) {\n    route = currentRoute;\n    updatedPathRoute = updateRoutePath(basePathName, pathNames, route, routePathLanguage, convert);\n    routePathLanguage = convert ? currentLanguage : updatedPathRoute.language;\n\n    return updatedPathRoute;\n  }\n\n  function localisedPathName() {\n    return routeNameLocalised(route, routePathLanguage);\n  }\n\n  function localisedRouteWithoutNamedParams() {\n    return nameToPath(localisedPathName());\n  }\n\n  function basePathNameWithoutNamedParams() {\n    return nameToPath(updatedPathRoute.result);\n  }\n\n  function namedPath() {\n    let localisedPath = localisedPathName();\n    if (localisedPath && !localisedPath.startsWith('/')) {\n      localisedPath = '/' + localisedPath;\n    }\n\n    return basePath ? `${basePath}${localisedPath}` : localisedPath;\n  }\n\n  function routePath() {\n    let routePathValue = `${basePath}/${basePathNameWithoutNamedParams()}`;\n    if (routePathValue === '//') {\n      routePathValue = '/';\n    }\n\n    if (routePathLanguage) {\n      pathNames = removeExtraPaths(pathNames, localisedRouteWithoutNamedParams());\n    }\n\n    const namedParams = getNamedParams(localisedPathName());\n    if (namedParams && namedParams.length > 0) {\n      namedParams.forEach(function () {\n        if (pathNames.length > 0) {\n          routePathValue += `/${pathNames.shift()}`;\n        }\n      });\n    }\n\n    return routePathValue;\n  }\n\n  function routeLanguage() {\n    return routePathLanguage;\n  }\n\n  function basePathSameAsLocalised() {\n    return basePathNameWithoutNamedParams() === localisedRouteWithoutNamedParams();\n  }\n\n  return Object.freeze({\n    basePathSameAsLocalised,\n    updatedPath,\n    basePathNameWithoutNamedParams,\n    localisedPathName,\n    localisedRouteWithoutNamedParams,\n    namedPath,\n    pathNames,\n    routeLanguage,\n    routePath,\n  });\n}\n\nexport { RouterPath };\n","import { UrlParser } from './url_parser';\nimport { RouterRedirect } from './redirect';\nimport { RouterRoute } from './route';\nimport { RouterPath } from './path';\nimport { anyEmptyNestedRoutes, pathWithoutQueryParams, startsWithNamedParam } from '../lib/utils';\n\nconst NotFoundPage = '/404.html';\n\nfunction RouterFinder({ routes, currentUrl, routerOptions, convert }) {\n  const defaultLanguage = routerOptions.defaultLanguage;\n  const sitePrefix = routerOptions.prefix ? routerOptions.prefix.toLowerCase() : '';\n  const urlParser = parseCurrentUrl(currentUrl, sitePrefix);\n  let redirectTo = '';\n  let routeNamedParams = {};\n  let staticParamMatch = false;\n\n  function findActiveRoute() {\n    let searchActiveRoute = searchActiveRoutes(routes, '', urlParser.pathNames, routerOptions.lang, convert);\n\n    if (!searchActiveRoute || !Object.keys(searchActiveRoute).length || anyEmptyNestedRoutes(searchActiveRoute)) {\n      if (typeof window !== 'undefined') {\n        searchActiveRoute = routeNotFound(routerOptions.lang);\n      }\n    } else {\n      searchActiveRoute.path = pathWithoutQueryParams(searchActiveRoute);\n      if (sitePrefix) {\n        searchActiveRoute.path = `/${sitePrefix}${searchActiveRoute.path}`;\n      }\n    }\n\n    return searchActiveRoute;\n  }\n\n  /**\n   * Gets an array of routes and the browser pathname and return the active route\n   * @param routes\n   * @param basePath\n   * @param pathNames\n   **/\n  function searchActiveRoutes(routes, basePath, pathNames, currentLanguage, convert) {\n    let currentRoute = {};\n    let basePathName = pathNames.shift().toLowerCase();\n    const routerPath = RouterPath({ basePath, basePathName, pathNames, convert, currentLanguage });\n    staticParamMatch = false;\n\n    routes.forEach(function (route) {\n      routerPath.updatedPath(route);\n\n      if (matchRoute(routerPath, route.name)) {\n        let routePath = routerPath.routePath();\n        redirectTo = RouterRedirect(route, redirectTo).path();\n\n        if (currentRoute.name !== routePath) {\n          currentRoute = setCurrentRoute({\n            route,\n            routePath,\n            routeLanguage: routerPath.routeLanguage(),\n            urlParser,\n            namedPath: routerPath.namedPath(),\n          });\n        }\n\n        if (route.nestedRoutes && route.nestedRoutes.length > 0 && routerPath.pathNames.length > 0) {\n          currentRoute.childRoute = searchActiveRoutes(\n            route.nestedRoutes,\n            routePath,\n            routerPath.pathNames,\n            routerPath.routeLanguage(),\n            convert\n          );\n          currentRoute.path = currentRoute.childRoute.path;\n          currentRoute.language = currentRoute.childRoute.language;\n        } else if (nestedRoutesAndNoPath(route, routerPath.pathNames)) {\n          const indexRoute = searchActiveRoutes(\n            route.nestedRoutes,\n            routePath,\n            ['index'],\n            routerPath.routeLanguage(),\n            convert\n          );\n          if (indexRoute && Object.keys(indexRoute).length > 0) {\n            currentRoute.childRoute = indexRoute;\n            currentRoute.language = currentRoute.childRoute.language;\n          }\n        }\n      }\n    });\n\n    if (redirectTo) {\n      currentRoute.redirectTo = redirectTo;\n    }\n\n    return currentRoute;\n  }\n\n  function matchRoute(routerPath, routeName) {\n    const basePathSameAsLocalised = routerPath.basePathSameAsLocalised();\n    if (basePathSameAsLocalised) {\n      staticParamMatch = true;\n    }\n\n    return basePathSameAsLocalised || (!staticParamMatch && startsWithNamedParam(routeName));\n  }\n\n  function nestedRoutesAndNoPath(route, pathNames) {\n    return route.nestedRoutes && route.nestedRoutes.length > 0 && pathNames.length === 0;\n  }\n\n  function parseCurrentUrl(currentUrl, sitePrefix) {\n    if (sitePrefix && sitePrefix.trim().length > 0) {\n      const replacePattern = currentUrl.endsWith(sitePrefix) ? sitePrefix : sitePrefix + \"/\";\n      const noPrefixUrl = currentUrl.replace(replacePattern, '');\n      return UrlParser(noPrefixUrl);\n    } else {\n      return UrlParser(currentUrl);\n    }\n  }\n\n  function setCurrentRoute({ route, routePath, routeLanguage, urlParser, namedPath }) {\n    const routerRoute = RouterRoute({\n      routeInfo: route,\n      urlParser,\n      path: routePath,\n      routeNamedParams,\n      namedPath,\n      language: routeLanguage || defaultLanguage,\n    });\n    routeNamedParams = routerRoute.namedParams();\n\n    return routerRoute.get();\n  }\n\n  const routeNotFound = (customLanguage) => {\n    const custom404Page = routes.find((route) => route.name == '404');\n    const language = customLanguage || defaultLanguage || '';\n    if (custom404Page) {\n      return { ...custom404Page, language, path: '404' };\n    } else {\n      return { name: '404', component: '', path: '404', redirectTo: NotFoundPage };\n    }\n  };\n\n  return Object.freeze({ findActiveRoute });\n}\n\nexport { RouterFinder };\n","import { UrlParser } from './url_parser';\n\nfunction RouterRoute({ routeInfo, path, routeNamedParams, urlParser, namedPath, language }) {\n  const namedParams = () => {\n    const parsedParams = UrlParser(`https://fake.com${urlParser.pathname}`, namedPath).namedParams;\n\n    return { ...routeNamedParams, ...parsedParams };\n  };\n\n  const get = () => {\n    return {\n      name: path,\n      component: routeInfo.component,\n      hash: urlParser.hash,\n      layout: routeInfo.layout,\n      queryParams: urlParser.queryParams,\n      namedParams: namedParams(),\n      path,\n      language,\n    };\n  };\n\n  return Object.freeze({ get, namedParams });\n}\n\nexport { RouterRoute };\n","import { activeRoute } from './store';\nimport { RouterCurrent } from './router/current';\nimport { RouterFinder } from './router/finder';\nimport { removeSlash } from './lib/utils';\n\nconst NotFoundPage = '/404.html';\n\nlet userDefinedRoutes = [];\nlet routerOptions = {};\nlet routerCurrent;\n\n/**\n * Object exposes one single property: activeRoute\n * @param routes  Array of routes\n * @param currentUrl current url\n * @param options configuration options\n **/\nconst SpaRouter = (routes, currentUrl, options = {}) => {\n  routerOptions = { ...options };\n  if (typeof currentUrl === 'undefined' || currentUrl === '') {\n    currentUrl = document.location.href;\n  }\n\n  routerCurrent = RouterCurrent(routerOptions.gaPageviews);\n\n  currentUrl = removeSlash(currentUrl, 'trail');\n  userDefinedRoutes = routes;\n\n  const findActiveRoute = () => {\n    let convert = false;\n\n    if (routerOptions.langConvertTo) {\n      routerOptions.lang = routerOptions.langConvertTo;\n      convert = true;\n    }\n\n    return RouterFinder({ routes, currentUrl, routerOptions, convert }).findActiveRoute();\n  };\n\n  /**\n   * Redirect current route to another\n   * @param destinationUrl\n   **/\n  const navigateNow = (destinationUrl, updateBrowserHistory) => {\n    if (typeof window !== 'undefined') {\n      if (destinationUrl === NotFoundPage) {\n        routerCurrent.setActive({ path: NotFoundPage }, updateBrowserHistory);\n      } else {\n        navigateTo(destinationUrl);\n      }\n    }\n\n    return destinationUrl;\n  };\n\n  const setActiveRoute = (updateBrowserHistory = true) => {\n    const currentRoute = findActiveRoute();\n    if (currentRoute.redirectTo) {\n      return navigateNow(currentRoute.redirectTo, updateBrowserHistory);\n    }\n\n    routerCurrent.setActive(currentRoute, updateBrowserHistory);\n    activeRoute.set(currentRoute);\n\n    return currentRoute;\n  };\n\n  return Object.freeze({\n    setActiveRoute,\n    findActiveRoute,\n  });\n};\n\n/**\n * Converts a route to its localised version\n * @param pathName\n **/\nconst localisedRoute = (pathName, language) => {\n  pathName = removeSlash(pathName, 'lead');\n  routerOptions.langConvertTo = language;\n\n  return SpaRouter(userDefinedRoutes, 'http://fake.com/' + pathName, routerOptions).findActiveRoute();\n};\n\n/**\n * Updates the current active route and updates the browser pathname\n * @param pathName String\n * @param language String\n * @param updateBrowserHistory Boolean\n **/\nconst navigateTo = (pathName, language = null, updateBrowserHistory = true) => {\n  pathName = removeSlash(pathName, 'lead');\n\n  if (language) {\n    routerOptions.langConvertTo = language;\n  }\n\n  return SpaRouter(userDefinedRoutes, 'http://fake.com/' + pathName, routerOptions).setActiveRoute(\n    updateBrowserHistory\n  );\n};\n\n/**\n * Returns true if pathName is current active route\n * @param pathName String The path name to check against the current route.\n * @param includePath Boolean if true checks that pathName is included in current route. If false should match it.\n **/\nconst routeIsActive = (queryPath, includePath = false) => {\n  return routerCurrent.isActive(queryPath, includePath);\n};\n\nif (typeof window !== 'undefined') {\n  // Avoid full page reload on local routes\n  window.addEventListener('click', (event) => {\n    if (event.target.localName.toLowerCase() !== 'a') return;\n    if (event.metaKey || event.ctrlKey || event.shiftKey) return;\n\n    const sitePrefix = routerOptions.prefix ? `/${routerOptions.prefix.toLowerCase()}` : '';\n    const targetHostNameInternal = event.target.pathname && event.target.host === window.location.host;\n    const prefixMatchPath = sitePrefix.length > 1 ? event.target.pathname.startsWith(sitePrefix) : true;\n\n    if (targetHostNameInternal && prefixMatchPath) {\n      event.preventDefault();\n      let navigatePathname = event.target.pathname + event.target.search;\n\n      const destinationUrl = navigatePathname + event.target.search + event.target.hash;\n      if (event.target.target === '_blank') {\n        window.open(destinationUrl, 'newTab');\n      } else {\n        navigateTo(destinationUrl);\n      }\n    }\n  });\n\n  window.onpopstate = function (_event) {\n    let navigatePathname = window.location.pathname + window.location.search + window.location.hash;\n\n    navigateTo(navigatePathname, null, false);\n  };\n}\n\nexport { SpaRouter, localisedRoute, navigateTo, routeIsActive };\n","<script>\n  export let currentRoute = {};\n  export let params = {};\n</script>\n\n{#if currentRoute.layout}\n  <svelte:component this={currentRoute.layout} currentRoute={{ ...currentRoute, layout: '' }} {params} />\n{:else if currentRoute.component}\n  <svelte:component this={currentRoute.component} currentRoute={{ ...currentRoute, component: '' }} {params} />\n{:else if currentRoute.childRoute}\n  <svelte:self currentRoute={currentRoute.childRoute} {params} />\n{/if}\n","<script>\n  import { onMount } from 'svelte';\n\n  import { SpaRouter } from '../spa_router';\n  import Route from './route.svelte';\n  import { activeRoute } from '../store';\n\n  export let routes = [];\n  export let options = {};\n\n  onMount(() => {\n    SpaRouter(routes, document.location.href, options).setActiveRoute();\n  });\n</script>\n\n<Route currentRoute={$activeRoute} />\n","<script>\r\n    export let nick;\r\n</script>\r\n\r\n<div id=\"root\">\r\n    <div id=\"box\">\r\n        <img src=\"./static/ava.png\" alt=\"ava\" />\r\n    </div>  \r\n    <h3>{nick}</h3>\r\n    <p>ready</p>\r\n</div>\r\n\r\n<style>\r\n    #root {\r\n        width: 92%;\r\n        padding: 0.5em;\r\n        padding-left: 1em;\r\n        padding-top: 1em;\r\n    }\r\n    #box {\r\n        outline: 2px solid blue;\r\n        border-radius: 10px;\r\n        width: max-content;\r\n        padding: 0.5em;\r\n        height: max-content;\r\n        display: inline-block;\r\n    }\r\n    img {\r\n        width: 2.2em;\r\n        height: 2.2em;\r\n        margin-left: 50%;\r\n        transform: translateX(-50%);\r\n        margin-top: 0.1em;\r\n    }\r\n    h3 {\r\n        display: inline-block;\r\n        color: white;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 600;\r\n        font-size: 18px;\r\n        line-height: 14px;\r\n        margin-left: 0.5em;\r\n        transform: translateY(-1em);\r\n    }\r\n    P{\r\n        display: inline-block;\r\n        color: greenyellow;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 300;\r\n        font-size: 15px;\r\n        line-height: 14px;\r\n        margin-left: -3.5em;\r\n    }\r\n</style>\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n/** Error thrown when an HTTP request fails. */\r\nexport class HttpError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     * @param {number} statusCode The HTTP status code represented by this error.\r\n     */\r\n    constructor(errorMessage, statusCode) {\r\n        const trueProto = new.target.prototype;\r\n        super(`${errorMessage}: Status code '${statusCode}'`);\r\n        this.statusCode = statusCode;\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when a timeout elapses. */\r\nexport class TimeoutError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.TimeoutError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage = \"A timeout occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when an action is aborted. */\r\nexport class AbortError extends Error {\r\n    /** Constructs a new instance of {@link AbortError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage = \"An abort occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when the selected transport is unsupported by the browser. */\r\n/** @private */\r\nexport class UnsupportedTransportError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.UnsupportedTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occured on.\r\n     */\r\n    constructor(message, transport) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'UnsupportedTransportError';\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when the selected transport is disabled by the browser. */\r\n/** @private */\r\nexport class DisabledTransportError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.DisabledTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occured on.\r\n     */\r\n    constructor(message, transport) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'DisabledTransportError';\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when the selected transport cannot be started. */\r\n/** @private */\r\nexport class FailedToStartTransportError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToStartTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occured on.\r\n     */\r\n    constructor(message, transport) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'FailedToStartTransportError';\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when the negotiation with the server failed to complete. */\r\n/** @private */\r\nexport class FailedToNegotiateWithServerError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToNegotiateWithServerError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     */\r\n    constructor(message) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.errorType = 'FailedToNegotiateWithServerError';\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when multiple errors have occured. */\r\n/** @private */\r\nexport class AggregateErrors extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.AggregateErrors}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {Error[]} innerErrors The collection of errors this error is aggregating.\r\n     */\r\n    constructor(message, innerErrors) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.innerErrors = innerErrors;\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n//# sourceMappingURL=Errors.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n/** Represents an HTTP response. */\r\nexport class HttpResponse {\r\n    constructor(statusCode, statusText, content) {\r\n        this.statusCode = statusCode;\r\n        this.statusText = statusText;\r\n        this.content = content;\r\n    }\r\n}\r\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\r\nexport class HttpClient {\r\n    get(url, options) {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n    post(url, options) {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n    delete(url, options) {\r\n        return this.send({\r\n            ...options,\r\n            method: \"DELETE\",\r\n            url,\r\n        });\r\n    }\r\n    /** Gets all cookies that apply to the specified URL.\r\n     *\r\n     * @param url The URL that the cookies are valid for.\r\n     * @returns {string} A string containing all the key-value cookie pairs for the specified URL.\r\n     */\r\n    // @ts-ignore\r\n    getCookieString(url) {\r\n        return \"\";\r\n    }\r\n}\r\n//# sourceMappingURL=HttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\r\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\r\nexport var LogLevel;\r\n(function (LogLevel) {\r\n    /** Log level for very low severity diagnostic messages. */\r\n    LogLevel[LogLevel[\"Trace\"] = 0] = \"Trace\";\r\n    /** Log level for low severity diagnostic messages. */\r\n    LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\r\n    /** Log level for informational diagnostic messages. */\r\n    LogLevel[LogLevel[\"Information\"] = 2] = \"Information\";\r\n    /** Log level for diagnostic messages that indicate a non-fatal problem. */\r\n    LogLevel[LogLevel[\"Warning\"] = 3] = \"Warning\";\r\n    /** Log level for diagnostic messages that indicate a failure in the current operation. */\r\n    LogLevel[LogLevel[\"Error\"] = 4] = \"Error\";\r\n    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\r\n    LogLevel[LogLevel[\"Critical\"] = 5] = \"Critical\";\r\n    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\r\n    LogLevel[LogLevel[\"None\"] = 6] = \"None\";\r\n})(LogLevel || (LogLevel = {}));\r\n//# sourceMappingURL=ILogger.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n/** A logger that does nothing when log messages are sent to it. */\r\nexport class NullLogger {\r\n    constructor() { }\r\n    /** @inheritDoc */\r\n    // eslint-disable-next-line\r\n    log(_logLevel, _message) {\r\n    }\r\n}\r\n/** The singleton instance of the {@link @microsoft/signalr.NullLogger}. */\r\nNullLogger.instance = new NullLogger();\r\n//# sourceMappingURL=Loggers.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { NullLogger } from \"./Loggers\";\r\n// Version token that will be replaced by the prepack command\r\n/** The version of the SignalR client. */\r\nexport const VERSION = \"6.0.1\";\r\n/** @private */\r\nexport class Arg {\r\n    static isRequired(val, name) {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n    static isNotEmpty(val, name) {\r\n        if (!val || val.match(/^\\s*$/)) {\r\n            throw new Error(`The '${name}' argument should not be empty.`);\r\n        }\r\n    }\r\n    static isIn(val, values, name) {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n/** @private */\r\nexport class Platform {\r\n    static get isBrowser() {\r\n        return typeof window === \"object\";\r\n    }\r\n    static get isWebWorker() {\r\n        return typeof self === \"object\" && \"importScripts\" in self;\r\n    }\r\n    static get isNode() {\r\n        return !this.isBrowser && !this.isWebWorker;\r\n    }\r\n}\r\n/** @private */\r\nexport function getDataDetail(data, includeContent) {\r\n    let detail = \"\";\r\n    if (isArrayBuffer(data)) {\r\n        detail = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    }\r\n    else if (typeof data === \"string\") {\r\n        detail = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${data}'`;\r\n        }\r\n    }\r\n    return detail;\r\n}\r\n/** @private */\r\nexport function formatArrayBuffer(data) {\r\n    const view = new Uint8Array(data);\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n// Also in signalr-protocol-msgpack/Utils.ts\r\n/** @private */\r\nexport function isArrayBuffer(val) {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}\r\n/** @private */\r\nexport async function sendMessage(logger, transportName, httpClient, url, accessTokenFactory, content, options) {\r\n    let headers = {};\r\n    if (accessTokenFactory) {\r\n        const token = await accessTokenFactory();\r\n        if (token) {\r\n            headers = {\r\n                [\"Authorization\"]: `Bearer ${token}`,\r\n            };\r\n        }\r\n    }\r\n    const [name, value] = getUserAgentHeader();\r\n    headers[name] = value;\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, options.logMessageContent)}.`);\r\n    const responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers: { ...headers, ...options.headers },\r\n        responseType,\r\n        timeout: options.timeout,\r\n        withCredentials: options.withCredentials,\r\n    });\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n/** @private */\r\nexport function createLogger(logger) {\r\n    if (logger === undefined) {\r\n        return new ConsoleLogger(LogLevel.Information);\r\n    }\r\n    if (logger === null) {\r\n        return NullLogger.instance;\r\n    }\r\n    if (logger.log !== undefined) {\r\n        return logger;\r\n    }\r\n    return new ConsoleLogger(logger);\r\n}\r\n/** @private */\r\nexport class SubjectSubscription {\r\n    constructor(subject, observer) {\r\n        this._subject = subject;\r\n        this._observer = observer;\r\n    }\r\n    dispose() {\r\n        const index = this._subject.observers.indexOf(this._observer);\r\n        if (index > -1) {\r\n            this._subject.observers.splice(index, 1);\r\n        }\r\n        if (this._subject.observers.length === 0 && this._subject.cancelCallback) {\r\n            this._subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n/** @private */\r\nexport class ConsoleLogger {\r\n    constructor(minimumLogLevel) {\r\n        this._minLevel = minimumLogLevel;\r\n        this.out = console;\r\n    }\r\n    log(logLevel, message) {\r\n        if (logLevel >= this._minLevel) {\r\n            const msg = `[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`;\r\n            switch (logLevel) {\r\n                case LogLevel.Critical:\r\n                case LogLevel.Error:\r\n                    this.out.error(msg);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    this.out.warn(msg);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    this.out.info(msg);\r\n                    break;\r\n                default:\r\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n                    this.out.log(msg);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n/** @private */\r\nexport function getUserAgentHeader() {\r\n    let userAgentHeaderName = \"X-SignalR-User-Agent\";\r\n    if (Platform.isNode) {\r\n        userAgentHeaderName = \"User-Agent\";\r\n    }\r\n    return [userAgentHeaderName, constructUserAgent(VERSION, getOsName(), getRuntime(), getRuntimeVersion())];\r\n}\r\n/** @private */\r\nexport function constructUserAgent(version, os, runtime, runtimeVersion) {\r\n    // Microsoft SignalR/[Version] ([Detailed Version]; [Operating System]; [Runtime]; [Runtime Version])\r\n    let userAgent = \"Microsoft SignalR/\";\r\n    const majorAndMinor = version.split(\".\");\r\n    userAgent += `${majorAndMinor[0]}.${majorAndMinor[1]}`;\r\n    userAgent += ` (${version}; `;\r\n    if (os && os !== \"\") {\r\n        userAgent += `${os}; `;\r\n    }\r\n    else {\r\n        userAgent += \"Unknown OS; \";\r\n    }\r\n    userAgent += `${runtime}`;\r\n    if (runtimeVersion) {\r\n        userAgent += `; ${runtimeVersion}`;\r\n    }\r\n    else {\r\n        userAgent += \"; Unknown Runtime Version\";\r\n    }\r\n    userAgent += \")\";\r\n    return userAgent;\r\n}\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getOsName() {\r\n    if (Platform.isNode) {\r\n        switch (process.platform) {\r\n            case \"win32\":\r\n                return \"Windows NT\";\r\n            case \"darwin\":\r\n                return \"macOS\";\r\n            case \"linux\":\r\n                return \"Linux\";\r\n            default:\r\n                return process.platform;\r\n        }\r\n    }\r\n    else {\r\n        return \"\";\r\n    }\r\n}\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getRuntimeVersion() {\r\n    if (Platform.isNode) {\r\n        return process.versions.node;\r\n    }\r\n    return undefined;\r\n}\r\nfunction getRuntime() {\r\n    if (Platform.isNode) {\r\n        return \"NodeJS\";\r\n    }\r\n    else {\r\n        return \"Browser\";\r\n    }\r\n}\r\n/** @private */\r\nexport function getErrorString(e) {\r\n    if (e.stack) {\r\n        return e.stack;\r\n    }\r\n    else if (e.message) {\r\n        return e.message;\r\n    }\r\n    return `${e}`;\r\n}\r\n/** @private */\r\nexport function getGlobalThis() {\r\n    // globalThis is semi-new and not available in Node until v12\r\n    if (typeof globalThis !== \"undefined\") {\r\n        return globalThis;\r\n    }\r\n    if (typeof self !== \"undefined\") {\r\n        return self;\r\n    }\r\n    if (typeof window !== \"undefined\") {\r\n        return window;\r\n    }\r\n    if (typeof global !== \"undefined\") {\r\n        return global;\r\n    }\r\n    throw new Error(\"could not find global\");\r\n}\r\n//# sourceMappingURL=Utils.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { Platform, getGlobalThis } from \"./Utils\";\r\nexport class FetchHttpClient extends HttpClient {\r\n    constructor(logger) {\r\n        super();\r\n        this._logger = logger;\r\n        if (typeof fetch === \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests\r\n            this._jar = new (requireFunc(\"tough-cookie\")).CookieJar();\r\n            this._fetchType = requireFunc(\"node-fetch\");\r\n            // node-fetch doesn't have a nice API for getting and setting cookies\r\n            // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one\r\n            this._fetchType = requireFunc(\"fetch-cookie\")(this._fetchType, this._jar);\r\n        }\r\n        else {\r\n            this._fetchType = fetch.bind(getGlobalThis());\r\n        }\r\n        if (typeof AbortController === \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide\r\n            this._abortControllerType = requireFunc(\"abort-controller\");\r\n        }\r\n        else {\r\n            this._abortControllerType = AbortController;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    async send(request) {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            throw new AbortError();\r\n        }\r\n        if (!request.method) {\r\n            throw new Error(\"No method defined.\");\r\n        }\r\n        if (!request.url) {\r\n            throw new Error(\"No url defined.\");\r\n        }\r\n        const abortController = new this._abortControllerType();\r\n        let error;\r\n        // Hook our abortSignal into the abort controller\r\n        if (request.abortSignal) {\r\n            request.abortSignal.onabort = () => {\r\n                abortController.abort();\r\n                error = new AbortError();\r\n            };\r\n        }\r\n        // If a timeout has been passed in, setup a timeout to call abort\r\n        // Type needs to be any to fit window.setTimeout and NodeJS.setTimeout\r\n        let timeoutId = null;\r\n        if (request.timeout) {\r\n            const msTimeout = request.timeout;\r\n            timeoutId = setTimeout(() => {\r\n                abortController.abort();\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                error = new TimeoutError();\r\n            }, msTimeout);\r\n        }\r\n        let response;\r\n        try {\r\n            response = await this._fetchType(request.url, {\r\n                body: request.content,\r\n                cache: \"no-cache\",\r\n                credentials: request.withCredentials === true ? \"include\" : \"same-origin\",\r\n                headers: {\r\n                    \"Content-Type\": \"text/plain;charset=UTF-8\",\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                    ...request.headers,\r\n                },\r\n                method: request.method,\r\n                mode: \"cors\",\r\n                redirect: \"follow\",\r\n                signal: abortController.signal,\r\n            });\r\n        }\r\n        catch (e) {\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            this._logger.log(LogLevel.Warning, `Error from HTTP request. ${e}.`);\r\n            throw e;\r\n        }\r\n        finally {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = null;\r\n            }\r\n        }\r\n        if (!response.ok) {\r\n            const errorMessage = await deserializeContent(response, \"text\");\r\n            throw new HttpError(errorMessage || response.statusText, response.status);\r\n        }\r\n        const content = deserializeContent(response, request.responseType);\r\n        const payload = await content;\r\n        return new HttpResponse(response.status, response.statusText, payload);\r\n    }\r\n    getCookieString(url) {\r\n        let cookies = \"\";\r\n        if (Platform.isNode && this._jar) {\r\n            // @ts-ignore: unused variable\r\n            this._jar.getCookies(url, (e, c) => cookies = c.join(\"; \"));\r\n        }\r\n        return cookies;\r\n    }\r\n}\r\nfunction deserializeContent(response, responseType) {\r\n    let content;\r\n    switch (responseType) {\r\n        case \"arraybuffer\":\r\n            content = response.arrayBuffer();\r\n            break;\r\n        case \"text\":\r\n            content = response.text();\r\n            break;\r\n        case \"blob\":\r\n        case \"document\":\r\n        case \"json\":\r\n            throw new Error(`${responseType} is not supported.`);\r\n        default:\r\n            content = response.text();\r\n            break;\r\n    }\r\n    return content;\r\n}\r\n//# sourceMappingURL=FetchHttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\r\nimport { LogLevel } from \"./ILogger\";\r\nexport class XhrHttpClient extends HttpClient {\r\n    constructor(logger) {\r\n        super();\r\n        this._logger = logger;\r\n    }\r\n    /** @inheritDoc */\r\n    send(request) {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.open(request.method, request.url, true);\r\n            xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                    xhr.setRequestHeader(header, headers[header]);\r\n                });\r\n            }\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                }\r\n                else {\r\n                    reject(new HttpError(xhr.response || xhr.responseText || xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n            xhr.onerror = () => {\r\n                this._logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n            xhr.ontimeout = () => {\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n            xhr.send(request.content || \"\");\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=XhrHttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortError } from \"./Errors\";\r\nimport { FetchHttpClient } from \"./FetchHttpClient\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { Platform } from \"./Utils\";\r\nimport { XhrHttpClient } from \"./XhrHttpClient\";\r\n/** Default implementation of {@link @microsoft/signalr.HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */\r\n    constructor(logger) {\r\n        super();\r\n        if (typeof fetch !== \"undefined\" || Platform.isNode) {\r\n            this._httpClient = new FetchHttpClient(logger);\r\n        }\r\n        else if (typeof XMLHttpRequest !== \"undefined\") {\r\n            this._httpClient = new XhrHttpClient(logger);\r\n        }\r\n        else {\r\n            throw new Error(\"No usable HttpClient found.\");\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    send(request) {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n        return this._httpClient.send(request);\r\n    }\r\n    getCookieString(url) {\r\n        return this._httpClient.getCookieString(url);\r\n    }\r\n}\r\n//# sourceMappingURL=DefaultHttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// Not exported from index\r\n/** @private */\r\nexport class TextMessageFormat {\r\n    static write(output) {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n    static parse(input) {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\nTextMessageFormat.RecordSeparatorCode = 0x1e;\r\nTextMessageFormat.RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n//# sourceMappingURL=TextMessageFormat.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    writeHandshakeRequest(handshakeRequest) {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n    parseHandshakeResponse(data) {\r\n        let messageData;\r\n        let remainingData;\r\n        if (isArrayBuffer(data)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, Array.prototype.slice.call(binaryData.slice(0, responseLength)));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        }\r\n        else {\r\n            const textData = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        const responseMessage = response;\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n//# sourceMappingURL=HandshakeProtocol.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n/** Defines the type of a Hub Message. */\r\nexport var MessageType;\r\n(function (MessageType) {\r\n    /** Indicates the message is an Invocation message and implements the {@link @microsoft/signalr.InvocationMessage} interface. */\r\n    MessageType[MessageType[\"Invocation\"] = 1] = \"Invocation\";\r\n    /** Indicates the message is a StreamItem message and implements the {@link @microsoft/signalr.StreamItemMessage} interface. */\r\n    MessageType[MessageType[\"StreamItem\"] = 2] = \"StreamItem\";\r\n    /** Indicates the message is a Completion message and implements the {@link @microsoft/signalr.CompletionMessage} interface. */\r\n    MessageType[MessageType[\"Completion\"] = 3] = \"Completion\";\r\n    /** Indicates the message is a Stream Invocation message and implements the {@link @microsoft/signalr.StreamInvocationMessage} interface. */\r\n    MessageType[MessageType[\"StreamInvocation\"] = 4] = \"StreamInvocation\";\r\n    /** Indicates the message is a Cancel Invocation message and implements the {@link @microsoft/signalr.CancelInvocationMessage} interface. */\r\n    MessageType[MessageType[\"CancelInvocation\"] = 5] = \"CancelInvocation\";\r\n    /** Indicates the message is a Ping message and implements the {@link @microsoft/signalr.PingMessage} interface. */\r\n    MessageType[MessageType[\"Ping\"] = 6] = \"Ping\";\r\n    /** Indicates the message is a Close message and implements the {@link @microsoft/signalr.CloseMessage} interface. */\r\n    MessageType[MessageType[\"Close\"] = 7] = \"Close\";\r\n})(MessageType || (MessageType = {}));\r\n//# sourceMappingURL=IHubProtocol.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { SubjectSubscription } from \"./Utils\";\r\n/** Stream implementation to stream items to the server. */\r\nexport class Subject {\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n    next(item) {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n    error(err) {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n    complete() {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n    subscribe(observer) {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n//# sourceMappingURL=Subject.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { HandshakeProtocol } from \"./HandshakeProtocol\";\r\nimport { MessageType } from \"./IHubProtocol\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { Subject } from \"./Subject\";\r\nimport { Arg, getErrorString, Platform } from \"./Utils\";\r\nconst DEFAULT_TIMEOUT_IN_MS = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS = 15 * 1000;\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport var HubConnectionState;\r\n(function (HubConnectionState) {\r\n    /** The hub connection is disconnected. */\r\n    HubConnectionState[\"Disconnected\"] = \"Disconnected\";\r\n    /** The hub connection is connecting. */\r\n    HubConnectionState[\"Connecting\"] = \"Connecting\";\r\n    /** The hub connection is connected. */\r\n    HubConnectionState[\"Connected\"] = \"Connected\";\r\n    /** The hub connection is disconnecting. */\r\n    HubConnectionState[\"Disconnecting\"] = \"Disconnecting\";\r\n    /** The hub connection is reconnecting. */\r\n    HubConnectionState[\"Reconnecting\"] = \"Reconnecting\";\r\n})(HubConnectionState || (HubConnectionState = {}));\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    constructor(connection, logger, protocol, reconnectPolicy) {\r\n        this._nextKeepAlive = 0;\r\n        this._freezeEventListener = () => {\r\n            this._logger.log(LogLevel.Warning, \"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://docs.microsoft.com/aspnet/core/signalr/javascript-client#bsleep\");\r\n        };\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\r\n        this._logger = logger;\r\n        this._protocol = protocol;\r\n        this.connection = connection;\r\n        this._reconnectPolicy = reconnectPolicy;\r\n        this._handshakeProtocol = new HandshakeProtocol();\r\n        this.connection.onreceive = (data) => this._processIncomingData(data);\r\n        this.connection.onclose = (error) => this._connectionClosed(error);\r\n        this._callbacks = {};\r\n        this._methods = {};\r\n        this._closedCallbacks = [];\r\n        this._reconnectingCallbacks = [];\r\n        this._reconnectedCallbacks = [];\r\n        this._invocationId = 0;\r\n        this._receivedHandshakeResponse = false;\r\n        this._connectionState = HubConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n        this._cachedPingMessage = this._protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    static create(connection, logger, protocol, reconnectPolicy) {\r\n        return new HubConnection(connection, logger, protocol, reconnectPolicy);\r\n    }\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state() {\r\n        return this._connectionState;\r\n    }\r\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */\r\n    get connectionId() {\r\n        return this.connection ? (this.connection.connectionId || null) : null;\r\n    }\r\n    /** Indicates the url of the {@link HubConnection} to the server. */\r\n    get baseUrl() {\r\n        return this.connection.baseUrl || \"\";\r\n    }\r\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */\r\n    set baseUrl(url) {\r\n        if (this._connectionState !== HubConnectionState.Disconnected && this._connectionState !== HubConnectionState.Reconnecting) {\r\n            throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\r\n        }\r\n        if (!url) {\r\n            throw new Error(\"The HubConnection url must be a valid url.\");\r\n        }\r\n        this.connection.baseUrl = url;\r\n    }\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    start() {\r\n        this._startPromise = this._startWithStateTransitions();\r\n        return this._startPromise;\r\n    }\r\n    async _startWithStateTransitions() {\r\n        if (this._connectionState !== HubConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n        this._connectionState = HubConnectionState.Connecting;\r\n        this._logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n        try {\r\n            await this._startInternal();\r\n            if (Platform.isBrowser) {\r\n                if (document) {\r\n                    // Log when the browser freezes the tab so users know why their connection unexpectedly stopped working\r\n                    document.addEventListener(\"freeze\", this._freezeEventListener);\r\n                }\r\n            }\r\n            this._connectionState = HubConnectionState.Connected;\r\n            this._connectionStarted = true;\r\n            this._logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\r\n        }\r\n        catch (e) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    async _startInternal() {\r\n        this._stopDuringStartError = undefined;\r\n        this._receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is (re)started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this._handshakeResolver = resolve;\r\n            this._handshakeRejecter = reject;\r\n        });\r\n        await this.connection.start(this._protocol.transferFormat);\r\n        try {\r\n            const handshakeRequest = {\r\n                protocol: this._protocol.name,\r\n                version: this._protocol.version,\r\n            };\r\n            this._logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n            await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n            this._logger.log(LogLevel.Information, `Using HubProtocol '${this._protocol.name}'.`);\r\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n            this._cleanupTimeout();\r\n            this._resetTimeoutPeriod();\r\n            this._resetKeepAliveInterval();\r\n            await handshakePromise;\r\n            // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\r\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\r\n            // and the connection was closed.\r\n            if (this._stopDuringStartError) {\r\n                // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\r\n                // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\r\n                // will cause the calling continuation to get scheduled to run later.\r\n                // eslint-disable-next-line @typescript-eslint/no-throw-literal\r\n                throw this._stopDuringStartError;\r\n            }\r\n        }\r\n        catch (e) {\r\n            this._logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\r\n            this._cleanupTimeout();\r\n            this._cleanupPingTimer();\r\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\r\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\r\n            await this.connection.stop(e);\r\n            throw e;\r\n        }\r\n    }\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    async stop() {\r\n        // Capture the start promise before the connection might be restarted in an onclose callback.\r\n        const startPromise = this._startPromise;\r\n        this._stopPromise = this._stopInternal();\r\n        await this._stopPromise;\r\n        try {\r\n            // Awaiting undefined continues immediately\r\n            await startPromise;\r\n        }\r\n        catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n    }\r\n    _stopInternal(error) {\r\n        if (this._connectionState === HubConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n        this._connectionState = HubConnectionState.Disconnecting;\r\n        this._logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n        if (this._reconnectDelayHandle) {\r\n            // We're in a reconnect delay which means the underlying connection is currently already stopped.\r\n            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\r\n            // fire the onclose callbacks.\r\n            this._logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\r\n            clearTimeout(this._reconnectDelayHandle);\r\n            this._reconnectDelayHandle = undefined;\r\n            this._completeClose();\r\n            return Promise.resolve();\r\n        }\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        this._stopDuringStartError = error || new Error(\"The connection was stopped before the hub handshake could complete.\");\r\n        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\r\n        // or the onclose callback is invoked. The onclose callback will transition the HubConnection\r\n        // to the disconnected state if need be before HttpConnection.stop() completes.\r\n        return this.connection.stop(error);\r\n    }\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    stream(methodName, ...args) {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createStreamInvocation(methodName, args, streamIds);\r\n        // eslint-disable-next-line prefer-const\r\n        let promiseQueue;\r\n        const subject = new Subject();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation = this._createCancelInvocation(invocationDescriptor.invocationId);\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n            return promiseQueue.then(() => {\r\n                return this._sendWithProtocol(cancelInvocation);\r\n            });\r\n        };\r\n        this._callbacks[invocationDescriptor.invocationId] = (invocationEvent, error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            }\r\n            else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    }\r\n                    else {\r\n                        subject.complete();\r\n                    }\r\n                }\r\n                else {\r\n                    subject.next((invocationEvent.item));\r\n                }\r\n            }\r\n        };\r\n        promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n            .catch((e) => {\r\n            subject.error(e);\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n        });\r\n        this._launchStreams(streams, promiseQueue);\r\n        return subject;\r\n    }\r\n    _sendMessage(message) {\r\n        this._resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n    /**\r\n     * Sends a js object to the server.\r\n     * @param message The js object to serialize and send.\r\n     */\r\n    _sendWithProtocol(message) {\r\n        return this._sendMessage(this._protocol.writeMessage(message));\r\n    }\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    send(methodName, ...args) {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const sendPromise = this._sendWithProtocol(this._createInvocation(methodName, args, true, streamIds));\r\n        this._launchStreams(streams, sendPromise);\r\n        return sendPromise;\r\n    }\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    invoke(methodName, ...args) {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createInvocation(methodName, args, false, streamIds);\r\n        const p = new Promise((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this._callbacks[invocationDescriptor.invocationId] = (invocationEvent, error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n                else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        }\r\n                        else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    }\r\n                    else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n            const promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n                .catch((e) => {\r\n                reject(e);\r\n                // invocationId will always have a value for a non-blocking invocation\r\n                delete this._callbacks[invocationDescriptor.invocationId];\r\n            });\r\n            this._launchStreams(streams, promiseQueue);\r\n        });\r\n        return p;\r\n    }\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    on(methodName, newMethod) {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n        methodName = methodName.toLowerCase();\r\n        if (!this._methods[methodName]) {\r\n            this._methods[methodName] = [];\r\n        }\r\n        // Preventing adding the same handler multiple times.\r\n        if (this._methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n        this._methods[methodName].push(newMethod);\r\n    }\r\n    off(methodName, method) {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this._methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this._methods[methodName];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            delete this._methods[methodName];\r\n        }\r\n    }\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    onclose(callback) {\r\n        if (callback) {\r\n            this._closedCallbacks.push(callback);\r\n        }\r\n    }\r\n    /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n     */\r\n    onreconnecting(callback) {\r\n        if (callback) {\r\n            this._reconnectingCallbacks.push(callback);\r\n        }\r\n    }\r\n    /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n     */\r\n    onreconnected(callback) {\r\n        if (callback) {\r\n            this._reconnectedCallbacks.push(callback);\r\n        }\r\n    }\r\n    _processIncomingData(data) {\r\n        this._cleanupTimeout();\r\n        if (!this._receivedHandshakeResponse) {\r\n            data = this._processHandshakeResponse(data);\r\n            this._receivedHandshakeResponse = true;\r\n        }\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this._protocol.parseMessages(data, this._logger);\r\n            for (const message of messages) {\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this._invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion: {\r\n                        const callback = this._callbacks[message.invocationId];\r\n                        if (callback) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this._callbacks[message.invocationId];\r\n                            }\r\n                            try {\r\n                                callback(message);\r\n                            }\r\n                            catch (e) {\r\n                                this._logger.log(LogLevel.Error, `Stream callback threw error: ${getErrorString(e)}`);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close: {\r\n                        this._logger.log(LogLevel.Information, \"Close message received from server.\");\r\n                        const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\r\n                        if (message.allowReconnect === true) {\r\n                            // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\r\n                            // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\r\n                            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                            this.connection.stop(error);\r\n                        }\r\n                        else {\r\n                            // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\r\n                            this._stopPromise = this._stopInternal(error);\r\n                        }\r\n                        break;\r\n                    }\r\n                    default:\r\n                        this._logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        this._resetTimeoutPeriod();\r\n    }\r\n    _processHandshakeResponse(data) {\r\n        let responseMessage;\r\n        let remainingData;\r\n        try {\r\n            [remainingData, responseMessage] = this._handshakeProtocol.parseHandshakeResponse(data);\r\n        }\r\n        catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this._logger.log(LogLevel.Error, message);\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this._logger.log(LogLevel.Error, message);\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n        this._handshakeResolver();\r\n        return remainingData;\r\n    }\r\n    _resetKeepAliveInterval() {\r\n        if (this.connection.features.inherentKeepAlive) {\r\n            return;\r\n        }\r\n        // Set the time we want the next keep alive to be sent\r\n        // Timer will be setup on next message receive\r\n        this._nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;\r\n        this._cleanupPingTimer();\r\n    }\r\n    _resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this._timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n            // Set keepAlive timer if there isn't one\r\n            if (this._pingServerHandle === undefined) {\r\n                let nextPing = this._nextKeepAlive - new Date().getTime();\r\n                if (nextPing < 0) {\r\n                    nextPing = 0;\r\n                }\r\n                // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute\r\n                this._pingServerHandle = setTimeout(async () => {\r\n                    if (this._connectionState === HubConnectionState.Connected) {\r\n                        try {\r\n                            await this._sendMessage(this._cachedPingMessage);\r\n                        }\r\n                        catch {\r\n                            // We don't care about the error. It should be seen elsewhere in the client.\r\n                            // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                            this._cleanupPingTimer();\r\n                        }\r\n                    }\r\n                }, nextPing);\r\n            }\r\n        }\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n    _invokeClientMethod(invocationMessage) {\r\n        const methods = this._methods[invocationMessage.target.toLowerCase()];\r\n        if (methods) {\r\n            try {\r\n                methods.forEach((m) => m.apply(this, invocationMessage.arguments));\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `A callback for the method ${invocationMessage.target.toLowerCase()} threw error '${e}'.`);\r\n            }\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                const message = \"Server requested a response, which is not supported in this version of the client.\";\r\n                this._logger.log(LogLevel.Error, message);\r\n                // We don't want to wait on the stop itself.\r\n                this._stopPromise = this._stopInternal(new Error(message));\r\n            }\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\r\n        }\r\n    }\r\n    _connectionClosed(error) {\r\n        this._logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this._connectionState}.`);\r\n        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\r\n        this._stopDuringStartError = this._stopDuringStartError || error || new Error(\"The underlying connection was closed before the hub handshake could complete.\");\r\n        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\r\n        // If it has already completed, this should just noop.\r\n        if (this._handshakeResolver) {\r\n            this._handshakeResolver();\r\n        }\r\n        this._cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._completeClose(error);\r\n        }\r\n        else if (this._connectionState === HubConnectionState.Connected && this._reconnectPolicy) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._reconnect(error);\r\n        }\r\n        else if (this._connectionState === HubConnectionState.Connected) {\r\n            this._completeClose(error);\r\n        }\r\n        // If none of the above if conditions were true were called the HubConnection must be in either:\r\n        // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\r\n        // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\r\n        //    and potentially continue the reconnect() loop.\r\n        // 3. The Disconnected state in which case we're already done.\r\n    }\r\n    _completeClose(error) {\r\n        if (this._connectionStarted) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._connectionStarted = false;\r\n            if (Platform.isBrowser) {\r\n                if (document) {\r\n                    document.removeEventListener(\"freeze\", this._freezeEventListener);\r\n                }\r\n            }\r\n            try {\r\n                this._closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n    async _reconnect(error) {\r\n        const reconnectStartTime = Date.now();\r\n        let previousReconnectAttempts = 0;\r\n        let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\r\n        let nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\r\n        if (nextRetryDelay === null) {\r\n            this._logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\r\n            this._completeClose(error);\r\n            return;\r\n        }\r\n        this._connectionState = HubConnectionState.Reconnecting;\r\n        if (error) {\r\n            this._logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Information, \"Connection reconnecting.\");\r\n        }\r\n        if (this._reconnectingCallbacks.length !== 0) {\r\n            try {\r\n                this._reconnectingCallbacks.forEach((c) => c.apply(this, [error]));\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n            // Exit early if an onreconnecting callback called connection.stop().\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\r\n                return;\r\n            }\r\n        }\r\n        while (nextRetryDelay !== null) {\r\n            this._logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\r\n            await new Promise((resolve) => {\r\n                this._reconnectDelayHandle = setTimeout(resolve, nextRetryDelay);\r\n            });\r\n            this._reconnectDelayHandle = undefined;\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\r\n                return;\r\n            }\r\n            try {\r\n                await this._startInternal();\r\n                this._connectionState = HubConnectionState.Connected;\r\n                this._logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\r\n                if (this._reconnectedCallbacks.length !== 0) {\r\n                    try {\r\n                        this._reconnectedCallbacks.forEach((c) => c.apply(this, [this.connection.connectionId]));\r\n                    }\r\n                    catch (e) {\r\n                        this._logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\r\n                if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                    this._logger.log(LogLevel.Debug, `Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`);\r\n                    // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\r\n                    if (this._connectionState === HubConnectionState.Disconnecting) {\r\n                        this._completeClose();\r\n                    }\r\n                    return;\r\n                }\r\n                retryError = e instanceof Error ? e : new Error(e.toString());\r\n                nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\r\n            }\r\n        }\r\n        this._logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\r\n        this._completeClose();\r\n    }\r\n    _getNextRetryDelay(previousRetryCount, elapsedMilliseconds, retryReason) {\r\n        try {\r\n            return this._reconnectPolicy.nextRetryDelayInMilliseconds({\r\n                elapsedMilliseconds,\r\n                previousRetryCount,\r\n                retryReason,\r\n            });\r\n        }\r\n        catch (e) {\r\n            this._logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\r\n            return null;\r\n        }\r\n    }\r\n    _cancelCallbacksWithError(error) {\r\n        const callbacks = this._callbacks;\r\n        this._callbacks = {};\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n            const callback = callbacks[key];\r\n            try {\r\n                callback(null, error);\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `Stream 'error' callback called with '${error}' threw error: ${getErrorString(e)}`);\r\n            }\r\n        });\r\n    }\r\n    _cleanupPingTimer() {\r\n        if (this._pingServerHandle) {\r\n            clearTimeout(this._pingServerHandle);\r\n            this._pingServerHandle = undefined;\r\n        }\r\n    }\r\n    _cleanupTimeout() {\r\n        if (this._timeoutHandle) {\r\n            clearTimeout(this._timeoutHandle);\r\n        }\r\n    }\r\n    _createInvocation(methodName, args, nonblocking, streamIds) {\r\n        if (nonblocking) {\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    arguments: args,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n        else {\r\n            const invocationId = this._invocationId;\r\n            this._invocationId++;\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n    }\r\n    _launchStreams(streams, promiseQueue) {\r\n        if (streams.length === 0) {\r\n            return;\r\n        }\r\n        // Synchronize stream data so they arrive in-order on the server\r\n        if (!promiseQueue) {\r\n            promiseQueue = Promise.resolve();\r\n        }\r\n        // We want to iterate over the keys, since the keys are the stream ids\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const streamId in streams) {\r\n            streams[streamId].subscribe({\r\n                complete: () => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId)));\r\n                },\r\n                error: (err) => {\r\n                    let message;\r\n                    if (err instanceof Error) {\r\n                        message = err.message;\r\n                    }\r\n                    else if (err && err.toString) {\r\n                        message = err.toString();\r\n                    }\r\n                    else {\r\n                        message = \"Unknown error\";\r\n                    }\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId, message)));\r\n                },\r\n                next: (item) => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createStreamItemMessage(streamId, item)));\r\n                },\r\n            });\r\n        }\r\n    }\r\n    _replaceStreamingParams(args) {\r\n        const streams = [];\r\n        const streamIds = [];\r\n        for (let i = 0; i < args.length; i++) {\r\n            const argument = args[i];\r\n            if (this._isObservable(argument)) {\r\n                const streamId = this._invocationId;\r\n                this._invocationId++;\r\n                // Store the stream for later use\r\n                streams[streamId] = argument;\r\n                streamIds.push(streamId.toString());\r\n                // remove stream from args\r\n                args.splice(i, 1);\r\n            }\r\n        }\r\n        return [streams, streamIds];\r\n    }\r\n    _isObservable(arg) {\r\n        // This allows other stream implementations to just work (like rxjs)\r\n        return arg && arg.subscribe && typeof arg.subscribe === \"function\";\r\n    }\r\n    _createStreamInvocation(methodName, args, streamIds) {\r\n        const invocationId = this._invocationId;\r\n        this._invocationId++;\r\n        if (streamIds.length !== 0) {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n    }\r\n    _createCancelInvocation(id) {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n    _createStreamItemMessage(id, item) {\r\n        return {\r\n            invocationId: id,\r\n            item,\r\n            type: MessageType.StreamItem,\r\n        };\r\n    }\r\n    _createCompletionMessage(id, error, result) {\r\n        if (error) {\r\n            return {\r\n                error,\r\n                invocationId: id,\r\n                type: MessageType.Completion,\r\n            };\r\n        }\r\n        return {\r\n            invocationId: id,\r\n            result,\r\n            type: MessageType.Completion,\r\n        };\r\n    }\r\n}\r\n//# sourceMappingURL=HubConnection.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// 0, 2, 10, 30 second delays before reconnect attempts.\r\nconst DEFAULT_RETRY_DELAYS_IN_MILLISECONDS = [0, 2000, 10000, 30000, null];\r\n/** @private */\r\nexport class DefaultReconnectPolicy {\r\n    constructor(retryDelays) {\r\n        this._retryDelays = retryDelays !== undefined ? [...retryDelays, null] : DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;\r\n    }\r\n    nextRetryDelayInMilliseconds(retryContext) {\r\n        return this._retryDelays[retryContext.previousRetryCount];\r\n    }\r\n}\r\n//# sourceMappingURL=DefaultReconnectPolicy.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nexport class HeaderNames {\r\n}\r\nHeaderNames.Authorization = \"Authorization\";\r\nHeaderNames.Cookie = \"Cookie\";\r\n//# sourceMappingURL=HeaderNames.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// This will be treated as a bit flag in the future, so we keep it using power-of-two values.\r\n/** Specifies a specific HTTP transport type. */\r\nexport var HttpTransportType;\r\n(function (HttpTransportType) {\r\n    /** Specifies no transport preference. */\r\n    HttpTransportType[HttpTransportType[\"None\"] = 0] = \"None\";\r\n    /** Specifies the WebSockets transport. */\r\n    HttpTransportType[HttpTransportType[\"WebSockets\"] = 1] = \"WebSockets\";\r\n    /** Specifies the Server-Sent Events transport. */\r\n    HttpTransportType[HttpTransportType[\"ServerSentEvents\"] = 2] = \"ServerSentEvents\";\r\n    /** Specifies the Long Polling transport. */\r\n    HttpTransportType[HttpTransportType[\"LongPolling\"] = 4] = \"LongPolling\";\r\n})(HttpTransportType || (HttpTransportType = {}));\r\n/** Specifies the transfer format for a connection. */\r\nexport var TransferFormat;\r\n(function (TransferFormat) {\r\n    /** Specifies that only text data will be transmitted over the connection. */\r\n    TransferFormat[TransferFormat[\"Text\"] = 1] = \"Text\";\r\n    /** Specifies that binary data will be transmitted over the connection. */\r\n    TransferFormat[TransferFormat[\"Binary\"] = 2] = \"Binary\";\r\n})(TransferFormat || (TransferFormat = {}));\r\n//# sourceMappingURL=ITransport.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n// Not exported from index.\r\n/** @private */\r\nexport class AbortController {\r\n    constructor() {\r\n        this._isAborted = false;\r\n        this.onabort = null;\r\n    }\r\n    abort() {\r\n        if (!this._isAborted) {\r\n            this._isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n    get signal() {\r\n        return this;\r\n    }\r\n    get aborted() {\r\n        return this._isAborted;\r\n    }\r\n}\r\n//# sourceMappingURL=AbortController.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport {\r\n    constructor(httpClient, accessTokenFactory, logger, options) {\r\n        this._httpClient = httpClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logger = logger;\r\n        this._pollAbort = new AbortController();\r\n        this._options = options;\r\n        this._running = false;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    get pollAborted() {\r\n        return this._pollAbort.aborted;\r\n    }\r\n    async connect(url, transferFormat) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._url = url;\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n        const [name, value] = getUserAgentHeader();\r\n        const headers = { [name]: value, ...this._options.headers };\r\n        const pollOptions = {\r\n            abortSignal: this._pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this._options.withCredentials,\r\n        };\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n        const token = await this._getAccessToken();\r\n        this._updateHeaderToken(pollOptions, token);\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this._httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this._running = false;\r\n        }\r\n        else {\r\n            this._running = true;\r\n        }\r\n        this._receiving = this._poll(this._url, pollOptions);\r\n    }\r\n    async _getAccessToken() {\r\n        if (this._accessTokenFactory) {\r\n            return await this._accessTokenFactory();\r\n        }\r\n        return null;\r\n    }\r\n    _updateHeaderToken(request, token) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (token) {\r\n            request.headers[HeaderNames.Authorization] = `Bearer ${token}`;\r\n            return;\r\n        }\r\n        if (request.headers[HeaderNames.Authorization]) {\r\n            delete request.headers[HeaderNames.Authorization];\r\n        }\r\n    }\r\n    async _poll(url, pollOptions) {\r\n        try {\r\n            while (this._running) {\r\n                // We have to get the access token on each poll, in case it changes\r\n                const token = await this._getAccessToken();\r\n                this._updateHeaderToken(pollOptions, token);\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this._httpClient.get(pollUrl, pollOptions);\r\n                    if (response.statusCode === 204) {\r\n                        this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n                        this._running = false;\r\n                    }\r\n                    else if (response.statusCode !== 200) {\r\n                        this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n                        // Unexpected status code\r\n                        this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this._running = false;\r\n                    }\r\n                    else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._options.logMessageContent)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        }\r\n                        else {\r\n                            // This is another way timeout manifest.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    if (!this._running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    }\r\n                    else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                        else {\r\n                            // Close the connection with the error as the result.\r\n                            this._closeError = e;\r\n                            this._running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this._raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n    async send(data) {\r\n        if (!this._running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url, this._accessTokenFactory, data, this._options);\r\n    }\r\n    async stop() {\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this._running = false;\r\n        this._pollAbort.abort();\r\n        try {\r\n            await this._receiving;\r\n            // Send DELETE to clean up long polling on the server\r\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\r\n            const headers = {};\r\n            const [name, value] = getUserAgentHeader();\r\n            headers[name] = value;\r\n            const deleteOptions = {\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            };\r\n            const token = await this._getAccessToken();\r\n            this._updateHeaderToken(deleteOptions, token);\r\n            await this._httpClient.delete(this._url, deleteOptions);\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\r\n        }\r\n        finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this._raiseOnClose();\r\n        }\r\n    }\r\n    _raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this._closeError) {\r\n                logMessage += \" Error: \" + this._closeError;\r\n            }\r\n            this._logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this._closeError);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=LongPollingTransport.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform, sendMessage } from \"./Utils\";\r\n/** @private */\r\nexport class ServerSentEventsTransport {\r\n    constructor(httpClient, accessTokenFactory, logger, options) {\r\n        this._httpClient = httpClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logger = logger;\r\n        this._options = options;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    async connect(url, transferFormat) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\");\r\n        // set url before accessTokenFactory because this.url is only for send and we set the auth header instead of the query string for send\r\n        this._url = url;\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n                return;\r\n            }\r\n            let eventSource;\r\n            if (Platform.isBrowser || Platform.isWebWorker) {\r\n                eventSource = new this._options.EventSource(url, { withCredentials: this._options.withCredentials });\r\n            }\r\n            else {\r\n                // Non-browser passes cookies via the dictionary\r\n                const cookies = this._httpClient.getCookieString(url);\r\n                const headers = {};\r\n                headers.Cookie = cookies;\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n                eventSource = new this._options.EventSource(url, { withCredentials: this._options.withCredentials, headers: { ...headers, ...this._options.headers } });\r\n            }\r\n            try {\r\n                eventSource.onmessage = (e) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this._logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this._options.logMessageContent)}.`);\r\n                            this.onreceive(e.data);\r\n                        }\r\n                        catch (error) {\r\n                            this._close(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n                // @ts-ignore: not using event on purpose\r\n                eventSource.onerror = (e) => {\r\n                    // EventSource doesn't give any useful information about server side closes.\r\n                    if (opened) {\r\n                        this._close();\r\n                    }\r\n                    else {\r\n                        reject(new Error(\"EventSource failed to connect. The connection could not be found on the server,\"\r\n                            + \" either the connection ID is not present on the server, or a proxy is refusing/buffering the connection.\"\r\n                            + \" If you have multiple servers check that sticky sessions are enabled.\"));\r\n                    }\r\n                };\r\n                eventSource.onopen = () => {\r\n                    this._logger.log(LogLevel.Information, `SSE connected to ${this._url}`);\r\n                    this._eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n    async send(data) {\r\n        if (!this._eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"SSE\", this._httpClient, this._url, this._accessTokenFactory, data, this._options);\r\n    }\r\n    stop() {\r\n        this._close();\r\n        return Promise.resolve();\r\n    }\r\n    _close(e) {\r\n        if (this._eventSource) {\r\n            this._eventSource.close();\r\n            this._eventSource = undefined;\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=ServerSentEventsTransport.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform } from \"./Utils\";\r\n/** @private */\r\nexport class WebSocketTransport {\r\n    constructor(httpClient, accessTokenFactory, logger, logMessageContent, webSocketConstructor, headers) {\r\n        this._logger = logger;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logMessageContent = logMessageContent;\r\n        this._webSocketConstructor = webSocketConstructor;\r\n        this._httpClient = httpClient;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n        this._headers = headers;\r\n    }\r\n    async connect(url, transferFormat) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            let webSocket;\r\n            const cookies = this._httpClient.getCookieString(url);\r\n            let opened = false;\r\n            if (Platform.isNode) {\r\n                const headers = {};\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n                if (cookies) {\r\n                    headers[HeaderNames.Cookie] = `${cookies}`;\r\n                }\r\n                // Only pass headers when in non-browser environments\r\n                webSocket = new this._webSocketConstructor(url, undefined, {\r\n                    headers: { ...headers, ...this._headers },\r\n                });\r\n            }\r\n            if (!webSocket) {\r\n                // Chrome is not happy with passing 'undefined' as protocol\r\n                webSocket = new this._webSocketConstructor(url);\r\n            }\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n            webSocket.onopen = (_event) => {\r\n                this._logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\r\n                this._webSocket = webSocket;\r\n                opened = true;\r\n                resolve();\r\n            };\r\n            webSocket.onerror = (event) => {\r\n                let error = null;\r\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                    error = event.error;\r\n                }\r\n                else {\r\n                    error = \"There was an error with the transport\";\r\n                }\r\n                this._logger.log(LogLevel.Information, `(WebSockets transport) ${error}.`);\r\n            };\r\n            webSocket.onmessage = (message) => {\r\n                this._logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this._logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    try {\r\n                        this.onreceive(message.data);\r\n                    }\r\n                    catch (error) {\r\n                        this._close(error);\r\n                        return;\r\n                    }\r\n                }\r\n            };\r\n            webSocket.onclose = (event) => {\r\n                // Don't call close handler if connection was never established\r\n                // We'll reject the connect call instead\r\n                if (opened) {\r\n                    this._close(event);\r\n                }\r\n                else {\r\n                    let error = null;\r\n                    // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                    if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                        error = event.error;\r\n                    }\r\n                    else {\r\n                        error = \"WebSocket failed to connect. The connection could not be found on the server,\"\r\n                            + \" either the endpoint may not be a SignalR endpoint,\"\r\n                            + \" the connection ID is not present on the server, or there is a proxy blocking WebSockets.\"\r\n                            + \" If you have multiple servers check that sticky sessions are enabled.\";\r\n                    }\r\n                    reject(new Error(error));\r\n                }\r\n            };\r\n        });\r\n    }\r\n    send(data) {\r\n        if (this._webSocket && this._webSocket.readyState === this._webSocketConstructor.OPEN) {\r\n            this._logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this._logMessageContent)}.`);\r\n            this._webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n    stop() {\r\n        if (this._webSocket) {\r\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\r\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\r\n            this._close(undefined);\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _close(event) {\r\n        // webSocket will be null if the transport did not start successfully\r\n        if (this._webSocket) {\r\n            // Clear websocket handlers because we are considering the socket closed now\r\n            this._webSocket.onclose = () => { };\r\n            this._webSocket.onmessage = () => { };\r\n            this._webSocket.onerror = () => { };\r\n            this._webSocket.close();\r\n            this._webSocket = undefined;\r\n        }\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n        if (this.onclose) {\r\n            if (this._isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {\r\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason || \"no reason given\"}).`));\r\n            }\r\n            else if (event instanceof Error) {\r\n                this.onclose(event);\r\n            }\r\n            else {\r\n                this.onclose();\r\n            }\r\n        }\r\n    }\r\n    _isCloseEvent(event) {\r\n        return event && typeof event.wasClean === \"boolean\" && typeof event.code === \"number\";\r\n    }\r\n}\r\n//# sourceMappingURL=WebSocketTransport.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { AggregateErrors, DisabledTransportError, FailedToNegotiateWithServerError, FailedToStartTransportError, HttpError, UnsupportedTransportError } from \"./Errors\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\nconst MAX_REDIRECTS = 100;\r\n/** @private */\r\nexport class HttpConnection {\r\n    constructor(url, options = {}) {\r\n        this._stopPromiseResolver = () => { };\r\n        this.features = {};\r\n        this._negotiateVersion = 1;\r\n        Arg.isRequired(url, \"url\");\r\n        this._logger = createLogger(options.logger);\r\n        this.baseUrl = this._resolveUrl(url);\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\r\n        if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\r\n            options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\r\n        }\r\n        else {\r\n            throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\r\n        }\r\n        options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\r\n        let webSocketModule = null;\r\n        let eventSourceModule = null;\r\n        if (Platform.isNode && typeof require !== \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            webSocketModule = requireFunc(\"ws\");\r\n            eventSourceModule = requireFunc(\"eventsource\");\r\n        }\r\n        if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        }\r\n        else if (Platform.isNode && !options.WebSocket) {\r\n            if (webSocketModule) {\r\n                options.WebSocket = webSocketModule;\r\n            }\r\n        }\r\n        if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        }\r\n        else if (Platform.isNode && !options.EventSource) {\r\n            if (typeof eventSourceModule !== \"undefined\") {\r\n                options.EventSource = eventSourceModule;\r\n            }\r\n        }\r\n        this._httpClient = options.httpClient || new DefaultHttpClient(this._logger);\r\n        this._connectionState = \"Disconnected\" /* Disconnected */;\r\n        this._connectionStarted = false;\r\n        this._options = options;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    async start(transferFormat) {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n        if (this._connectionState !== \"Disconnected\" /* Disconnected */) {\r\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n        this._connectionState = \"Connecting\" /* Connecting */;\r\n        this._startInternalPromise = this._startInternal(transferFormat);\r\n        await this._startInternalPromise;\r\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\r\n        if (this._connectionState === \"Disconnecting\" /* Disconnecting */) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\r\n            await this._stopPromise;\r\n            return Promise.reject(new Error(message));\r\n        }\r\n        else if (this._connectionState !== \"Connected\" /* Connected */) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            return Promise.reject(new Error(message));\r\n        }\r\n        this._connectionStarted = true;\r\n    }\r\n    send(data) {\r\n        if (this._connectionState !== \"Connected\" /* Connected */) {\r\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\r\n        }\r\n        if (!this._sendQueue) {\r\n            this._sendQueue = new TransportSendQueue(this.transport);\r\n        }\r\n        // Transport will not be null if state is connected\r\n        return this._sendQueue.send(data);\r\n    }\r\n    async stop(error) {\r\n        if (this._connectionState === \"Disconnected\" /* Disconnected */) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n        if (this._connectionState === \"Disconnecting\" /* Disconnecting */) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n        this._connectionState = \"Disconnecting\" /* Disconnecting */;\r\n        this._stopPromise = new Promise((resolve) => {\r\n            // Don't complete stop() until stopConnection() completes.\r\n            this._stopPromiseResolver = resolve;\r\n        });\r\n        // stopInternal should never throw so just observe it.\r\n        await this._stopInternal(error);\r\n        await this._stopPromise;\r\n    }\r\n    async _stopInternal(error) {\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this._stopError = error;\r\n        try {\r\n            await this._startInternalPromise;\r\n        }\r\n        catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\r\n        // stop was called during start() and start() failed.\r\n        if (this.transport) {\r\n            try {\r\n                await this.transport.stop();\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\r\n                this._stopConnection();\r\n            }\r\n            this.transport = undefined;\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\r\n        }\r\n    }\r\n    async _startInternal(transferFormat) {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this._accessTokenFactory = this._options.accessTokenFactory;\r\n        try {\r\n            if (this._options.skipNegotiation) {\r\n                if (this._options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this._constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this._startTransport(url, transferFormat);\r\n                }\r\n                else {\r\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            }\r\n            else {\r\n                let negotiateResponse = null;\r\n                let redirects = 0;\r\n                do {\r\n                    negotiateResponse = await this._getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this._connectionState === \"Disconnecting\" /* Disconnecting */ || this._connectionState === \"Disconnected\" /* Disconnected */) {\r\n                        throw new Error(\"The connection was stopped during negotiation.\");\r\n                    }\r\n                    if (negotiateResponse.error) {\r\n                        throw new Error(negotiateResponse.error);\r\n                    }\r\n                    if (negotiateResponse.ProtocolVersion) {\r\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this._accessTokenFactory = () => accessToken;\r\n                    }\r\n                    redirects++;\r\n                } while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n                await this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\r\n            }\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n            if (this._connectionState === \"Connecting\" /* Connecting */) {\r\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\r\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\r\n                this._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\r\n                this._connectionState = \"Connected\" /* Connected */;\r\n            }\r\n            // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\r\n            // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\r\n            // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\r\n        }\r\n        catch (e) {\r\n            this._logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this._connectionState = \"Disconnected\" /* Disconnected */;\r\n            this.transport = undefined;\r\n            // if start fails, any active calls to stop assume that start will complete the stop promise\r\n            this._stopPromiseResolver();\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    async _getNegotiationResponse(url) {\r\n        const headers = {};\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                headers[HeaderNames.Authorization] = `Bearer ${token}`;\r\n            }\r\n        }\r\n        const [name, value] = getUserAgentHeader();\r\n        headers[name] = value;\r\n        const negotiateUrl = this._resolveNegotiateUrl(url);\r\n        this._logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this._httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            });\r\n            if (response.statusCode !== 200) {\r\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\r\n            }\r\n            const negotiateResponse = JSON.parse(response.content);\r\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\r\n                // Negotiate version 0 doesn't use connectionToken\r\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\r\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\r\n            }\r\n            return negotiateResponse;\r\n        }\r\n        catch (e) {\r\n            let errorMessage = \"Failed to complete negotiation with the server: \" + e;\r\n            if (e instanceof HttpError) {\r\n                if (e.statusCode === 404) {\r\n                    errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\r\n                }\r\n            }\r\n            this._logger.log(LogLevel.Error, errorMessage);\r\n            return Promise.reject(new FailedToNegotiateWithServerError(errorMessage));\r\n        }\r\n    }\r\n    _createConnectUrl(url, connectionToken) {\r\n        if (!connectionToken) {\r\n            return url;\r\n        }\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\r\n    }\r\n    async _createTransport(url, requestedTransport, negotiateResponse, requestedTransferFormat) {\r\n        let connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\r\n        if (this._isITransport(requestedTransport)) {\r\n            this._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this._startTransport(connectUrl, requestedTransferFormat);\r\n            this.connectionId = negotiateResponse.connectionId;\r\n            return;\r\n        }\r\n        const transportExceptions = [];\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        let negotiate = negotiateResponse;\r\n        for (const endpoint of transports) {\r\n            const transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat);\r\n            if (transportOrError instanceof Error) {\r\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\r\n                transportExceptions.push(`${endpoint.transport} failed:`);\r\n                transportExceptions.push(transportOrError);\r\n            }\r\n            else if (this._isITransport(transportOrError)) {\r\n                this.transport = transportOrError;\r\n                if (!negotiate) {\r\n                    try {\r\n                        negotiate = await this._getNegotiationResponse(url);\r\n                    }\r\n                    catch (ex) {\r\n                        return Promise.reject(ex);\r\n                    }\r\n                    connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\r\n                }\r\n                try {\r\n                    await this._startTransport(connectUrl, requestedTransferFormat);\r\n                    this.connectionId = negotiate.connectionId;\r\n                    return;\r\n                }\r\n                catch (ex) {\r\n                    this._logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\r\n                    negotiate = undefined;\r\n                    transportExceptions.push(new FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, HttpTransportType[endpoint.transport]));\r\n                    if (this._connectionState !== \"Connecting\" /* Connecting */) {\r\n                        const message = \"Failed to select transport before stop() was called.\";\r\n                        this._logger.log(LogLevel.Debug, message);\r\n                        return Promise.reject(new Error(message));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (transportExceptions.length > 0) {\r\n            return Promise.reject(new AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\r\n        }\r\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\r\n    }\r\n    _constructTransport(transport) {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this._options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent, this._options.WebSocket, this._options.headers || {});\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this._options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options);\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n    _startTransport(url, transferFormat) {\r\n        this.transport.onreceive = this.onreceive;\r\n        this.transport.onclose = (e) => this._stopConnection(e);\r\n        return this.transport.connect(url, transferFormat);\r\n    }\r\n    _resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat) {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this._logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        }\r\n        else {\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this._options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this._options.EventSource)) {\r\n                        this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                        return new UnsupportedTransportError(`'${HttpTransportType[transport]}' is not supported in your environment.`, transport);\r\n                    }\r\n                    else {\r\n                        this._logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        try {\r\n                            return this._constructTransport(transport);\r\n                        }\r\n                        catch (ex) {\r\n                            return ex;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                    return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\r\n                }\r\n            }\r\n            else {\r\n                this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n                return new DisabledTransportError(`'${HttpTransportType[transport]}' is disabled by the client.`, transport);\r\n            }\r\n        }\r\n    }\r\n    _isITransport(transport) {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n    _stopConnection(error) {\r\n        this._logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\r\n        this.transport = undefined;\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this._stopError || error;\r\n        this._stopError = undefined;\r\n        if (this._connectionState === \"Disconnected\" /* Disconnected */) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\r\n            return;\r\n        }\r\n        if (this._connectionState === \"Connecting\" /* Connecting */) {\r\n            this._logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\r\n            throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\r\n        }\r\n        if (this._connectionState === \"Disconnecting\" /* Disconnecting */) {\r\n            // A call to stop() induced this call to stopConnection and needs to be completed.\r\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\r\n            this._stopPromiseResolver();\r\n        }\r\n        if (error) {\r\n            this._logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n        if (this._sendQueue) {\r\n            this._sendQueue.stop().catch((e) => {\r\n                this._logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\r\n            });\r\n            this._sendQueue = undefined;\r\n        }\r\n        this.connectionId = undefined;\r\n        this._connectionState = \"Disconnected\" /* Disconnected */;\r\n        if (this._connectionStarted) {\r\n            this._connectionStarted = false;\r\n            try {\r\n                if (this.onclose) {\r\n                    this.onclose(error);\r\n                }\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n    _resolveUrl(url) {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n        if (!Platform.isBrowser || !window.document) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n        this._logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n    _resolveNegotiateUrl(url) {\r\n        const index = url.indexOf(\"?\");\r\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\r\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\r\n            negotiateUrl += \"/\";\r\n        }\r\n        negotiateUrl += \"negotiate\";\r\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\r\n        if (negotiateUrl.indexOf(\"negotiateVersion\") === -1) {\r\n            negotiateUrl += index === -1 ? \"?\" : \"&\";\r\n            negotiateUrl += \"negotiateVersion=\" + this._negotiateVersion;\r\n        }\r\n        return negotiateUrl;\r\n    }\r\n}\r\nfunction transportMatches(requestedTransport, actualTransport) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n/** @private */\r\nexport class TransportSendQueue {\r\n    constructor(_transport) {\r\n        this._transport = _transport;\r\n        this._buffer = [];\r\n        this._executing = true;\r\n        this._sendBufferedData = new PromiseSource();\r\n        this._transportResult = new PromiseSource();\r\n        this._sendLoopPromise = this._sendLoop();\r\n    }\r\n    send(data) {\r\n        this._bufferData(data);\r\n        if (!this._transportResult) {\r\n            this._transportResult = new PromiseSource();\r\n        }\r\n        return this._transportResult.promise;\r\n    }\r\n    stop() {\r\n        this._executing = false;\r\n        this._sendBufferedData.resolve();\r\n        return this._sendLoopPromise;\r\n    }\r\n    _bufferData(data) {\r\n        if (this._buffer.length && typeof (this._buffer[0]) !== typeof (data)) {\r\n            throw new Error(`Expected data to be of type ${typeof (this._buffer)} but was of type ${typeof (data)}`);\r\n        }\r\n        this._buffer.push(data);\r\n        this._sendBufferedData.resolve();\r\n    }\r\n    async _sendLoop() {\r\n        while (true) {\r\n            await this._sendBufferedData.promise;\r\n            if (!this._executing) {\r\n                if (this._transportResult) {\r\n                    this._transportResult.reject(\"Connection stopped.\");\r\n                }\r\n                break;\r\n            }\r\n            this._sendBufferedData = new PromiseSource();\r\n            const transportResult = this._transportResult;\r\n            this._transportResult = undefined;\r\n            const data = typeof (this._buffer[0]) === \"string\" ?\r\n                this._buffer.join(\"\") :\r\n                TransportSendQueue._concatBuffers(this._buffer);\r\n            this._buffer.length = 0;\r\n            try {\r\n                await this._transport.send(data);\r\n                transportResult.resolve();\r\n            }\r\n            catch (error) {\r\n                transportResult.reject(error);\r\n            }\r\n        }\r\n    }\r\n    static _concatBuffers(arrayBuffers) {\r\n        const totalLength = arrayBuffers.map((b) => b.byteLength).reduce((a, b) => a + b);\r\n        const result = new Uint8Array(totalLength);\r\n        let offset = 0;\r\n        for (const item of arrayBuffers) {\r\n            result.set(new Uint8Array(item), offset);\r\n            offset += item.byteLength;\r\n        }\r\n        return result.buffer;\r\n    }\r\n}\r\nclass PromiseSource {\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\r\n    }\r\n    resolve() {\r\n        this._resolver();\r\n    }\r\n    reject(reason) {\r\n        this._rejecter(reason);\r\n    }\r\n}\r\n//# sourceMappingURL=HttpConnection.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { MessageType } from \"./IHubProtocol\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nconst JSON_HUB_PROTOCOL_NAME = \"json\";\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol {\r\n    constructor() {\r\n        /** @inheritDoc */\r\n        this.name = JSON_HUB_PROTOCOL_NAME;\r\n        /** @inheritDoc */\r\n        this.version = 1;\r\n        /** @inheritDoc */\r\n        this.transferFormat = TransferFormat.Text;\r\n    }\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    parseMessages(input, logger) {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n        if (!input) {\r\n            return [];\r\n        }\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message);\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this._isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this._isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this._isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n        return hubMessages;\r\n    }\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    writeMessage(message) {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n    _isInvocationMessage(message) {\r\n        this._assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n        if (message.invocationId !== undefined) {\r\n            this._assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n    _isStreamItemMessage(message) {\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n    _isCompletionMessage(message) {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n        if (!message.result && message.error) {\r\n            this._assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n    _assertNotEmptyString(value, errorMessage) {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=JsonHubProtocol.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\nconst LogLevelNameMapping = {\r\n    trace: LogLevel.Trace,\r\n    debug: LogLevel.Debug,\r\n    info: LogLevel.Information,\r\n    information: LogLevel.Information,\r\n    warn: LogLevel.Warning,\r\n    warning: LogLevel.Warning,\r\n    error: LogLevel.Error,\r\n    critical: LogLevel.Critical,\r\n    none: LogLevel.None,\r\n};\r\nfunction parseLogLevel(name) {\r\n    // Case-insensitive matching via lower-casing\r\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\r\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\r\n    const mapping = LogLevelNameMapping[name.toLowerCase()];\r\n    if (typeof mapping !== \"undefined\") {\r\n        return mapping;\r\n    }\r\n    else {\r\n        throw new Error(`Unknown log level: ${name}`);\r\n    }\r\n}\r\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    configureLogging(logging) {\r\n        Arg.isRequired(logging, \"logging\");\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        }\r\n        else if (typeof logging === \"string\") {\r\n            const logLevel = parseLogLevel(logging);\r\n            this.logger = new ConsoleLogger(logLevel);\r\n        }\r\n        else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n        return this;\r\n    }\r\n    withUrl(url, transportTypeOrOptions) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isNotEmpty(url, \"url\");\r\n        this.url = url;\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = { ...this.httpConnectionOptions, ...transportTypeOrOptions };\r\n        }\r\n        else {\r\n            this.httpConnectionOptions = {\r\n                ...this.httpConnectionOptions,\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n        return this;\r\n    }\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    withHubProtocol(protocol) {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n    withAutomaticReconnect(retryDelaysOrReconnectPolicy) {\r\n        if (this.reconnectPolicy) {\r\n            throw new Error(\"A reconnectPolicy has already been set.\");\r\n        }\r\n        if (!retryDelaysOrReconnectPolicy) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy();\r\n        }\r\n        else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\r\n        }\r\n        else {\r\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\r\n        }\r\n        return this;\r\n    }\r\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\r\n    build() {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n        return HubConnection.create(connection, this.logger || NullLogger.instance, this.protocol || new JsonHubProtocol(), this.reconnectPolicy);\r\n    }\r\n}\r\nfunction isLogger(logger) {\r\n    return logger.log !== undefined;\r\n}\r\n//# sourceMappingURL=HubConnectionBuilder.js.map","// import * as signalR from \"@microsoft/signalr\";\r\n//   let hubConnection = new signalR.HubConnectionBuilder()\r\n//             .withUrl(\"https://localhost:44300/game\")\r\n//             .build();\r\n// \t\t\tconsole.log(hubConnection);\r\n\r\n//             hubConnection.on(\"FilledRoom\", function (data) {\r\n//                 console.log(\"fiiled room\");\r\n//                 isRoomFull = true;\r\n//                 setTimeout(() => {\r\n//                    isRoomFull = false;\r\n//                 }, 2000);\r\n//            });\r\n//            hubConnection.on(\"GoInRoom\", function (data) {\r\n//                 console.log(\"GoInRoom\");\r\n//                 navigateTo('lobby');\r\n//            });\r\n//            hubConnection.on(\"NotFoundRoom\", function (data) {\r\n//                 console.log(\"NotFoundRoom\");\r\n//                 isCodeWrong = true;\r\n//                 setTimeout(() => {\r\n//                    isCodeWrong = false;\r\n//                 }, 2000);\r\n                \r\n//            });\r\nimport * as signalR from \"@microsoft/signalr\"\r\nimport { writable } from \"svelte/store\";\r\n\r\nexport const roomCode = writable('nula');\r\nexport const HUB = writable('nula');","<script>\r\n    import ConnectedUser from \"./ConnectedUser.svelte\";\r\n    import { onMount } from 'svelte';\r\n    import {roomCode, HUB} from './signalr';\r\n    import * as signalR from \"@microsoft/signalr\";\r\n    // let hubConnection = new signalR.HubConnectionBuilder()\r\n    //         .withUrl(\"https://localhost:44300/game\")\r\n    //         .build();\r\n\t// \t\tconsole.log(\"lobby\");\r\n    onMount(() => gpir())\r\n    let playersInRoom=[];\r\n    $HUB.on(\"roomPlayers\", function (data) {\r\n         console.log(\"refreshRoomData\");\r\n         playersInRoom = data;\r\n         console.log(data[0]);\r\n         \r\n    });\r\n    console.log('constructor '+$roomCode);\r\n    let nick ='';\r\n\r\n\r\n    function gpir(){\r\n        console.log('getPlayersInRoommount '+$roomCode);\r\n\t\t$HUB.invoke('getPlayersInRoom', $roomCode);\r\n    }\r\n    function changeNick(){\r\n        console.log('changenick '+$roomCode);\r\n\t\t$HUB.invoke('changeNick',  $roomCode, nick);\r\n    }\r\n</script>\r\n\r\n<main>\r\n    <div id=\"lobby\">\r\n        <div id=\"col1\">\r\n            {#each playersInRoom as item }\r\n            <ConnectedUser nick={item.nick}/>\r\n            {/each}\r\n        </div>\r\n        <div id=\"col2\">\r\n            <h3>{$roomCode}</h3>\r\n            <p>LOBBY CODE</p>\r\n            <input type=\"text\" placeholder=\"Enter nick\" bind:value={nick} id=\"input-code\" />\r\n            <input\r\n                type=\"button\"\r\n                id=\"input-create\"\r\n                value=\"Ready\"\r\n               on:click={changeNick}\r\n            />\r\n        </div>\r\n    </div>\r\n</main>\r\n\r\n<style>\r\n    main {\r\n        height: 100%;\r\n        width: 100%;\r\n        margin: 0%;\r\n        background-color: #2c2f33;\r\n        position: fixed;\r\n    }\r\n    #lobby {\r\n        margin-left: 50%;\r\n        transform: translateX(-50%);\r\n        margin-top: 10em;\r\n        width: 30em;\r\n        height: 22em;\r\n        background-color: #23272a;\r\n        border-radius: 10px;\r\n    }\r\n    #col1 {\r\n        width: 45%;\r\n        border-right:1px solid grey;\r\n        height: 100%;\r\n        position: relative;\r\n    }\r\n    #col2 {\r\n        width: 54%;\r\n        height: 99%;\r\n        transform: translateY(-100%);\r\n        display: inline-block;\r\n        margin-left: 45%;\r\n    }\r\n    h3 {\r\n        margin-left: 50%;\r\n        padding: 0.5em;\r\n        border-radius: 10px;\r\n        transform: translateX(-50%);\r\n        width: max-content;\r\n        border: white 2px dashed;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 500;\r\n        font-size: 1.5em;\r\n        line-height: 28px;\r\n        color: white;\r\n    }\r\n    #input-code {\r\n        width: 50%;\r\n        margin-top: 5em;\r\n        margin-left: 50%;\r\n        transform: translateX(-50%);\r\n        height: 10%;\r\n        background: #40454b;\r\n        border-radius: 10px;\r\n        color: white;\r\n        border: none;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: normal;\r\n    }\r\n    #input-code:focus {\r\n        outline: none;\r\n    }\r\n    #input-create {\r\n        width: 45%;\r\n        height: 12%;\r\n        margin-left: 50%;\r\n        transform: translateX(-50%);\r\n        margin-top: 1em;\r\n        background: rgb(34, 214, 28);\r\n        border-radius: 10px;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: normal;\r\n        font-size: 1em;\r\n        color: white;\r\n        border: none;\r\n    }\r\n\r\n    p{\r\n        margin-left: 50%;\r\n        transform: translateX(-50%);\r\n        width: max-content;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 400;\r\n        font-size: 1.2em;\r\n        line-height: 8px;\r\n        color: white; \r\n    }\r\n    #input-create:hover {\r\n        background: green;\r\n        cursor: pointer;\r\n    }\r\n    #input-create:active {\r\n        background: rgb(3, 75, 3);\r\n    }\r\n</style>\r\n","<script>\r\n    import { navigateTo } from \"svelte-router-spa\";\r\n    import * as signalR from \"@microsoft/signalr\";\r\n    import {roomCode, HUB} from './signalr';\r\n    let codeConnection;\r\n    let isCodeWrong = false;\r\n    let isRoomFull = false;\r\n    let hubConnection = new signalR.HubConnectionBuilder()\r\n        .withUrl(\"/game\", {\r\n      skipNegotiation: true,\r\n      transport: signalR.HttpTransportType.WebSockets\r\n    })\r\n        .build();\r\n    HUB.set(hubConnection);\r\n    console.log($HUB);\r\n   // localStorage.clear();\r\n   $HUB.on(\"FilledRoom\", function (data) {\r\n        console.log(\"fiiled room\");\r\n        isRoomFull = true;\r\n        setTimeout(() => {\r\n            isRoomFull = false;\r\n        }, 2000);\r\n    });\r\n    $HUB.on(\"GoInRoom\", function (data) {\r\n        console.log(\"GoInRoom\");\r\n        roomCode.set(codeConnection);\r\n        navigateTo(\"lobby\");\r\n        console.log('goinroom '+codeConnection);\r\n    });\r\n    $HUB.on(\"NotFoundRoom\", function (data) {\r\n        console.log(\"NotFoundRoom\");\r\n        isCodeWrong = true;\r\n        setTimeout(() => {\r\n            isCodeWrong = false;\r\n        }, 2000);\r\n    });\r\n\r\n    function createRoom() {\r\n        var xmlHttp = new XMLHttpRequest()\r\n        xmlHttp.open(\"GET\", \"https://localhost:44300/Main/bon\", false); // false for synchronous request\r\n        xmlHttp.send(null);\r\n        console.log(xmlHttp.responseText + 'roomrespone');\r\n        roomCode.set(xmlHttp.responseText);\r\n        console.log('setted '+$roomCode);\r\n        codeConnection = $roomCode;\r\n        $HUB.invoke(\"roomConnection\", xmlHttp.responseText);\r\n    }\r\n\r\n    function connect() {\r\n        console.log(\"sended\");\r\n        $HUB.invoke(\"roomConnection\", codeConnection);\r\n    }\r\n    $HUB.start();\r\n</script>\r\n\r\n<main>\r\n    <h1>TERVOB</h1>\r\n    <div id=\"box\">\r\n        <div class=\"connect\">\r\n            <p>Start game</p>\r\n            {#if isCodeWrong}\r\n                <i id=\"wrong\">Wrong code!</i>\r\n            {/if}\r\n            {#if isRoomFull}\r\n                <i id=\"wrong\">Room is full!</i>\r\n            {/if}\r\n            <input type=\"text\" id=\"input-code\" bind:value={codeConnection} />\r\n            <input\r\n                type=\"button\"\r\n                id=\"input-connect\"\r\n                value=\"Connect\"\r\n                on:click={connect}\r\n            />\r\n        </div>\r\n        <hr />\r\n        <div class=\"connect\">\r\n            <p>or</p>\r\n            <input type=\"button\" id=\"input-create\" value=\"Create room\" on:click={createRoom}/>\r\n            <input type=\"button\" id=\"input-instruction\" value=\"Instruction\" />\r\n            <select id=\"input-select\">\r\n                <option value=\"value1\">en</option>\r\n                <option value=\"value2\" selected>sk</option>\r\n                <option value=\"value3\">ru</option>\r\n            </select>\r\n        </div>\r\n        <div id=\"other\">\r\n            <a href=\"#\">Support author</a>\r\n            <i>Copyright 2022</i>\r\n        </div>\r\n    </div>\r\n</main>\r\n\r\n<style>\r\n    main {\r\n        height: 100%;\r\n        width: 100%;\r\n        margin: 0%;\r\n        background-color: #2c2f33;\r\n        position: fixed;\r\n    }\r\n    #wrong {\r\n        color: red;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 300;\r\n        font-size: 1em;\r\n        line-height: 48px;\r\n    }\r\n    h1 {\r\n        color: white;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 900;\r\n        font-size: 3em;\r\n        line-height: 48px;\r\n        text-align: center;\r\n        margin-top: 5%;\r\n    }\r\n    #other {\r\n        margin-top: 35%;\r\n    }\r\n    i {\r\n        display: block;\r\n    }\r\n    hr {\r\n        border: 1px solid #2c2f33;\r\n    }\r\n    #box {\r\n        width: 26.5em;\r\n        height: 30em;\r\n        text-align: center;\r\n        margin-left: 50%;\r\n        transform: translateX(-50%);\r\n        background: #23272a;\r\n        border-radius: 10px;\r\n        margin-top: 2em;\r\n    }\r\n    .connect {\r\n        padding-top: 10%;\r\n        padding-bottom: 5%;\r\n    }\r\n    #input-code {\r\n        width: 30%;\r\n        height: 10%;\r\n        background: #40454b;\r\n        border-radius: 10px;\r\n        color: white;\r\n        border: none;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: normal;\r\n    }\r\n    #input-code:focus {\r\n        outline: none;\r\n    }\r\n    #input-connect {\r\n        width: 25%;\r\n        height: 15%;\r\n        background: #ed4245;\r\n        border-radius: 10px;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: normal;\r\n        font-size: 1em;\r\n        margin-left: 5%;\r\n        color: white;\r\n        border: none;\r\n    }\r\n    #input-connect:hover {\r\n        background: rgb(192, 28, 31);\r\n        cursor: pointer;\r\n    }\r\n    #input-connect:active {\r\n        background: rgb(124, 2, 4);\r\n    }\r\n    #input-create {\r\n        width: 25%;\r\n        height: 10%;\r\n        background: #2686fb;\r\n        border-radius: 10px;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: normal;\r\n        font-size: 1em;\r\n        color: white;\r\n        border: none;\r\n    }\r\n    #input-create:hover {\r\n        background: #1064ca;\r\n        cursor: pointer;\r\n    }\r\n    #input-create:active {\r\n        background: #033470;\r\n    }\r\n    #input-instruction {\r\n        width: 25%;\r\n        height: 10%;\r\n        background: #40454b;\r\n        border-radius: 10px;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: normal;\r\n        font-size: 1em;\r\n        margin-left: 5%;\r\n        color: white;\r\n        border: none;\r\n    }\r\n    #input-instruction:hover {\r\n        background: #3a3d41;\r\n        cursor: pointer;\r\n    }\r\n    #input-instruction:active {\r\n        background: rgb(40, 41, 43);\r\n    }\r\n    p {\r\n        margin-top: -10%;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 500;\r\n        font-size: 1.5em;\r\n        line-height: 48px;\r\n        color: #717981;\r\n    }\r\n    #input-select {\r\n        width: 20%;\r\n        height: 10%;\r\n        background: #40454b;\r\n        border-radius: 10px;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: normal;\r\n        font-size: 1em;\r\n        margin-left: 5%;\r\n        color: white;\r\n        border: none;\r\n    }\r\n    #input-select:hover {\r\n        background: #3a3d41;\r\n        cursor: pointer;\r\n    }\r\n    #input-select:active {\r\n        background: rgb(40, 41, 43);\r\n    }\r\n    #input-select:focus {\r\n        outline: none;\r\n    }\r\n    option {\r\n        border: none;\r\n        outline: none;\r\n    }\r\n</style>\r\n","<script>\n    import Card from \"./Card.svelte\";\n    import Player from \"./Player.svelte\";\n\timport Chat from \"./Chat.svelte\";\n\timport Timer from \"./Timer.svelte\";\n\timport Info from \"./Info.svelte\";\n\timport { Router } from 'svelte-router-spa'\n    import Lobby from \"./Lobby.svelte\";\n\timport Index from \"./Index.svelte\";\n\tconst routes = [\n  {\n    name: '/',\n    component: Index,\n  },\n  {\n    name: '/lobby',\n    component: Lobby,\n  }\n  ];\n</script>\n\n<main>\n\t<Router {routes} />\n\t\n</main>\n\n","import App from './App.svelte';\nimport Play from './Play.svelte';\nimport Index from './Index.svelte';\nimport Lobby from './Lobby.svelte';\nconst app = new App({\n\ttarget: document.body\n});\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","current_component","set_current_component","onMount","Error","get_current_component","on_mount","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","seen_callbacks","Set","flushidx","flush","saved_component","length","update","pop","i","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","d","create_component","mount_component","customElement","m","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","type","index","indexOf","splice","$set","$$props","obj","$$set","keys","subscriber_queue","writable","start","stop","subscribers","set","new_value","run_queue","subscriber","invalidate","size","activeRoute","remove","UrlParser","urlString","namedUrl","urlBase","URL","namedParamsWithIndex","getPathNames","reduce","validParams","param","slice","pathNames","pathname","pathName","trim","split","freeze","hash","host","hostname","namedParams","allPathName","values","paramKey","namedParamsKeys","namedParamsValues","port","protocol","search","queryParams","params","searchParams","key","queryParamsKeys","_value","queryParamsValues","anyEmptyNestedRoutes","routeObject","result","childRoute","compareRoutes","routeName","removeSlash","includes","startsWith","findLocalisedRoute","route","language","exists","lang","entries","nameToPath","toLowerCase","position","replace","routeNameLocalised","RouterCurrent","trackPage","trackPageview","pushActiveRoute","newRoute","updateBrowserHistory","window","pathAndSearch","currentRoute","path","join","pathWithQueryParams","history","pushState","page","gaTracking","newPage","ga","active","isActive","queryPath","includePath","activeRoutePath","setActive","RouterRedirect","currentPath","guard","onlyIf","guardInfo","valid","redirect","redirectPath","destinationUrl","RouterGuard","redirectTo","RouterPath","basePath","basePathName","convert","currentLanguage","updatedPathRoute","routePathLanguage","localisedPathName","localisedRouteWithoutNamedParams","basePathNameWithoutNamedParams","basePathSameAsLocalised","updatedPath","basePathResult","localisedRoute","routeNames","shift","currentPathName","updateRoutePath","namedPath","localisedPath","routeLanguage","routePath","routePathValue","basePathNames","names","removeExtraPaths","getNamedParams","RouterFinder","routes","currentUrl","routerOptions","defaultLanguage","sitePrefix","prefix","urlParser","replacePattern","endsWith","noPrefixUrl","parseCurrentUrl","routeNamedParams","staticParamMatch","searchActiveRoutes","routerPath","startsWithNamedParam","matchRoute","routerRoute","routeInfo","parsedParams","get","layout","RouterRoute","setCurrentRoute","nestedRoutes","nestedRoutesAndNoPath","indexRoute","routeNotFound","customLanguage","custom404Page","find","findActiveRoute","searchActiveRoute","NotFoundPage","routerCurrent","userDefinedRoutes","SpaRouter","location","href","gaPageviews","langConvertTo","setActiveRoute","navigateTo","navigateNow","localName","metaKey","ctrlKey","shiftKey","targetHostNameInternal","prefixMatchPath","preventDefault","open","onpopstate","_event","navigatePathname","nick","HttpError","constructor","errorMessage","statusCode","trueProto","prototype","super","__proto__","TimeoutError","AbortError","UnsupportedTransportError","message","transport","errorType","DisabledTransportError","FailedToStartTransportError","FailedToNegotiateWithServerError","AggregateErrors","innerErrors","HttpResponse","statusText","content","HttpClient","url","send","method","post","getCookieString","LogLevel","NullLogger","log","_logLevel","_message","Arg","static","val","match","Platform","isBrowser","isWebWorker","self","isNode","getDataDetail","includeContent","detail","isArrayBuffer","byteLength","view","Uint8Array","str","num","toString","substr","formatArrayBuffer","ArrayBuffer","async","sendMessage","logger","transportName","httpClient","accessTokenFactory","headers","token","Authorization","getUserAgentHeader","Trace","logMessageContent","responseType","response","timeout","withCredentials","SubjectSubscription","subject","observer","_subject","_observer","dispose","observers","cancelCallback","catch","_","ConsoleLogger","minimumLogLevel","_minLevel","out","console","logLevel","msg","Date","toISOString","Critical","error","Warning","warn","Information","info","userAgentHeaderName","constructUserAgent","getOsName","getRuntime","getRuntimeVersion","version","os","runtime","runtimeVersion","userAgent","majorAndMinor","process","platform","versions","getErrorString","e","stack","FetchHttpClient","_logger","fetch","requireFunc","__webpack_require__","__non_webpack_require__","require","_jar","CookieJar","_fetchType","bind","globalThis","global","getGlobalThis","AbortController","_abortControllerType","request","abortSignal","aborted","abortController","onabort","abort","timeoutId","msTimeout","setTimeout","body","cache","credentials","mode","signal","clearTimeout","ok","deserializeContent","status","payload","cookies","getCookies","arrayBuffer","XhrHttpClient","reject","xhr","XMLHttpRequest","undefined","setRequestHeader","header","onload","responseText","onerror","ontimeout","DefaultHttpClient","_httpClient","TextMessageFormat","output","RecordSeparator","messages","RecordSeparatorCode","String","fromCharCode","HandshakeProtocol","writeHandshakeRequest","handshakeRequest","write","JSON","stringify","parseHandshakeResponse","messageData","remainingData","binaryData","separatorIndex","responseLength","apply","call","buffer","textData","substring","parse","MessageType","Subject","next","item","err","complete","HubConnectionState","HubConnection","connection","reconnectPolicy","_nextKeepAlive","_freezeEventListener","isRequired","serverTimeoutInMilliseconds","keepAliveIntervalInMilliseconds","_protocol","_reconnectPolicy","_handshakeProtocol","onreceive","_processIncomingData","onclose","_connectionClosed","_callbacks","_methods","_closedCallbacks","_reconnectingCallbacks","_reconnectedCallbacks","_invocationId","_receivedHandshakeResponse","_connectionState","Disconnected","_connectionStarted","_cachedPingMessage","writeMessage","Ping","state","connectionId","baseUrl","Reconnecting","_startPromise","_startWithStateTransitions","Connecting","Debug","_startInternal","Connected","_stopDuringStartError","handshakePromise","_handshakeResolver","_handshakeRejecter","transferFormat","_sendMessage","_cleanupTimeout","_resetTimeoutPeriod","_resetKeepAliveInterval","_cleanupPingTimer","startPromise","_stopPromise","_stopInternal","Disconnecting","_reconnectDelayHandle","_completeClose","stream","methodName","args","streams","streamIds","_replaceStreamingParams","invocationDescriptor","_createStreamInvocation","promiseQueue","cancelInvocation","_createCancelInvocation","invocationId","_sendWithProtocol","invocationEvent","Completion","_launchStreams","sendPromise","_createInvocation","invoke","on","newMethod","off","handlers","removeIdx","onreconnecting","onreconnected","_processHandshakeResponse","parseMessages","Invocation","_invokeClientMethod","StreamItem","Close","allowReconnect","responseMessage","features","inherentKeepAlive","getTime","_timeoutHandle","serverTimeout","_pingServerHandle","nextPing","invocationMessage","methods","arguments","_cancelCallbacksWithError","_reconnect","reconnectStartTime","now","previousReconnectAttempts","retryError","nextRetryDelay","_getNextRetryDelay","previousRetryCount","elapsedMilliseconds","retryReason","nextRetryDelayInMilliseconds","nonblocking","streamId","_createCompletionMessage","_createStreamItemMessage","argument","_isObservable","arg","StreamInvocation","id","CancelInvocation","DEFAULT_RETRY_DELAYS_IN_MILLISECONDS","DefaultReconnectPolicy","retryDelays","_retryDelays","retryContext","HeaderNames","HttpTransportType","TransferFormat","Cookie","_isAborted","LongPollingTransport","_accessTokenFactory","_pollAbort","_options","_running","pollAborted","isIn","_url","Binary","pollOptions","_getAccessToken","_updateHeaderToken","pollUrl","_closeError","_receiving","_poll","_raiseOnClose","deleteOptions","logMessage","ServerSentEventsTransport","encodeURIComponent","eventSource","opened","Text","EventSource","onmessage","_close","onopen","_eventSource","close","WebSocketTransport","webSocketConstructor","_logMessageContent","_webSocketConstructor","_headers","webSocket","binaryType","_webSocket","ErrorEvent","readyState","OPEN","_isCloseEvent","wasClean","code","reason","HttpConnection","_stopPromiseResolver","_negotiateVersion","_resolveUrl","webSocketModule","eventSourceModule","WebSocket","_startInternalPromise","_sendQueue","TransportSendQueue","_stopError","_stopConnection","skipNegotiation","WebSockets","_constructTransport","_startTransport","negotiateResponse","redirects","_getNegotiationResponse","ProtocolVersion","accessToken","_createTransport","negotiateUrl","_resolveNegotiateUrl","negotiateVersion","connectionToken","_createConnectUrl","requestedTransport","requestedTransferFormat","connectUrl","_isITransport","transportExceptions","transports","availableTransports","negotiate","endpoint","transportOrError","_resolveTransportOrError","ex","ServerSentEvents","LongPolling","connect","actualTransport","transportMatches","transferFormats","s","lastIndexOf","aTag","_transport","_buffer","_executing","_sendBufferedData","PromiseSource","_transportResult","_sendLoopPromise","_sendLoop","_bufferData","promise","transportResult","_concatBuffers","arrayBuffers","totalLength","offset","_resolver","_rejecter","JsonHubProtocol","hubMessages","parsedMessage","_isInvocationMessage","_isStreamItemMessage","_isCompletionMessage","_assertNotEmptyString","LogLevelNameMapping","trace","debug","information","warning","critical","none","None","HubConnectionBuilder","configureLogging","logging","mapping","parseLogLevel","withUrl","transportTypeOrOptions","isNotEmpty","httpConnectionOptions","withHubProtocol","withAutomaticReconnect","retryDelaysOrReconnectPolicy","isArray","build","roomCode","HUB","iterations","$roomCode","$HUB","playersInRoom","codeConnection","isCodeWrong","isRoomFull","hubConnection","signalR.HubConnectionBuilder","signalR.HttpTransportType","xmlHttp","Index","Lobby"],"mappings":"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"}