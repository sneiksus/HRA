{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/@microsoft/signalr/dist/esm/Errors.js","../../node_modules/@microsoft/signalr/dist/esm/HttpClient.js","../../node_modules/@microsoft/signalr/dist/esm/ILogger.js","../../node_modules/@microsoft/signalr/dist/esm/Loggers.js","../../node_modules/@microsoft/signalr/dist/esm/Utils.js","../../node_modules/@microsoft/signalr/dist/esm/FetchHttpClient.js","../../node_modules/@microsoft/signalr/dist/esm/XhrHttpClient.js","../../node_modules/@microsoft/signalr/dist/esm/DefaultHttpClient.js","../../node_modules/@microsoft/signalr/dist/esm/TextMessageFormat.js","../../node_modules/@microsoft/signalr/dist/esm/HandshakeProtocol.js","../../node_modules/@microsoft/signalr/dist/esm/IHubProtocol.js","../../node_modules/@microsoft/signalr/dist/esm/Subject.js","../../node_modules/@microsoft/signalr/dist/esm/HubConnection.js","../../node_modules/@microsoft/signalr/dist/esm/DefaultReconnectPolicy.js","../../node_modules/@microsoft/signalr/dist/esm/HeaderNames.js","../../node_modules/@microsoft/signalr/dist/esm/ITransport.js","../../node_modules/@microsoft/signalr/dist/esm/AbortController.js","../../node_modules/@microsoft/signalr/dist/esm/LongPollingTransport.js","../../node_modules/@microsoft/signalr/dist/esm/ServerSentEventsTransport.js","../../node_modules/@microsoft/signalr/dist/esm/WebSocketTransport.js","../../node_modules/@microsoft/signalr/dist/esm/HttpConnection.js","../../node_modules/@microsoft/signalr/dist/esm/JsonHubProtocol.js","../../node_modules/@microsoft/signalr/dist/esm/HubConnectionBuilder.js","../../node_modules/svelte/store/index.mjs","../../src/signalr.js","../../src/Card.svelte","../../src/Player.svelte","../../src/Message.svelte","../../src/Chat.svelte","../../src/Timer.svelte","../../src/Info.svelte","../../node_modules/svelte-router-spa/src/store.js","../../node_modules/svelte-router-spa/src/router/url_parser.js","../../node_modules/svelte-router-spa/src/lib/utils.js","../../node_modules/svelte-router-spa/src/router/current.js","../../node_modules/svelte-router-spa/src/router/redirect.js","../../node_modules/svelte-router-spa/src/router/guard.js","../../node_modules/svelte-router-spa/src/router/path.js","../../node_modules/svelte-router-spa/src/router/finder.js","../../node_modules/svelte-router-spa/src/router/route.js","../../node_modules/svelte-router-spa/src/spa_router.js","../../node_modules/svelte-router-spa/src/components/route.svelte","../../node_modules/svelte-router-spa/src/components/router.svelte","../../src/ConnectedUser.svelte","../../src/Lobby.svelte","../../src/Index.svelte","../../src/Battlefield.svelte","../../src/Play.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true && boolean_attributes.has(name) ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.45.0' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n/** Error thrown when an HTTP request fails. */\r\nexport class HttpError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     * @param {number} statusCode The HTTP status code represented by this error.\r\n     */\r\n    constructor(errorMessage, statusCode) {\r\n        const trueProto = new.target.prototype;\r\n        super(`${errorMessage}: Status code '${statusCode}'`);\r\n        this.statusCode = statusCode;\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when a timeout elapses. */\r\nexport class TimeoutError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.TimeoutError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage = \"A timeout occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when an action is aborted. */\r\nexport class AbortError extends Error {\r\n    /** Constructs a new instance of {@link AbortError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage = \"An abort occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when the selected transport is unsupported by the browser. */\r\n/** @private */\r\nexport class UnsupportedTransportError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.UnsupportedTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occured on.\r\n     */\r\n    constructor(message, transport) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'UnsupportedTransportError';\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when the selected transport is disabled by the browser. */\r\n/** @private */\r\nexport class DisabledTransportError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.DisabledTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occured on.\r\n     */\r\n    constructor(message, transport) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'DisabledTransportError';\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when the selected transport cannot be started. */\r\n/** @private */\r\nexport class FailedToStartTransportError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToStartTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occured on.\r\n     */\r\n    constructor(message, transport) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'FailedToStartTransportError';\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when the negotiation with the server failed to complete. */\r\n/** @private */\r\nexport class FailedToNegotiateWithServerError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToNegotiateWithServerError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     */\r\n    constructor(message) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.errorType = 'FailedToNegotiateWithServerError';\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when multiple errors have occured. */\r\n/** @private */\r\nexport class AggregateErrors extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.AggregateErrors}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {Error[]} innerErrors The collection of errors this error is aggregating.\r\n     */\r\n    constructor(message, innerErrors) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.innerErrors = innerErrors;\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n//# sourceMappingURL=Errors.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n/** Represents an HTTP response. */\r\nexport class HttpResponse {\r\n    constructor(statusCode, statusText, content) {\r\n        this.statusCode = statusCode;\r\n        this.statusText = statusText;\r\n        this.content = content;\r\n    }\r\n}\r\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\r\nexport class HttpClient {\r\n    get(url, options) {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n    post(url, options) {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n    delete(url, options) {\r\n        return this.send({\r\n            ...options,\r\n            method: \"DELETE\",\r\n            url,\r\n        });\r\n    }\r\n    /** Gets all cookies that apply to the specified URL.\r\n     *\r\n     * @param url The URL that the cookies are valid for.\r\n     * @returns {string} A string containing all the key-value cookie pairs for the specified URL.\r\n     */\r\n    // @ts-ignore\r\n    getCookieString(url) {\r\n        return \"\";\r\n    }\r\n}\r\n//# sourceMappingURL=HttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\r\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\r\nexport var LogLevel;\r\n(function (LogLevel) {\r\n    /** Log level for very low severity diagnostic messages. */\r\n    LogLevel[LogLevel[\"Trace\"] = 0] = \"Trace\";\r\n    /** Log level for low severity diagnostic messages. */\r\n    LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\r\n    /** Log level for informational diagnostic messages. */\r\n    LogLevel[LogLevel[\"Information\"] = 2] = \"Information\";\r\n    /** Log level for diagnostic messages that indicate a non-fatal problem. */\r\n    LogLevel[LogLevel[\"Warning\"] = 3] = \"Warning\";\r\n    /** Log level for diagnostic messages that indicate a failure in the current operation. */\r\n    LogLevel[LogLevel[\"Error\"] = 4] = \"Error\";\r\n    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\r\n    LogLevel[LogLevel[\"Critical\"] = 5] = \"Critical\";\r\n    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\r\n    LogLevel[LogLevel[\"None\"] = 6] = \"None\";\r\n})(LogLevel || (LogLevel = {}));\r\n//# sourceMappingURL=ILogger.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n/** A logger that does nothing when log messages are sent to it. */\r\nexport class NullLogger {\r\n    constructor() { }\r\n    /** @inheritDoc */\r\n    // eslint-disable-next-line\r\n    log(_logLevel, _message) {\r\n    }\r\n}\r\n/** The singleton instance of the {@link @microsoft/signalr.NullLogger}. */\r\nNullLogger.instance = new NullLogger();\r\n//# sourceMappingURL=Loggers.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { NullLogger } from \"./Loggers\";\r\n// Version token that will be replaced by the prepack command\r\n/** The version of the SignalR client. */\r\nexport const VERSION = \"6.0.1\";\r\n/** @private */\r\nexport class Arg {\r\n    static isRequired(val, name) {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n    static isNotEmpty(val, name) {\r\n        if (!val || val.match(/^\\s*$/)) {\r\n            throw new Error(`The '${name}' argument should not be empty.`);\r\n        }\r\n    }\r\n    static isIn(val, values, name) {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n/** @private */\r\nexport class Platform {\r\n    static get isBrowser() {\r\n        return typeof window === \"object\";\r\n    }\r\n    static get isWebWorker() {\r\n        return typeof self === \"object\" && \"importScripts\" in self;\r\n    }\r\n    static get isNode() {\r\n        return !this.isBrowser && !this.isWebWorker;\r\n    }\r\n}\r\n/** @private */\r\nexport function getDataDetail(data, includeContent) {\r\n    let detail = \"\";\r\n    if (isArrayBuffer(data)) {\r\n        detail = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    }\r\n    else if (typeof data === \"string\") {\r\n        detail = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${data}'`;\r\n        }\r\n    }\r\n    return detail;\r\n}\r\n/** @private */\r\nexport function formatArrayBuffer(data) {\r\n    const view = new Uint8Array(data);\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n// Also in signalr-protocol-msgpack/Utils.ts\r\n/** @private */\r\nexport function isArrayBuffer(val) {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}\r\n/** @private */\r\nexport async function sendMessage(logger, transportName, httpClient, url, accessTokenFactory, content, options) {\r\n    let headers = {};\r\n    if (accessTokenFactory) {\r\n        const token = await accessTokenFactory();\r\n        if (token) {\r\n            headers = {\r\n                [\"Authorization\"]: `Bearer ${token}`,\r\n            };\r\n        }\r\n    }\r\n    const [name, value] = getUserAgentHeader();\r\n    headers[name] = value;\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, options.logMessageContent)}.`);\r\n    const responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers: { ...headers, ...options.headers },\r\n        responseType,\r\n        timeout: options.timeout,\r\n        withCredentials: options.withCredentials,\r\n    });\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n/** @private */\r\nexport function createLogger(logger) {\r\n    if (logger === undefined) {\r\n        return new ConsoleLogger(LogLevel.Information);\r\n    }\r\n    if (logger === null) {\r\n        return NullLogger.instance;\r\n    }\r\n    if (logger.log !== undefined) {\r\n        return logger;\r\n    }\r\n    return new ConsoleLogger(logger);\r\n}\r\n/** @private */\r\nexport class SubjectSubscription {\r\n    constructor(subject, observer) {\r\n        this._subject = subject;\r\n        this._observer = observer;\r\n    }\r\n    dispose() {\r\n        const index = this._subject.observers.indexOf(this._observer);\r\n        if (index > -1) {\r\n            this._subject.observers.splice(index, 1);\r\n        }\r\n        if (this._subject.observers.length === 0 && this._subject.cancelCallback) {\r\n            this._subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n/** @private */\r\nexport class ConsoleLogger {\r\n    constructor(minimumLogLevel) {\r\n        this._minLevel = minimumLogLevel;\r\n        this.out = console;\r\n    }\r\n    log(logLevel, message) {\r\n        if (logLevel >= this._minLevel) {\r\n            const msg = `[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`;\r\n            switch (logLevel) {\r\n                case LogLevel.Critical:\r\n                case LogLevel.Error:\r\n                    this.out.error(msg);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    this.out.warn(msg);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    this.out.info(msg);\r\n                    break;\r\n                default:\r\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n                    this.out.log(msg);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n/** @private */\r\nexport function getUserAgentHeader() {\r\n    let userAgentHeaderName = \"X-SignalR-User-Agent\";\r\n    if (Platform.isNode) {\r\n        userAgentHeaderName = \"User-Agent\";\r\n    }\r\n    return [userAgentHeaderName, constructUserAgent(VERSION, getOsName(), getRuntime(), getRuntimeVersion())];\r\n}\r\n/** @private */\r\nexport function constructUserAgent(version, os, runtime, runtimeVersion) {\r\n    // Microsoft SignalR/[Version] ([Detailed Version]; [Operating System]; [Runtime]; [Runtime Version])\r\n    let userAgent = \"Microsoft SignalR/\";\r\n    const majorAndMinor = version.split(\".\");\r\n    userAgent += `${majorAndMinor[0]}.${majorAndMinor[1]}`;\r\n    userAgent += ` (${version}; `;\r\n    if (os && os !== \"\") {\r\n        userAgent += `${os}; `;\r\n    }\r\n    else {\r\n        userAgent += \"Unknown OS; \";\r\n    }\r\n    userAgent += `${runtime}`;\r\n    if (runtimeVersion) {\r\n        userAgent += `; ${runtimeVersion}`;\r\n    }\r\n    else {\r\n        userAgent += \"; Unknown Runtime Version\";\r\n    }\r\n    userAgent += \")\";\r\n    return userAgent;\r\n}\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getOsName() {\r\n    if (Platform.isNode) {\r\n        switch (process.platform) {\r\n            case \"win32\":\r\n                return \"Windows NT\";\r\n            case \"darwin\":\r\n                return \"macOS\";\r\n            case \"linux\":\r\n                return \"Linux\";\r\n            default:\r\n                return process.platform;\r\n        }\r\n    }\r\n    else {\r\n        return \"\";\r\n    }\r\n}\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getRuntimeVersion() {\r\n    if (Platform.isNode) {\r\n        return process.versions.node;\r\n    }\r\n    return undefined;\r\n}\r\nfunction getRuntime() {\r\n    if (Platform.isNode) {\r\n        return \"NodeJS\";\r\n    }\r\n    else {\r\n        return \"Browser\";\r\n    }\r\n}\r\n/** @private */\r\nexport function getErrorString(e) {\r\n    if (e.stack) {\r\n        return e.stack;\r\n    }\r\n    else if (e.message) {\r\n        return e.message;\r\n    }\r\n    return `${e}`;\r\n}\r\n/** @private */\r\nexport function getGlobalThis() {\r\n    // globalThis is semi-new and not available in Node until v12\r\n    if (typeof globalThis !== \"undefined\") {\r\n        return globalThis;\r\n    }\r\n    if (typeof self !== \"undefined\") {\r\n        return self;\r\n    }\r\n    if (typeof window !== \"undefined\") {\r\n        return window;\r\n    }\r\n    if (typeof global !== \"undefined\") {\r\n        return global;\r\n    }\r\n    throw new Error(\"could not find global\");\r\n}\r\n//# sourceMappingURL=Utils.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { Platform, getGlobalThis } from \"./Utils\";\r\nexport class FetchHttpClient extends HttpClient {\r\n    constructor(logger) {\r\n        super();\r\n        this._logger = logger;\r\n        if (typeof fetch === \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests\r\n            this._jar = new (requireFunc(\"tough-cookie\")).CookieJar();\r\n            this._fetchType = requireFunc(\"node-fetch\");\r\n            // node-fetch doesn't have a nice API for getting and setting cookies\r\n            // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one\r\n            this._fetchType = requireFunc(\"fetch-cookie\")(this._fetchType, this._jar);\r\n        }\r\n        else {\r\n            this._fetchType = fetch.bind(getGlobalThis());\r\n        }\r\n        if (typeof AbortController === \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide\r\n            this._abortControllerType = requireFunc(\"abort-controller\");\r\n        }\r\n        else {\r\n            this._abortControllerType = AbortController;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    async send(request) {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            throw new AbortError();\r\n        }\r\n        if (!request.method) {\r\n            throw new Error(\"No method defined.\");\r\n        }\r\n        if (!request.url) {\r\n            throw new Error(\"No url defined.\");\r\n        }\r\n        const abortController = new this._abortControllerType();\r\n        let error;\r\n        // Hook our abortSignal into the abort controller\r\n        if (request.abortSignal) {\r\n            request.abortSignal.onabort = () => {\r\n                abortController.abort();\r\n                error = new AbortError();\r\n            };\r\n        }\r\n        // If a timeout has been passed in, setup a timeout to call abort\r\n        // Type needs to be any to fit window.setTimeout and NodeJS.setTimeout\r\n        let timeoutId = null;\r\n        if (request.timeout) {\r\n            const msTimeout = request.timeout;\r\n            timeoutId = setTimeout(() => {\r\n                abortController.abort();\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                error = new TimeoutError();\r\n            }, msTimeout);\r\n        }\r\n        let response;\r\n        try {\r\n            response = await this._fetchType(request.url, {\r\n                body: request.content,\r\n                cache: \"no-cache\",\r\n                credentials: request.withCredentials === true ? \"include\" : \"same-origin\",\r\n                headers: {\r\n                    \"Content-Type\": \"text/plain;charset=UTF-8\",\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                    ...request.headers,\r\n                },\r\n                method: request.method,\r\n                mode: \"cors\",\r\n                redirect: \"follow\",\r\n                signal: abortController.signal,\r\n            });\r\n        }\r\n        catch (e) {\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            this._logger.log(LogLevel.Warning, `Error from HTTP request. ${e}.`);\r\n            throw e;\r\n        }\r\n        finally {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = null;\r\n            }\r\n        }\r\n        if (!response.ok) {\r\n            const errorMessage = await deserializeContent(response, \"text\");\r\n            throw new HttpError(errorMessage || response.statusText, response.status);\r\n        }\r\n        const content = deserializeContent(response, request.responseType);\r\n        const payload = await content;\r\n        return new HttpResponse(response.status, response.statusText, payload);\r\n    }\r\n    getCookieString(url) {\r\n        let cookies = \"\";\r\n        if (Platform.isNode && this._jar) {\r\n            // @ts-ignore: unused variable\r\n            this._jar.getCookies(url, (e, c) => cookies = c.join(\"; \"));\r\n        }\r\n        return cookies;\r\n    }\r\n}\r\nfunction deserializeContent(response, responseType) {\r\n    let content;\r\n    switch (responseType) {\r\n        case \"arraybuffer\":\r\n            content = response.arrayBuffer();\r\n            break;\r\n        case \"text\":\r\n            content = response.text();\r\n            break;\r\n        case \"blob\":\r\n        case \"document\":\r\n        case \"json\":\r\n            throw new Error(`${responseType} is not supported.`);\r\n        default:\r\n            content = response.text();\r\n            break;\r\n    }\r\n    return content;\r\n}\r\n//# sourceMappingURL=FetchHttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\r\nimport { LogLevel } from \"./ILogger\";\r\nexport class XhrHttpClient extends HttpClient {\r\n    constructor(logger) {\r\n        super();\r\n        this._logger = logger;\r\n    }\r\n    /** @inheritDoc */\r\n    send(request) {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.open(request.method, request.url, true);\r\n            xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                    xhr.setRequestHeader(header, headers[header]);\r\n                });\r\n            }\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                }\r\n                else {\r\n                    reject(new HttpError(xhr.response || xhr.responseText || xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n            xhr.onerror = () => {\r\n                this._logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n            xhr.ontimeout = () => {\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n            xhr.send(request.content || \"\");\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=XhrHttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortError } from \"./Errors\";\r\nimport { FetchHttpClient } from \"./FetchHttpClient\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { Platform } from \"./Utils\";\r\nimport { XhrHttpClient } from \"./XhrHttpClient\";\r\n/** Default implementation of {@link @microsoft/signalr.HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */\r\n    constructor(logger) {\r\n        super();\r\n        if (typeof fetch !== \"undefined\" || Platform.isNode) {\r\n            this._httpClient = new FetchHttpClient(logger);\r\n        }\r\n        else if (typeof XMLHttpRequest !== \"undefined\") {\r\n            this._httpClient = new XhrHttpClient(logger);\r\n        }\r\n        else {\r\n            throw new Error(\"No usable HttpClient found.\");\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    send(request) {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n        return this._httpClient.send(request);\r\n    }\r\n    getCookieString(url) {\r\n        return this._httpClient.getCookieString(url);\r\n    }\r\n}\r\n//# sourceMappingURL=DefaultHttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// Not exported from index\r\n/** @private */\r\nexport class TextMessageFormat {\r\n    static write(output) {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n    static parse(input) {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\nTextMessageFormat.RecordSeparatorCode = 0x1e;\r\nTextMessageFormat.RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n//# sourceMappingURL=TextMessageFormat.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    writeHandshakeRequest(handshakeRequest) {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n    parseHandshakeResponse(data) {\r\n        let messageData;\r\n        let remainingData;\r\n        if (isArrayBuffer(data)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, Array.prototype.slice.call(binaryData.slice(0, responseLength)));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        }\r\n        else {\r\n            const textData = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        const responseMessage = response;\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n//# sourceMappingURL=HandshakeProtocol.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n/** Defines the type of a Hub Message. */\r\nexport var MessageType;\r\n(function (MessageType) {\r\n    /** Indicates the message is an Invocation message and implements the {@link @microsoft/signalr.InvocationMessage} interface. */\r\n    MessageType[MessageType[\"Invocation\"] = 1] = \"Invocation\";\r\n    /** Indicates the message is a StreamItem message and implements the {@link @microsoft/signalr.StreamItemMessage} interface. */\r\n    MessageType[MessageType[\"StreamItem\"] = 2] = \"StreamItem\";\r\n    /** Indicates the message is a Completion message and implements the {@link @microsoft/signalr.CompletionMessage} interface. */\r\n    MessageType[MessageType[\"Completion\"] = 3] = \"Completion\";\r\n    /** Indicates the message is a Stream Invocation message and implements the {@link @microsoft/signalr.StreamInvocationMessage} interface. */\r\n    MessageType[MessageType[\"StreamInvocation\"] = 4] = \"StreamInvocation\";\r\n    /** Indicates the message is a Cancel Invocation message and implements the {@link @microsoft/signalr.CancelInvocationMessage} interface. */\r\n    MessageType[MessageType[\"CancelInvocation\"] = 5] = \"CancelInvocation\";\r\n    /** Indicates the message is a Ping message and implements the {@link @microsoft/signalr.PingMessage} interface. */\r\n    MessageType[MessageType[\"Ping\"] = 6] = \"Ping\";\r\n    /** Indicates the message is a Close message and implements the {@link @microsoft/signalr.CloseMessage} interface. */\r\n    MessageType[MessageType[\"Close\"] = 7] = \"Close\";\r\n})(MessageType || (MessageType = {}));\r\n//# sourceMappingURL=IHubProtocol.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { SubjectSubscription } from \"./Utils\";\r\n/** Stream implementation to stream items to the server. */\r\nexport class Subject {\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n    next(item) {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n    error(err) {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n    complete() {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n    subscribe(observer) {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n//# sourceMappingURL=Subject.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { HandshakeProtocol } from \"./HandshakeProtocol\";\r\nimport { MessageType } from \"./IHubProtocol\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { Subject } from \"./Subject\";\r\nimport { Arg, getErrorString, Platform } from \"./Utils\";\r\nconst DEFAULT_TIMEOUT_IN_MS = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS = 15 * 1000;\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport var HubConnectionState;\r\n(function (HubConnectionState) {\r\n    /** The hub connection is disconnected. */\r\n    HubConnectionState[\"Disconnected\"] = \"Disconnected\";\r\n    /** The hub connection is connecting. */\r\n    HubConnectionState[\"Connecting\"] = \"Connecting\";\r\n    /** The hub connection is connected. */\r\n    HubConnectionState[\"Connected\"] = \"Connected\";\r\n    /** The hub connection is disconnecting. */\r\n    HubConnectionState[\"Disconnecting\"] = \"Disconnecting\";\r\n    /** The hub connection is reconnecting. */\r\n    HubConnectionState[\"Reconnecting\"] = \"Reconnecting\";\r\n})(HubConnectionState || (HubConnectionState = {}));\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    constructor(connection, logger, protocol, reconnectPolicy) {\r\n        this._nextKeepAlive = 0;\r\n        this._freezeEventListener = () => {\r\n            this._logger.log(LogLevel.Warning, \"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://docs.microsoft.com/aspnet/core/signalr/javascript-client#bsleep\");\r\n        };\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\r\n        this._logger = logger;\r\n        this._protocol = protocol;\r\n        this.connection = connection;\r\n        this._reconnectPolicy = reconnectPolicy;\r\n        this._handshakeProtocol = new HandshakeProtocol();\r\n        this.connection.onreceive = (data) => this._processIncomingData(data);\r\n        this.connection.onclose = (error) => this._connectionClosed(error);\r\n        this._callbacks = {};\r\n        this._methods = {};\r\n        this._closedCallbacks = [];\r\n        this._reconnectingCallbacks = [];\r\n        this._reconnectedCallbacks = [];\r\n        this._invocationId = 0;\r\n        this._receivedHandshakeResponse = false;\r\n        this._connectionState = HubConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n        this._cachedPingMessage = this._protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    static create(connection, logger, protocol, reconnectPolicy) {\r\n        return new HubConnection(connection, logger, protocol, reconnectPolicy);\r\n    }\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state() {\r\n        return this._connectionState;\r\n    }\r\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */\r\n    get connectionId() {\r\n        return this.connection ? (this.connection.connectionId || null) : null;\r\n    }\r\n    /** Indicates the url of the {@link HubConnection} to the server. */\r\n    get baseUrl() {\r\n        return this.connection.baseUrl || \"\";\r\n    }\r\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */\r\n    set baseUrl(url) {\r\n        if (this._connectionState !== HubConnectionState.Disconnected && this._connectionState !== HubConnectionState.Reconnecting) {\r\n            throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\r\n        }\r\n        if (!url) {\r\n            throw new Error(\"The HubConnection url must be a valid url.\");\r\n        }\r\n        this.connection.baseUrl = url;\r\n    }\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    start() {\r\n        this._startPromise = this._startWithStateTransitions();\r\n        return this._startPromise;\r\n    }\r\n    async _startWithStateTransitions() {\r\n        if (this._connectionState !== HubConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n        this._connectionState = HubConnectionState.Connecting;\r\n        this._logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n        try {\r\n            await this._startInternal();\r\n            if (Platform.isBrowser) {\r\n                if (document) {\r\n                    // Log when the browser freezes the tab so users know why their connection unexpectedly stopped working\r\n                    document.addEventListener(\"freeze\", this._freezeEventListener);\r\n                }\r\n            }\r\n            this._connectionState = HubConnectionState.Connected;\r\n            this._connectionStarted = true;\r\n            this._logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\r\n        }\r\n        catch (e) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    async _startInternal() {\r\n        this._stopDuringStartError = undefined;\r\n        this._receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is (re)started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this._handshakeResolver = resolve;\r\n            this._handshakeRejecter = reject;\r\n        });\r\n        await this.connection.start(this._protocol.transferFormat);\r\n        try {\r\n            const handshakeRequest = {\r\n                protocol: this._protocol.name,\r\n                version: this._protocol.version,\r\n            };\r\n            this._logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n            await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n            this._logger.log(LogLevel.Information, `Using HubProtocol '${this._protocol.name}'.`);\r\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n            this._cleanupTimeout();\r\n            this._resetTimeoutPeriod();\r\n            this._resetKeepAliveInterval();\r\n            await handshakePromise;\r\n            // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\r\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\r\n            // and the connection was closed.\r\n            if (this._stopDuringStartError) {\r\n                // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\r\n                // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\r\n                // will cause the calling continuation to get scheduled to run later.\r\n                // eslint-disable-next-line @typescript-eslint/no-throw-literal\r\n                throw this._stopDuringStartError;\r\n            }\r\n        }\r\n        catch (e) {\r\n            this._logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\r\n            this._cleanupTimeout();\r\n            this._cleanupPingTimer();\r\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\r\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\r\n            await this.connection.stop(e);\r\n            throw e;\r\n        }\r\n    }\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    async stop() {\r\n        // Capture the start promise before the connection might be restarted in an onclose callback.\r\n        const startPromise = this._startPromise;\r\n        this._stopPromise = this._stopInternal();\r\n        await this._stopPromise;\r\n        try {\r\n            // Awaiting undefined continues immediately\r\n            await startPromise;\r\n        }\r\n        catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n    }\r\n    _stopInternal(error) {\r\n        if (this._connectionState === HubConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n        this._connectionState = HubConnectionState.Disconnecting;\r\n        this._logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n        if (this._reconnectDelayHandle) {\r\n            // We're in a reconnect delay which means the underlying connection is currently already stopped.\r\n            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\r\n            // fire the onclose callbacks.\r\n            this._logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\r\n            clearTimeout(this._reconnectDelayHandle);\r\n            this._reconnectDelayHandle = undefined;\r\n            this._completeClose();\r\n            return Promise.resolve();\r\n        }\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        this._stopDuringStartError = error || new Error(\"The connection was stopped before the hub handshake could complete.\");\r\n        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\r\n        // or the onclose callback is invoked. The onclose callback will transition the HubConnection\r\n        // to the disconnected state if need be before HttpConnection.stop() completes.\r\n        return this.connection.stop(error);\r\n    }\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    stream(methodName, ...args) {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createStreamInvocation(methodName, args, streamIds);\r\n        // eslint-disable-next-line prefer-const\r\n        let promiseQueue;\r\n        const subject = new Subject();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation = this._createCancelInvocation(invocationDescriptor.invocationId);\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n            return promiseQueue.then(() => {\r\n                return this._sendWithProtocol(cancelInvocation);\r\n            });\r\n        };\r\n        this._callbacks[invocationDescriptor.invocationId] = (invocationEvent, error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            }\r\n            else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    }\r\n                    else {\r\n                        subject.complete();\r\n                    }\r\n                }\r\n                else {\r\n                    subject.next((invocationEvent.item));\r\n                }\r\n            }\r\n        };\r\n        promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n            .catch((e) => {\r\n            subject.error(e);\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n        });\r\n        this._launchStreams(streams, promiseQueue);\r\n        return subject;\r\n    }\r\n    _sendMessage(message) {\r\n        this._resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n    /**\r\n     * Sends a js object to the server.\r\n     * @param message The js object to serialize and send.\r\n     */\r\n    _sendWithProtocol(message) {\r\n        return this._sendMessage(this._protocol.writeMessage(message));\r\n    }\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    send(methodName, ...args) {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const sendPromise = this._sendWithProtocol(this._createInvocation(methodName, args, true, streamIds));\r\n        this._launchStreams(streams, sendPromise);\r\n        return sendPromise;\r\n    }\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    invoke(methodName, ...args) {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createInvocation(methodName, args, false, streamIds);\r\n        const p = new Promise((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this._callbacks[invocationDescriptor.invocationId] = (invocationEvent, error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n                else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        }\r\n                        else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    }\r\n                    else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n            const promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n                .catch((e) => {\r\n                reject(e);\r\n                // invocationId will always have a value for a non-blocking invocation\r\n                delete this._callbacks[invocationDescriptor.invocationId];\r\n            });\r\n            this._launchStreams(streams, promiseQueue);\r\n        });\r\n        return p;\r\n    }\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    on(methodName, newMethod) {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n        methodName = methodName.toLowerCase();\r\n        if (!this._methods[methodName]) {\r\n            this._methods[methodName] = [];\r\n        }\r\n        // Preventing adding the same handler multiple times.\r\n        if (this._methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n        this._methods[methodName].push(newMethod);\r\n    }\r\n    off(methodName, method) {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this._methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this._methods[methodName];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            delete this._methods[methodName];\r\n        }\r\n    }\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    onclose(callback) {\r\n        if (callback) {\r\n            this._closedCallbacks.push(callback);\r\n        }\r\n    }\r\n    /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n     */\r\n    onreconnecting(callback) {\r\n        if (callback) {\r\n            this._reconnectingCallbacks.push(callback);\r\n        }\r\n    }\r\n    /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n     */\r\n    onreconnected(callback) {\r\n        if (callback) {\r\n            this._reconnectedCallbacks.push(callback);\r\n        }\r\n    }\r\n    _processIncomingData(data) {\r\n        this._cleanupTimeout();\r\n        if (!this._receivedHandshakeResponse) {\r\n            data = this._processHandshakeResponse(data);\r\n            this._receivedHandshakeResponse = true;\r\n        }\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this._protocol.parseMessages(data, this._logger);\r\n            for (const message of messages) {\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this._invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion: {\r\n                        const callback = this._callbacks[message.invocationId];\r\n                        if (callback) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this._callbacks[message.invocationId];\r\n                            }\r\n                            try {\r\n                                callback(message);\r\n                            }\r\n                            catch (e) {\r\n                                this._logger.log(LogLevel.Error, `Stream callback threw error: ${getErrorString(e)}`);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close: {\r\n                        this._logger.log(LogLevel.Information, \"Close message received from server.\");\r\n                        const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\r\n                        if (message.allowReconnect === true) {\r\n                            // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\r\n                            // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\r\n                            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                            this.connection.stop(error);\r\n                        }\r\n                        else {\r\n                            // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\r\n                            this._stopPromise = this._stopInternal(error);\r\n                        }\r\n                        break;\r\n                    }\r\n                    default:\r\n                        this._logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        this._resetTimeoutPeriod();\r\n    }\r\n    _processHandshakeResponse(data) {\r\n        let responseMessage;\r\n        let remainingData;\r\n        try {\r\n            [remainingData, responseMessage] = this._handshakeProtocol.parseHandshakeResponse(data);\r\n        }\r\n        catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this._logger.log(LogLevel.Error, message);\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this._logger.log(LogLevel.Error, message);\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n        this._handshakeResolver();\r\n        return remainingData;\r\n    }\r\n    _resetKeepAliveInterval() {\r\n        if (this.connection.features.inherentKeepAlive) {\r\n            return;\r\n        }\r\n        // Set the time we want the next keep alive to be sent\r\n        // Timer will be setup on next message receive\r\n        this._nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;\r\n        this._cleanupPingTimer();\r\n    }\r\n    _resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this._timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n            // Set keepAlive timer if there isn't one\r\n            if (this._pingServerHandle === undefined) {\r\n                let nextPing = this._nextKeepAlive - new Date().getTime();\r\n                if (nextPing < 0) {\r\n                    nextPing = 0;\r\n                }\r\n                // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute\r\n                this._pingServerHandle = setTimeout(async () => {\r\n                    if (this._connectionState === HubConnectionState.Connected) {\r\n                        try {\r\n                            await this._sendMessage(this._cachedPingMessage);\r\n                        }\r\n                        catch {\r\n                            // We don't care about the error. It should be seen elsewhere in the client.\r\n                            // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                            this._cleanupPingTimer();\r\n                        }\r\n                    }\r\n                }, nextPing);\r\n            }\r\n        }\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n    _invokeClientMethod(invocationMessage) {\r\n        const methods = this._methods[invocationMessage.target.toLowerCase()];\r\n        if (methods) {\r\n            try {\r\n                methods.forEach((m) => m.apply(this, invocationMessage.arguments));\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `A callback for the method ${invocationMessage.target.toLowerCase()} threw error '${e}'.`);\r\n            }\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                const message = \"Server requested a response, which is not supported in this version of the client.\";\r\n                this._logger.log(LogLevel.Error, message);\r\n                // We don't want to wait on the stop itself.\r\n                this._stopPromise = this._stopInternal(new Error(message));\r\n            }\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\r\n        }\r\n    }\r\n    _connectionClosed(error) {\r\n        this._logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this._connectionState}.`);\r\n        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\r\n        this._stopDuringStartError = this._stopDuringStartError || error || new Error(\"The underlying connection was closed before the hub handshake could complete.\");\r\n        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\r\n        // If it has already completed, this should just noop.\r\n        if (this._handshakeResolver) {\r\n            this._handshakeResolver();\r\n        }\r\n        this._cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._completeClose(error);\r\n        }\r\n        else if (this._connectionState === HubConnectionState.Connected && this._reconnectPolicy) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._reconnect(error);\r\n        }\r\n        else if (this._connectionState === HubConnectionState.Connected) {\r\n            this._completeClose(error);\r\n        }\r\n        // If none of the above if conditions were true were called the HubConnection must be in either:\r\n        // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\r\n        // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\r\n        //    and potentially continue the reconnect() loop.\r\n        // 3. The Disconnected state in which case we're already done.\r\n    }\r\n    _completeClose(error) {\r\n        if (this._connectionStarted) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._connectionStarted = false;\r\n            if (Platform.isBrowser) {\r\n                if (document) {\r\n                    document.removeEventListener(\"freeze\", this._freezeEventListener);\r\n                }\r\n            }\r\n            try {\r\n                this._closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n    async _reconnect(error) {\r\n        const reconnectStartTime = Date.now();\r\n        let previousReconnectAttempts = 0;\r\n        let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\r\n        let nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\r\n        if (nextRetryDelay === null) {\r\n            this._logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\r\n            this._completeClose(error);\r\n            return;\r\n        }\r\n        this._connectionState = HubConnectionState.Reconnecting;\r\n        if (error) {\r\n            this._logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Information, \"Connection reconnecting.\");\r\n        }\r\n        if (this._reconnectingCallbacks.length !== 0) {\r\n            try {\r\n                this._reconnectingCallbacks.forEach((c) => c.apply(this, [error]));\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n            // Exit early if an onreconnecting callback called connection.stop().\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\r\n                return;\r\n            }\r\n        }\r\n        while (nextRetryDelay !== null) {\r\n            this._logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\r\n            await new Promise((resolve) => {\r\n                this._reconnectDelayHandle = setTimeout(resolve, nextRetryDelay);\r\n            });\r\n            this._reconnectDelayHandle = undefined;\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\r\n                return;\r\n            }\r\n            try {\r\n                await this._startInternal();\r\n                this._connectionState = HubConnectionState.Connected;\r\n                this._logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\r\n                if (this._reconnectedCallbacks.length !== 0) {\r\n                    try {\r\n                        this._reconnectedCallbacks.forEach((c) => c.apply(this, [this.connection.connectionId]));\r\n                    }\r\n                    catch (e) {\r\n                        this._logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\r\n                if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                    this._logger.log(LogLevel.Debug, `Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`);\r\n                    // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\r\n                    if (this._connectionState === HubConnectionState.Disconnecting) {\r\n                        this._completeClose();\r\n                    }\r\n                    return;\r\n                }\r\n                retryError = e instanceof Error ? e : new Error(e.toString());\r\n                nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\r\n            }\r\n        }\r\n        this._logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\r\n        this._completeClose();\r\n    }\r\n    _getNextRetryDelay(previousRetryCount, elapsedMilliseconds, retryReason) {\r\n        try {\r\n            return this._reconnectPolicy.nextRetryDelayInMilliseconds({\r\n                elapsedMilliseconds,\r\n                previousRetryCount,\r\n                retryReason,\r\n            });\r\n        }\r\n        catch (e) {\r\n            this._logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\r\n            return null;\r\n        }\r\n    }\r\n    _cancelCallbacksWithError(error) {\r\n        const callbacks = this._callbacks;\r\n        this._callbacks = {};\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n            const callback = callbacks[key];\r\n            try {\r\n                callback(null, error);\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `Stream 'error' callback called with '${error}' threw error: ${getErrorString(e)}`);\r\n            }\r\n        });\r\n    }\r\n    _cleanupPingTimer() {\r\n        if (this._pingServerHandle) {\r\n            clearTimeout(this._pingServerHandle);\r\n            this._pingServerHandle = undefined;\r\n        }\r\n    }\r\n    _cleanupTimeout() {\r\n        if (this._timeoutHandle) {\r\n            clearTimeout(this._timeoutHandle);\r\n        }\r\n    }\r\n    _createInvocation(methodName, args, nonblocking, streamIds) {\r\n        if (nonblocking) {\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    arguments: args,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n        else {\r\n            const invocationId = this._invocationId;\r\n            this._invocationId++;\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n    }\r\n    _launchStreams(streams, promiseQueue) {\r\n        if (streams.length === 0) {\r\n            return;\r\n        }\r\n        // Synchronize stream data so they arrive in-order on the server\r\n        if (!promiseQueue) {\r\n            promiseQueue = Promise.resolve();\r\n        }\r\n        // We want to iterate over the keys, since the keys are the stream ids\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const streamId in streams) {\r\n            streams[streamId].subscribe({\r\n                complete: () => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId)));\r\n                },\r\n                error: (err) => {\r\n                    let message;\r\n                    if (err instanceof Error) {\r\n                        message = err.message;\r\n                    }\r\n                    else if (err && err.toString) {\r\n                        message = err.toString();\r\n                    }\r\n                    else {\r\n                        message = \"Unknown error\";\r\n                    }\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId, message)));\r\n                },\r\n                next: (item) => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createStreamItemMessage(streamId, item)));\r\n                },\r\n            });\r\n        }\r\n    }\r\n    _replaceStreamingParams(args) {\r\n        const streams = [];\r\n        const streamIds = [];\r\n        for (let i = 0; i < args.length; i++) {\r\n            const argument = args[i];\r\n            if (this._isObservable(argument)) {\r\n                const streamId = this._invocationId;\r\n                this._invocationId++;\r\n                // Store the stream for later use\r\n                streams[streamId] = argument;\r\n                streamIds.push(streamId.toString());\r\n                // remove stream from args\r\n                args.splice(i, 1);\r\n            }\r\n        }\r\n        return [streams, streamIds];\r\n    }\r\n    _isObservable(arg) {\r\n        // This allows other stream implementations to just work (like rxjs)\r\n        return arg && arg.subscribe && typeof arg.subscribe === \"function\";\r\n    }\r\n    _createStreamInvocation(methodName, args, streamIds) {\r\n        const invocationId = this._invocationId;\r\n        this._invocationId++;\r\n        if (streamIds.length !== 0) {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n    }\r\n    _createCancelInvocation(id) {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n    _createStreamItemMessage(id, item) {\r\n        return {\r\n            invocationId: id,\r\n            item,\r\n            type: MessageType.StreamItem,\r\n        };\r\n    }\r\n    _createCompletionMessage(id, error, result) {\r\n        if (error) {\r\n            return {\r\n                error,\r\n                invocationId: id,\r\n                type: MessageType.Completion,\r\n            };\r\n        }\r\n        return {\r\n            invocationId: id,\r\n            result,\r\n            type: MessageType.Completion,\r\n        };\r\n    }\r\n}\r\n//# sourceMappingURL=HubConnection.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// 0, 2, 10, 30 second delays before reconnect attempts.\r\nconst DEFAULT_RETRY_DELAYS_IN_MILLISECONDS = [0, 2000, 10000, 30000, null];\r\n/** @private */\r\nexport class DefaultReconnectPolicy {\r\n    constructor(retryDelays) {\r\n        this._retryDelays = retryDelays !== undefined ? [...retryDelays, null] : DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;\r\n    }\r\n    nextRetryDelayInMilliseconds(retryContext) {\r\n        return this._retryDelays[retryContext.previousRetryCount];\r\n    }\r\n}\r\n//# sourceMappingURL=DefaultReconnectPolicy.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nexport class HeaderNames {\r\n}\r\nHeaderNames.Authorization = \"Authorization\";\r\nHeaderNames.Cookie = \"Cookie\";\r\n//# sourceMappingURL=HeaderNames.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// This will be treated as a bit flag in the future, so we keep it using power-of-two values.\r\n/** Specifies a specific HTTP transport type. */\r\nexport var HttpTransportType;\r\n(function (HttpTransportType) {\r\n    /** Specifies no transport preference. */\r\n    HttpTransportType[HttpTransportType[\"None\"] = 0] = \"None\";\r\n    /** Specifies the WebSockets transport. */\r\n    HttpTransportType[HttpTransportType[\"WebSockets\"] = 1] = \"WebSockets\";\r\n    /** Specifies the Server-Sent Events transport. */\r\n    HttpTransportType[HttpTransportType[\"ServerSentEvents\"] = 2] = \"ServerSentEvents\";\r\n    /** Specifies the Long Polling transport. */\r\n    HttpTransportType[HttpTransportType[\"LongPolling\"] = 4] = \"LongPolling\";\r\n})(HttpTransportType || (HttpTransportType = {}));\r\n/** Specifies the transfer format for a connection. */\r\nexport var TransferFormat;\r\n(function (TransferFormat) {\r\n    /** Specifies that only text data will be transmitted over the connection. */\r\n    TransferFormat[TransferFormat[\"Text\"] = 1] = \"Text\";\r\n    /** Specifies that binary data will be transmitted over the connection. */\r\n    TransferFormat[TransferFormat[\"Binary\"] = 2] = \"Binary\";\r\n})(TransferFormat || (TransferFormat = {}));\r\n//# sourceMappingURL=ITransport.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n// Not exported from index.\r\n/** @private */\r\nexport class AbortController {\r\n    constructor() {\r\n        this._isAborted = false;\r\n        this.onabort = null;\r\n    }\r\n    abort() {\r\n        if (!this._isAborted) {\r\n            this._isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n    get signal() {\r\n        return this;\r\n    }\r\n    get aborted() {\r\n        return this._isAborted;\r\n    }\r\n}\r\n//# sourceMappingURL=AbortController.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport {\r\n    constructor(httpClient, accessTokenFactory, logger, options) {\r\n        this._httpClient = httpClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logger = logger;\r\n        this._pollAbort = new AbortController();\r\n        this._options = options;\r\n        this._running = false;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    get pollAborted() {\r\n        return this._pollAbort.aborted;\r\n    }\r\n    async connect(url, transferFormat) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._url = url;\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n        const [name, value] = getUserAgentHeader();\r\n        const headers = { [name]: value, ...this._options.headers };\r\n        const pollOptions = {\r\n            abortSignal: this._pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this._options.withCredentials,\r\n        };\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n        const token = await this._getAccessToken();\r\n        this._updateHeaderToken(pollOptions, token);\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this._httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this._running = false;\r\n        }\r\n        else {\r\n            this._running = true;\r\n        }\r\n        this._receiving = this._poll(this._url, pollOptions);\r\n    }\r\n    async _getAccessToken() {\r\n        if (this._accessTokenFactory) {\r\n            return await this._accessTokenFactory();\r\n        }\r\n        return null;\r\n    }\r\n    _updateHeaderToken(request, token) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (token) {\r\n            request.headers[HeaderNames.Authorization] = `Bearer ${token}`;\r\n            return;\r\n        }\r\n        if (request.headers[HeaderNames.Authorization]) {\r\n            delete request.headers[HeaderNames.Authorization];\r\n        }\r\n    }\r\n    async _poll(url, pollOptions) {\r\n        try {\r\n            while (this._running) {\r\n                // We have to get the access token on each poll, in case it changes\r\n                const token = await this._getAccessToken();\r\n                this._updateHeaderToken(pollOptions, token);\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this._httpClient.get(pollUrl, pollOptions);\r\n                    if (response.statusCode === 204) {\r\n                        this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n                        this._running = false;\r\n                    }\r\n                    else if (response.statusCode !== 200) {\r\n                        this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n                        // Unexpected status code\r\n                        this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this._running = false;\r\n                    }\r\n                    else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._options.logMessageContent)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        }\r\n                        else {\r\n                            // This is another way timeout manifest.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    if (!this._running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    }\r\n                    else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                        else {\r\n                            // Close the connection with the error as the result.\r\n                            this._closeError = e;\r\n                            this._running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this._raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n    async send(data) {\r\n        if (!this._running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url, this._accessTokenFactory, data, this._options);\r\n    }\r\n    async stop() {\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this._running = false;\r\n        this._pollAbort.abort();\r\n        try {\r\n            await this._receiving;\r\n            // Send DELETE to clean up long polling on the server\r\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\r\n            const headers = {};\r\n            const [name, value] = getUserAgentHeader();\r\n            headers[name] = value;\r\n            const deleteOptions = {\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            };\r\n            const token = await this._getAccessToken();\r\n            this._updateHeaderToken(deleteOptions, token);\r\n            await this._httpClient.delete(this._url, deleteOptions);\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\r\n        }\r\n        finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this._raiseOnClose();\r\n        }\r\n    }\r\n    _raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this._closeError) {\r\n                logMessage += \" Error: \" + this._closeError;\r\n            }\r\n            this._logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this._closeError);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=LongPollingTransport.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform, sendMessage } from \"./Utils\";\r\n/** @private */\r\nexport class ServerSentEventsTransport {\r\n    constructor(httpClient, accessTokenFactory, logger, options) {\r\n        this._httpClient = httpClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logger = logger;\r\n        this._options = options;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    async connect(url, transferFormat) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\");\r\n        // set url before accessTokenFactory because this.url is only for send and we set the auth header instead of the query string for send\r\n        this._url = url;\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n                return;\r\n            }\r\n            let eventSource;\r\n            if (Platform.isBrowser || Platform.isWebWorker) {\r\n                eventSource = new this._options.EventSource(url, { withCredentials: this._options.withCredentials });\r\n            }\r\n            else {\r\n                // Non-browser passes cookies via the dictionary\r\n                const cookies = this._httpClient.getCookieString(url);\r\n                const headers = {};\r\n                headers.Cookie = cookies;\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n                eventSource = new this._options.EventSource(url, { withCredentials: this._options.withCredentials, headers: { ...headers, ...this._options.headers } });\r\n            }\r\n            try {\r\n                eventSource.onmessage = (e) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this._logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this._options.logMessageContent)}.`);\r\n                            this.onreceive(e.data);\r\n                        }\r\n                        catch (error) {\r\n                            this._close(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n                // @ts-ignore: not using event on purpose\r\n                eventSource.onerror = (e) => {\r\n                    // EventSource doesn't give any useful information about server side closes.\r\n                    if (opened) {\r\n                        this._close();\r\n                    }\r\n                    else {\r\n                        reject(new Error(\"EventSource failed to connect. The connection could not be found on the server,\"\r\n                            + \" either the connection ID is not present on the server, or a proxy is refusing/buffering the connection.\"\r\n                            + \" If you have multiple servers check that sticky sessions are enabled.\"));\r\n                    }\r\n                };\r\n                eventSource.onopen = () => {\r\n                    this._logger.log(LogLevel.Information, `SSE connected to ${this._url}`);\r\n                    this._eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n    async send(data) {\r\n        if (!this._eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"SSE\", this._httpClient, this._url, this._accessTokenFactory, data, this._options);\r\n    }\r\n    stop() {\r\n        this._close();\r\n        return Promise.resolve();\r\n    }\r\n    _close(e) {\r\n        if (this._eventSource) {\r\n            this._eventSource.close();\r\n            this._eventSource = undefined;\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=ServerSentEventsTransport.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform } from \"./Utils\";\r\n/** @private */\r\nexport class WebSocketTransport {\r\n    constructor(httpClient, accessTokenFactory, logger, logMessageContent, webSocketConstructor, headers) {\r\n        this._logger = logger;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logMessageContent = logMessageContent;\r\n        this._webSocketConstructor = webSocketConstructor;\r\n        this._httpClient = httpClient;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n        this._headers = headers;\r\n    }\r\n    async connect(url, transferFormat) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            let webSocket;\r\n            const cookies = this._httpClient.getCookieString(url);\r\n            let opened = false;\r\n            if (Platform.isNode) {\r\n                const headers = {};\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n                if (cookies) {\r\n                    headers[HeaderNames.Cookie] = `${cookies}`;\r\n                }\r\n                // Only pass headers when in non-browser environments\r\n                webSocket = new this._webSocketConstructor(url, undefined, {\r\n                    headers: { ...headers, ...this._headers },\r\n                });\r\n            }\r\n            if (!webSocket) {\r\n                // Chrome is not happy with passing 'undefined' as protocol\r\n                webSocket = new this._webSocketConstructor(url);\r\n            }\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n            webSocket.onopen = (_event) => {\r\n                this._logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\r\n                this._webSocket = webSocket;\r\n                opened = true;\r\n                resolve();\r\n            };\r\n            webSocket.onerror = (event) => {\r\n                let error = null;\r\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                    error = event.error;\r\n                }\r\n                else {\r\n                    error = \"There was an error with the transport\";\r\n                }\r\n                this._logger.log(LogLevel.Information, `(WebSockets transport) ${error}.`);\r\n            };\r\n            webSocket.onmessage = (message) => {\r\n                this._logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this._logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    try {\r\n                        this.onreceive(message.data);\r\n                    }\r\n                    catch (error) {\r\n                        this._close(error);\r\n                        return;\r\n                    }\r\n                }\r\n            };\r\n            webSocket.onclose = (event) => {\r\n                // Don't call close handler if connection was never established\r\n                // We'll reject the connect call instead\r\n                if (opened) {\r\n                    this._close(event);\r\n                }\r\n                else {\r\n                    let error = null;\r\n                    // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                    if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                        error = event.error;\r\n                    }\r\n                    else {\r\n                        error = \"WebSocket failed to connect. The connection could not be found on the server,\"\r\n                            + \" either the endpoint may not be a SignalR endpoint,\"\r\n                            + \" the connection ID is not present on the server, or there is a proxy blocking WebSockets.\"\r\n                            + \" If you have multiple servers check that sticky sessions are enabled.\";\r\n                    }\r\n                    reject(new Error(error));\r\n                }\r\n            };\r\n        });\r\n    }\r\n    send(data) {\r\n        if (this._webSocket && this._webSocket.readyState === this._webSocketConstructor.OPEN) {\r\n            this._logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this._logMessageContent)}.`);\r\n            this._webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n    stop() {\r\n        if (this._webSocket) {\r\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\r\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\r\n            this._close(undefined);\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _close(event) {\r\n        // webSocket will be null if the transport did not start successfully\r\n        if (this._webSocket) {\r\n            // Clear websocket handlers because we are considering the socket closed now\r\n            this._webSocket.onclose = () => { };\r\n            this._webSocket.onmessage = () => { };\r\n            this._webSocket.onerror = () => { };\r\n            this._webSocket.close();\r\n            this._webSocket = undefined;\r\n        }\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n        if (this.onclose) {\r\n            if (this._isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {\r\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason || \"no reason given\"}).`));\r\n            }\r\n            else if (event instanceof Error) {\r\n                this.onclose(event);\r\n            }\r\n            else {\r\n                this.onclose();\r\n            }\r\n        }\r\n    }\r\n    _isCloseEvent(event) {\r\n        return event && typeof event.wasClean === \"boolean\" && typeof event.code === \"number\";\r\n    }\r\n}\r\n//# sourceMappingURL=WebSocketTransport.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { AggregateErrors, DisabledTransportError, FailedToNegotiateWithServerError, FailedToStartTransportError, HttpError, UnsupportedTransportError } from \"./Errors\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\nconst MAX_REDIRECTS = 100;\r\n/** @private */\r\nexport class HttpConnection {\r\n    constructor(url, options = {}) {\r\n        this._stopPromiseResolver = () => { };\r\n        this.features = {};\r\n        this._negotiateVersion = 1;\r\n        Arg.isRequired(url, \"url\");\r\n        this._logger = createLogger(options.logger);\r\n        this.baseUrl = this._resolveUrl(url);\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\r\n        if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\r\n            options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\r\n        }\r\n        else {\r\n            throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\r\n        }\r\n        options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\r\n        let webSocketModule = null;\r\n        let eventSourceModule = null;\r\n        if (Platform.isNode && typeof require !== \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            webSocketModule = requireFunc(\"ws\");\r\n            eventSourceModule = requireFunc(\"eventsource\");\r\n        }\r\n        if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        }\r\n        else if (Platform.isNode && !options.WebSocket) {\r\n            if (webSocketModule) {\r\n                options.WebSocket = webSocketModule;\r\n            }\r\n        }\r\n        if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        }\r\n        else if (Platform.isNode && !options.EventSource) {\r\n            if (typeof eventSourceModule !== \"undefined\") {\r\n                options.EventSource = eventSourceModule;\r\n            }\r\n        }\r\n        this._httpClient = options.httpClient || new DefaultHttpClient(this._logger);\r\n        this._connectionState = \"Disconnected\" /* Disconnected */;\r\n        this._connectionStarted = false;\r\n        this._options = options;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    async start(transferFormat) {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n        if (this._connectionState !== \"Disconnected\" /* Disconnected */) {\r\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n        this._connectionState = \"Connecting\" /* Connecting */;\r\n        this._startInternalPromise = this._startInternal(transferFormat);\r\n        await this._startInternalPromise;\r\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\r\n        if (this._connectionState === \"Disconnecting\" /* Disconnecting */) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\r\n            await this._stopPromise;\r\n            return Promise.reject(new Error(message));\r\n        }\r\n        else if (this._connectionState !== \"Connected\" /* Connected */) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            return Promise.reject(new Error(message));\r\n        }\r\n        this._connectionStarted = true;\r\n    }\r\n    send(data) {\r\n        if (this._connectionState !== \"Connected\" /* Connected */) {\r\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\r\n        }\r\n        if (!this._sendQueue) {\r\n            this._sendQueue = new TransportSendQueue(this.transport);\r\n        }\r\n        // Transport will not be null if state is connected\r\n        return this._sendQueue.send(data);\r\n    }\r\n    async stop(error) {\r\n        if (this._connectionState === \"Disconnected\" /* Disconnected */) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n        if (this._connectionState === \"Disconnecting\" /* Disconnecting */) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n        this._connectionState = \"Disconnecting\" /* Disconnecting */;\r\n        this._stopPromise = new Promise((resolve) => {\r\n            // Don't complete stop() until stopConnection() completes.\r\n            this._stopPromiseResolver = resolve;\r\n        });\r\n        // stopInternal should never throw so just observe it.\r\n        await this._stopInternal(error);\r\n        await this._stopPromise;\r\n    }\r\n    async _stopInternal(error) {\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this._stopError = error;\r\n        try {\r\n            await this._startInternalPromise;\r\n        }\r\n        catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\r\n        // stop was called during start() and start() failed.\r\n        if (this.transport) {\r\n            try {\r\n                await this.transport.stop();\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\r\n                this._stopConnection();\r\n            }\r\n            this.transport = undefined;\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\r\n        }\r\n    }\r\n    async _startInternal(transferFormat) {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this._accessTokenFactory = this._options.accessTokenFactory;\r\n        try {\r\n            if (this._options.skipNegotiation) {\r\n                if (this._options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this._constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this._startTransport(url, transferFormat);\r\n                }\r\n                else {\r\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            }\r\n            else {\r\n                let negotiateResponse = null;\r\n                let redirects = 0;\r\n                do {\r\n                    negotiateResponse = await this._getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this._connectionState === \"Disconnecting\" /* Disconnecting */ || this._connectionState === \"Disconnected\" /* Disconnected */) {\r\n                        throw new Error(\"The connection was stopped during negotiation.\");\r\n                    }\r\n                    if (negotiateResponse.error) {\r\n                        throw new Error(negotiateResponse.error);\r\n                    }\r\n                    if (negotiateResponse.ProtocolVersion) {\r\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this._accessTokenFactory = () => accessToken;\r\n                    }\r\n                    redirects++;\r\n                } while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n                await this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\r\n            }\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n            if (this._connectionState === \"Connecting\" /* Connecting */) {\r\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\r\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\r\n                this._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\r\n                this._connectionState = \"Connected\" /* Connected */;\r\n            }\r\n            // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\r\n            // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\r\n            // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\r\n        }\r\n        catch (e) {\r\n            this._logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this._connectionState = \"Disconnected\" /* Disconnected */;\r\n            this.transport = undefined;\r\n            // if start fails, any active calls to stop assume that start will complete the stop promise\r\n            this._stopPromiseResolver();\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    async _getNegotiationResponse(url) {\r\n        const headers = {};\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                headers[HeaderNames.Authorization] = `Bearer ${token}`;\r\n            }\r\n        }\r\n        const [name, value] = getUserAgentHeader();\r\n        headers[name] = value;\r\n        const negotiateUrl = this._resolveNegotiateUrl(url);\r\n        this._logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this._httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            });\r\n            if (response.statusCode !== 200) {\r\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\r\n            }\r\n            const negotiateResponse = JSON.parse(response.content);\r\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\r\n                // Negotiate version 0 doesn't use connectionToken\r\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\r\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\r\n            }\r\n            return negotiateResponse;\r\n        }\r\n        catch (e) {\r\n            let errorMessage = \"Failed to complete negotiation with the server: \" + e;\r\n            if (e instanceof HttpError) {\r\n                if (e.statusCode === 404) {\r\n                    errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\r\n                }\r\n            }\r\n            this._logger.log(LogLevel.Error, errorMessage);\r\n            return Promise.reject(new FailedToNegotiateWithServerError(errorMessage));\r\n        }\r\n    }\r\n    _createConnectUrl(url, connectionToken) {\r\n        if (!connectionToken) {\r\n            return url;\r\n        }\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\r\n    }\r\n    async _createTransport(url, requestedTransport, negotiateResponse, requestedTransferFormat) {\r\n        let connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\r\n        if (this._isITransport(requestedTransport)) {\r\n            this._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this._startTransport(connectUrl, requestedTransferFormat);\r\n            this.connectionId = negotiateResponse.connectionId;\r\n            return;\r\n        }\r\n        const transportExceptions = [];\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        let negotiate = negotiateResponse;\r\n        for (const endpoint of transports) {\r\n            const transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat);\r\n            if (transportOrError instanceof Error) {\r\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\r\n                transportExceptions.push(`${endpoint.transport} failed:`);\r\n                transportExceptions.push(transportOrError);\r\n            }\r\n            else if (this._isITransport(transportOrError)) {\r\n                this.transport = transportOrError;\r\n                if (!negotiate) {\r\n                    try {\r\n                        negotiate = await this._getNegotiationResponse(url);\r\n                    }\r\n                    catch (ex) {\r\n                        return Promise.reject(ex);\r\n                    }\r\n                    connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\r\n                }\r\n                try {\r\n                    await this._startTransport(connectUrl, requestedTransferFormat);\r\n                    this.connectionId = negotiate.connectionId;\r\n                    return;\r\n                }\r\n                catch (ex) {\r\n                    this._logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\r\n                    negotiate = undefined;\r\n                    transportExceptions.push(new FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, HttpTransportType[endpoint.transport]));\r\n                    if (this._connectionState !== \"Connecting\" /* Connecting */) {\r\n                        const message = \"Failed to select transport before stop() was called.\";\r\n                        this._logger.log(LogLevel.Debug, message);\r\n                        return Promise.reject(new Error(message));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (transportExceptions.length > 0) {\r\n            return Promise.reject(new AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\r\n        }\r\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\r\n    }\r\n    _constructTransport(transport) {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this._options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent, this._options.WebSocket, this._options.headers || {});\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this._options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options);\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n    _startTransport(url, transferFormat) {\r\n        this.transport.onreceive = this.onreceive;\r\n        this.transport.onclose = (e) => this._stopConnection(e);\r\n        return this.transport.connect(url, transferFormat);\r\n    }\r\n    _resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat) {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this._logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        }\r\n        else {\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this._options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this._options.EventSource)) {\r\n                        this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                        return new UnsupportedTransportError(`'${HttpTransportType[transport]}' is not supported in your environment.`, transport);\r\n                    }\r\n                    else {\r\n                        this._logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        try {\r\n                            return this._constructTransport(transport);\r\n                        }\r\n                        catch (ex) {\r\n                            return ex;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                    return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\r\n                }\r\n            }\r\n            else {\r\n                this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n                return new DisabledTransportError(`'${HttpTransportType[transport]}' is disabled by the client.`, transport);\r\n            }\r\n        }\r\n    }\r\n    _isITransport(transport) {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n    _stopConnection(error) {\r\n        this._logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\r\n        this.transport = undefined;\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this._stopError || error;\r\n        this._stopError = undefined;\r\n        if (this._connectionState === \"Disconnected\" /* Disconnected */) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\r\n            return;\r\n        }\r\n        if (this._connectionState === \"Connecting\" /* Connecting */) {\r\n            this._logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\r\n            throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\r\n        }\r\n        if (this._connectionState === \"Disconnecting\" /* Disconnecting */) {\r\n            // A call to stop() induced this call to stopConnection and needs to be completed.\r\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\r\n            this._stopPromiseResolver();\r\n        }\r\n        if (error) {\r\n            this._logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n        if (this._sendQueue) {\r\n            this._sendQueue.stop().catch((e) => {\r\n                this._logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\r\n            });\r\n            this._sendQueue = undefined;\r\n        }\r\n        this.connectionId = undefined;\r\n        this._connectionState = \"Disconnected\" /* Disconnected */;\r\n        if (this._connectionStarted) {\r\n            this._connectionStarted = false;\r\n            try {\r\n                if (this.onclose) {\r\n                    this.onclose(error);\r\n                }\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n    _resolveUrl(url) {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n        if (!Platform.isBrowser || !window.document) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n        this._logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n    _resolveNegotiateUrl(url) {\r\n        const index = url.indexOf(\"?\");\r\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\r\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\r\n            negotiateUrl += \"/\";\r\n        }\r\n        negotiateUrl += \"negotiate\";\r\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\r\n        if (negotiateUrl.indexOf(\"negotiateVersion\") === -1) {\r\n            negotiateUrl += index === -1 ? \"?\" : \"&\";\r\n            negotiateUrl += \"negotiateVersion=\" + this._negotiateVersion;\r\n        }\r\n        return negotiateUrl;\r\n    }\r\n}\r\nfunction transportMatches(requestedTransport, actualTransport) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n/** @private */\r\nexport class TransportSendQueue {\r\n    constructor(_transport) {\r\n        this._transport = _transport;\r\n        this._buffer = [];\r\n        this._executing = true;\r\n        this._sendBufferedData = new PromiseSource();\r\n        this._transportResult = new PromiseSource();\r\n        this._sendLoopPromise = this._sendLoop();\r\n    }\r\n    send(data) {\r\n        this._bufferData(data);\r\n        if (!this._transportResult) {\r\n            this._transportResult = new PromiseSource();\r\n        }\r\n        return this._transportResult.promise;\r\n    }\r\n    stop() {\r\n        this._executing = false;\r\n        this._sendBufferedData.resolve();\r\n        return this._sendLoopPromise;\r\n    }\r\n    _bufferData(data) {\r\n        if (this._buffer.length && typeof (this._buffer[0]) !== typeof (data)) {\r\n            throw new Error(`Expected data to be of type ${typeof (this._buffer)} but was of type ${typeof (data)}`);\r\n        }\r\n        this._buffer.push(data);\r\n        this._sendBufferedData.resolve();\r\n    }\r\n    async _sendLoop() {\r\n        while (true) {\r\n            await this._sendBufferedData.promise;\r\n            if (!this._executing) {\r\n                if (this._transportResult) {\r\n                    this._transportResult.reject(\"Connection stopped.\");\r\n                }\r\n                break;\r\n            }\r\n            this._sendBufferedData = new PromiseSource();\r\n            const transportResult = this._transportResult;\r\n            this._transportResult = undefined;\r\n            const data = typeof (this._buffer[0]) === \"string\" ?\r\n                this._buffer.join(\"\") :\r\n                TransportSendQueue._concatBuffers(this._buffer);\r\n            this._buffer.length = 0;\r\n            try {\r\n                await this._transport.send(data);\r\n                transportResult.resolve();\r\n            }\r\n            catch (error) {\r\n                transportResult.reject(error);\r\n            }\r\n        }\r\n    }\r\n    static _concatBuffers(arrayBuffers) {\r\n        const totalLength = arrayBuffers.map((b) => b.byteLength).reduce((a, b) => a + b);\r\n        const result = new Uint8Array(totalLength);\r\n        let offset = 0;\r\n        for (const item of arrayBuffers) {\r\n            result.set(new Uint8Array(item), offset);\r\n            offset += item.byteLength;\r\n        }\r\n        return result.buffer;\r\n    }\r\n}\r\nclass PromiseSource {\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\r\n    }\r\n    resolve() {\r\n        this._resolver();\r\n    }\r\n    reject(reason) {\r\n        this._rejecter(reason);\r\n    }\r\n}\r\n//# sourceMappingURL=HttpConnection.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { MessageType } from \"./IHubProtocol\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nconst JSON_HUB_PROTOCOL_NAME = \"json\";\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol {\r\n    constructor() {\r\n        /** @inheritDoc */\r\n        this.name = JSON_HUB_PROTOCOL_NAME;\r\n        /** @inheritDoc */\r\n        this.version = 1;\r\n        /** @inheritDoc */\r\n        this.transferFormat = TransferFormat.Text;\r\n    }\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    parseMessages(input, logger) {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n        if (!input) {\r\n            return [];\r\n        }\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message);\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this._isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this._isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this._isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n        return hubMessages;\r\n    }\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    writeMessage(message) {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n    _isInvocationMessage(message) {\r\n        this._assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n        if (message.invocationId !== undefined) {\r\n            this._assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n    _isStreamItemMessage(message) {\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n    _isCompletionMessage(message) {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n        if (!message.result && message.error) {\r\n            this._assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n    _assertNotEmptyString(value, errorMessage) {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=JsonHubProtocol.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\nconst LogLevelNameMapping = {\r\n    trace: LogLevel.Trace,\r\n    debug: LogLevel.Debug,\r\n    info: LogLevel.Information,\r\n    information: LogLevel.Information,\r\n    warn: LogLevel.Warning,\r\n    warning: LogLevel.Warning,\r\n    error: LogLevel.Error,\r\n    critical: LogLevel.Critical,\r\n    none: LogLevel.None,\r\n};\r\nfunction parseLogLevel(name) {\r\n    // Case-insensitive matching via lower-casing\r\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\r\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\r\n    const mapping = LogLevelNameMapping[name.toLowerCase()];\r\n    if (typeof mapping !== \"undefined\") {\r\n        return mapping;\r\n    }\r\n    else {\r\n        throw new Error(`Unknown log level: ${name}`);\r\n    }\r\n}\r\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    configureLogging(logging) {\r\n        Arg.isRequired(logging, \"logging\");\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        }\r\n        else if (typeof logging === \"string\") {\r\n            const logLevel = parseLogLevel(logging);\r\n            this.logger = new ConsoleLogger(logLevel);\r\n        }\r\n        else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n        return this;\r\n    }\r\n    withUrl(url, transportTypeOrOptions) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isNotEmpty(url, \"url\");\r\n        this.url = url;\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = { ...this.httpConnectionOptions, ...transportTypeOrOptions };\r\n        }\r\n        else {\r\n            this.httpConnectionOptions = {\r\n                ...this.httpConnectionOptions,\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n        return this;\r\n    }\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    withHubProtocol(protocol) {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n    withAutomaticReconnect(retryDelaysOrReconnectPolicy) {\r\n        if (this.reconnectPolicy) {\r\n            throw new Error(\"A reconnectPolicy has already been set.\");\r\n        }\r\n        if (!retryDelaysOrReconnectPolicy) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy();\r\n        }\r\n        else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\r\n        }\r\n        else {\r\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\r\n        }\r\n        return this;\r\n    }\r\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\r\n    build() {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n        return HubConnection.create(connection, this.logger || NullLogger.instance, this.protocol || new JsonHubProtocol(), this.reconnectPolicy);\r\n    }\r\n}\r\nfunction isLogger(logger) {\r\n    return logger.log !== undefined;\r\n}\r\n//# sourceMappingURL=HubConnectionBuilder.js.map","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","// import * as signalR from \"@microsoft/signalr\";\r\n//   let hubConnection = new signalR.HubConnectionBuilder()\r\n//             .withUrl(\"https://localhost:44300/game\")\r\n//             .build();\r\n// \t\t\tconsole.log(hubConnection);\r\n\r\n//             hubConnection.on(\"FilledRoom\", function (data) {\r\n//                 console.log(\"fiiled room\");\r\n//                 isRoomFull = true;\r\n//                 setTimeout(() => {\r\n//                    isRoomFull = false;\r\n//                 }, 2000);\r\n//            });\r\n//            hubConnection.on(\"GoInRoom\", function (data) {\r\n//                 console.log(\"GoInRoom\");\r\n//                 navigateTo('lobby');\r\n//            });\r\n//            hubConnection.on(\"NotFoundRoom\", function (data) {\r\n//                 console.log(\"NotFoundRoom\");\r\n//                 isCodeWrong = true;\r\n//                 setTimeout(() => {\r\n//                    isCodeWrong = false;\r\n//                 }, 2000);\r\n                \r\n//            });\r\nimport * as signalR from \"@microsoft/signalr\"\r\nimport { writable } from \"svelte/store\";\r\n\r\nexport const roomCode = writable('nula');\r\nexport const HUB = writable('nula');\r\nexport const ID = writable('nula');","<script>\r\n    import {roomCode, HUB} from './signalr';\r\n\r\n    export let nomarg=0;\r\n    export let xp=-1;\r\n    export let type=\"n\";\r\n\r\n    let a, b;\r\n    !nomarg ? a = 'yemarg ' : a = 'nomarg ';\r\n    if(type == 0)\r\n    b = \" attack\";\r\n    else if(type == 1)\r\n    b = \" resources\";\r\n    else if(type == 2)\r\n    b = \" thief\";\r\n    else\r\n    b = \" sabotage\";\r\n\r\n\r\n    function moveCard(){\r\n        console.log(type)\r\n        $HUB.invoke(\"moveCard\", type, xp, $roomCode);\r\n    }\r\n</script>\r\n\r\n<!-- <div id=\"card\" on:click={moveCard} class=\"{[a,b]}\">\r\n    {#if type == 0}\r\n    <img src=\"./static/Attack.png\" alt=\"logo\"/>\r\n    {:else if type == 1}\r\n    <img src=\"./static/Resources.png\" alt=\"logo\"/>\r\n    {:else if type == 2}\r\n    <img src=\"./static/Thief.png\" alt=\"logo\"/>\r\n    {:else if type == 3}\r\n    <img src=\"./static/Sabotage.png\" alt=\"logo\"/>\r\n    {/if}\r\n    <h1>{type}</h1>\r\n    <p>{xp}</p>\r\n</div> -->\r\n\r\n\r\n{#if type == 0}\r\n<div id=\"card\" on:click={moveCard} class=\"{a} attack\">\r\n    <img src=\"./static/Attack.png\" alt=\"logo\"/>\r\n    <h1>{type}</h1>\r\n    <p>{xp}</p>\r\n</div>\r\n    {:else if type == 1}\r\n    <div id=\"card\" on:click={moveCard} class=\"{a} resources\">\r\n        <img src=\"./static/Resources.png\" alt=\"logo\"/>\r\n        <h1>{type}</h1>\r\n        <p>{xp}</p>\r\n    </div>\r\n    {:else if type == 2}\r\n    <div id=\"card\" on:click={moveCard} class=\"{a} thief\">\r\n        <img src=\"./static/Thief.png\" alt=\"logo\"/>\r\n        <h1>{type}</h1>\r\n        <p>{xp}</p>\r\n    </div>\r\n    {:else if type == 3}\r\n    <div id=\"card\" on:click={moveCard} class=\"{a} sabotage\">\r\n        <img src=\"./static/Sabotage.png\" alt=\"logo\"/>\r\n        <h1>{type}</h1>\r\n        <p>{xp}</p>\r\n    </div>\r\n    {/if}\r\n\r\n<style>\r\n    div {\r\n        background-color: #40454b;\r\n        height: 11em;\r\n        width: 7em;\r\n        border: 7px solid white;\r\n        border-radius: 15px;\r\n        transition: transform 0.2s ease-in-out;\r\n        display: inline-block;\r\n        text-align: center;\r\n    }\r\n\r\n    .attack{\r\n        border: 7px solid red;\r\n    }\r\n    .resources{\r\n        border: 7px solid yellow;\r\n    }\r\n    .thief{\r\n        border: 7px solid purple;\r\n    }\r\n\r\n    .sabotage{\r\n        border: 7px solid blue;\r\n    }\r\n\r\n\r\n    div:hover{\r\n        transform: translateY(-1em);\r\n        cursor: pointer;\r\n    }\r\n\r\n    img {\r\n        width: 90%;\r\n        margin-top: 1em;\r\n    }\r\n\r\n    h1 {\r\n        margin-top: 1em;\r\n        font-family: Roboto;\r\n        font-style: normal;\r\n        font-weight: normal;\r\n        font-size: 1em;\r\n        line-height: 14px;\r\n        color: white;\r\n    }\r\n\r\n    p {\r\n        font-family: 'Roboto';\r\n        font-style: normal;\r\n        font-weight: 500;\r\n        font-size: 1em;\r\n        line-height: 14px;\r\n        color: white;\r\n        margin-top: 0.6em;\r\n    }\r\n\r\n    .nomarg{\r\n        margin-left: 0em;\r\n    }\r\n    .yemarg{\r\n        margin-left: 2em;\r\n    }\r\n</style>\r\n","<script>\r\n    export let nomarg=0;\r\n    export let nick;\r\n    export let xp;\r\n    export let isMe;\r\n</script>\r\n\r\n<div id=\"df\" class={!nomarg ? 'yemarg' : 'nomarg'}>\r\n    <div id=\"box\" class=\"{isMe == true ? 'me': 'nme'}\">\r\n        <img src=\"./static/ava.png\" alt=\"ava\">\r\n    </div>\r\n    <h1>{nick}</h1>\r\n    <h2>{xp} XP</h2>    \r\n</div>\r\n\r\n<style>\r\n    #df {\r\n        margin-top: 1em;\r\n        width: max-content;\r\n        display: inline-block;\r\n        text-align: center;\r\n    }\r\n    #box {\r\n        margin-left: 50%;\r\n        transform: translateX(-50%);\r\n        width: 2em;\r\n        height: 2em;\r\n        background: #23272a;\r\n        \r\n        border-radius: 10px;\r\n       padding: 0.5em;\r\n    }\r\n\r\n    .me{\r\n        border: 5px solid #3ccc18;\r\n    }\r\n    .nme{\r\n        border: 5px solid #5865f2;\r\n    }\r\n    img{\r\n        width: 1.75em;\r\n        height: 1.75em;\r\n        text-align: center;\r\n        vertical-align: middle;\r\n    }\r\n\r\n    h1 {\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 500;\r\n        font-size: 1em;\r\n        line-height: 14px;\r\n        margin: 0%;\r\n        margin-top: 0.5em;\r\n        color: white;\r\n    }\r\n\r\n    h2 {\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 500;\r\n        font-size: 1.2em;\r\n        line-height: 1.5em;\r\n        margin: 0%;\r\n        margin-top: 0.25em;\r\n        color: white    ;\r\n    }\r\n\r\n    .nomarg{\r\n        margin-left: 0em;\r\n    }\r\n    .yemarg{\r\n        margin-left: 2.2em;\r\n    }\r\n\r\n    /* p {\r\n    font-family: \"Roboto\";\r\n    font-style: normal;\r\n    font-weight: 300;\r\n    font-size: 14px;\r\n    line-height: 24px;\r\n    color: #99aab5;\r\n    margin: 0%;\r\n    margin-top: 0px;\r\n    } */\r\n</style>\r\n","<p id=\"message\"> <i class=\"red\">Player1</i> attacked <i class=\"blue\">Player2</i> with Attack card</p>\r\n\r\n<style>\r\n     #message {\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 300;\r\n        font-size: 1em;\r\n        line-height: 20px;\r\n        float: left;\r\n        margin: 10px;\r\n        color: white;\r\n    }\r\n    i{\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 600;\r\n        font-size: 1em;\r\n        line-height: 14px; \r\n    }\r\n    .red{\r\n        color: red;\r\n    }\r\n    .blue{\r\n        color: blue;\r\n    }\r\n</style>","<script>\r\n    import Message from \"./Message.svelte\";\r\n\r\n    let visible=true;\r\n    function hide(){ visible=!visible; console.log(\"activated\");}\r\n</script>\r\n\r\n<div id=\"root\">\r\n    <h3>Chat:</h3>\r\n    <a href=\"#\" on:click={hide}>Hide</a>\r\n    <hr />\r\n    <div id=\"chatbox\" class={ visible ? '' : 'hide'}>\r\n        <Message />\r\n        <Message />\r\n        <Message />\r\n        <Message />\r\n        <Message />\r\n        <Message />\r\n        <Message />\r\n    </div>\r\n</div>\r\n\r\n<style>\r\n    #root {\r\n        margin-left: 0.75em;\r\n        margin-top: 0em;\r\n        width: max-content;\r\n    }\r\n\r\n    h3 {\r\n        margin-left: 0%;\r\n        width: max-content;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: normal;\r\n        font-size: 18px;\r\n        line-height: 14px;\r\n        color: white;\r\n        display: inline;\r\n    }\r\n\r\n    a {\r\n        margin-left: 1em;\r\n        color: white;\r\n    }\r\n\r\n    hr {\r\n        border: 0.1px solid black;\r\n        width: auto;\r\n    }\r\n    #chatbox {\r\n        -ms-overflow-style: none; \r\n        scrollbar-width: none; \r\n        overflow-y: scroll;\r\n        width: 17em;\r\n        height: 22em;\r\n    }\r\n    .hide{\r\n        visibility: hidden;\r\n    }\r\n    #chatbox::-webkit-scrollbar {\r\n        display: none;\r\n    }\r\n</style>\r\n","<script>\r\n    export let seconds=30;\r\n    export let yt=\"nil\";\r\n</script>\r\n\r\n<div>\r\n    <h1>{seconds} sec.</h1>\r\n    {#if yt == 'cur'}\r\n    <h2>Your turn</h2>\r\n     {:else if yt == 'nxt'}   \r\n     <h2>You're attacked</h2>\r\n     {:else}\r\n     <h2>wait</h2>\r\n    {/if}\r\n</div>\r\n\r\n<style>\r\n    div {\r\n        width: max-content;\r\n        margin-top: 0px;\r\n        margin-left: 50%;\r\n        transform: translateX(-50%);\r\n    }\r\n\r\n    h1 {\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 900;\r\n        font-size: 64px;\r\n        line-height: 48px;\r\n        color: white;\r\n    }\r\n    h2 {\r\n        margin-top: -0.5em;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 600;\r\n        font-size: 42px;\r\n        line-height: 48px;\r\n        color: greenyellow;\r\n    }\r\n  \r\n</style>\r\n","<script>\r\nexport let roomDeck=0;\r\n\r\n</script>\r\n\r\n<div>\r\n    <!-- <h3>turn 23</h3> -->\r\n    <img src=\"./static/Deck.png\" alt=\"deck\">\r\n    <p>{roomDeck} cards remains</p>\r\n</div>\r\n\r\n<style>\r\n    div {\r\n        width: max-content;\r\n        margin-top: 5em;\r\n    }\r\n\r\n    h3 {\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 500;\r\n        font-size: 36px;\r\n        line-height: 48px;\r\n        text-align: center;\r\n        color: white;\r\n    }\r\n    img{\r\n        margin-top: 0em;\r\n        width: 70%;\r\n        height: auto;\r\n        margin-left: 50%;\r\n        transform: translateX(-50%);\r\n    }\r\n    p{\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 500;\r\n        font-size: 33px;\r\n        line-height: 48px;\r\n        text-align: center;\r\n        margin-top: 0%;\r\n        color: white;\r\n    }\r\n</style>\r\n","import { writable } from 'svelte/store';\n\nconst { set, subscribe } = writable({});\n\nconst remove = () => {\n  set({});\n};\n\nconst activeRoute = {\n  subscribe,\n  set,\n  remove,\n};\n\nexport { activeRoute };\n","const UrlParser = (urlString, namedUrl = '') => {\n  const urlBase = new URL(urlString);\n\n  /**\n   * Wrapper for URL.hash\n   *\n   **/\n  function hash() {\n    return urlBase.hash;\n  }\n\n  /**\n   * Wrapper for URL.host\n   *\n   **/\n  function host() {\n    return urlBase.host;\n  }\n\n  /**\n   * Wrapper for URL.hostname\n   *\n   **/\n  function hostname() {\n    return urlBase.hostname;\n  }\n\n  /**\n   * Returns an object with all the named params and their values\n   *\n   **/\n  function namedParams() {\n    const allPathName = pathNames();\n    const allNamedParamsKeys = namedParamsWithIndex();\n\n    return allNamedParamsKeys.reduce((values, paramKey) => {\n      values[paramKey.value] = allPathName[paramKey.index];\n      return values;\n    }, {});\n  }\n\n  /**\n   * Returns an array with all the named param keys\n   *\n   **/\n  function namedParamsKeys() {\n    const allNamedParamsKeys = namedParamsWithIndex(namedUrl);\n\n    return allNamedParamsKeys.reduce((values, paramKey) => {\n      values.push(paramKey.value);\n      return values;\n    }, []);\n  }\n\n  /**\n   * Returns an array with all the named param values\n   *\n   **/\n  function namedParamsValues() {\n    const allPathName = pathNames();\n    const allNamedParamsKeys = namedParamsWithIndex();\n\n    return allNamedParamsKeys.reduce((values, paramKey) => {\n      values.push(allPathName[paramKey.index]);\n      return values;\n    }, []);\n  }\n\n  /**\n   * Returns an array with all named param ids and their position in the path\n   * Private\n   **/\n  function namedParamsWithIndex() {\n    const namedUrlParams = getPathNames(namedUrl);\n\n    return namedUrlParams.reduce((validParams, param, index) => {\n      if (param[0] === ':') {\n        validParams.push({ value: param.slice(1), index });\n      }\n      return validParams;\n    }, []);\n  }\n\n  /**\n   * Wrapper for URL.port\n   *\n   **/\n  function port() {\n    return urlBase.port;\n  }\n\n  /**\n   * Wrapper for URL.pathname\n   *\n   **/\n  function pathname() {\n    return urlBase.pathname;\n  }\n\n  /**\n   * Wrapper for URL.protocol\n   *\n   **/\n  function protocol() {\n    return urlBase.protocol;\n  }\n\n  /**\n   * Wrapper for URL.search\n   *\n   **/\n  function search() {\n    return urlBase.search;\n  }\n\n  /**\n   * Returns an object with all query params and their values\n   *\n   **/\n  function queryParams() {\n    const params = {};\n    urlBase.searchParams.forEach((value, key) => {\n      params[key] = value;\n    });\n\n    return params;\n  }\n\n  /**\n   * Returns an array with all the query param keys\n   *\n   **/\n  function queryParamsKeys() {\n    const params = [];\n    urlBase.searchParams.forEach((_value, key) => {\n      params.push(key);\n    });\n\n    return params;\n  }\n\n  /**\n   * Returns an array with all the query param values\n   *\n   **/\n  function queryParamsValues() {\n    const params = [];\n    urlBase.searchParams.forEach((value) => {\n      params.push(value);\n    });\n\n    return params;\n  }\n\n  /**\n   * Returns an array with all the elements of a pathname\n   *\n   **/\n  function pathNames() {\n    return getPathNames(urlBase.pathname);\n  }\n\n  /**\n   * Returns an array with all the parts of a pathname\n   * Private method\n   **/\n  function getPathNames(pathName) {\n    if (pathName === '/' || pathName.trim().length === 0) return [pathName];\n    if (pathName.slice(-1) === '/') {\n      pathName = pathName.slice(0, -1);\n    }\n    if (pathName[0] === '/') {\n      pathName = pathName.slice(1);\n    }\n\n    return pathName.split('/');\n  }\n\n  return Object.freeze({\n    hash: hash(),\n    host: host(),\n    hostname: hostname(),\n    namedParams: namedParams(),\n    namedParamsKeys: namedParamsKeys(),\n    namedParamsValues: namedParamsValues(),\n    pathNames: pathNames(),\n    port: port(),\n    pathname: pathname(),\n    protocol: protocol(),\n    search: search(),\n    queryParams: queryParams(),\n    queryParamsKeys: queryParamsKeys(),\n    queryParamsValues: queryParamsValues(),\n  });\n};\n\nexport { UrlParser };\n","/**\n * Returns true if object has any nested routes empty\n * @param routeObject\n **/\nconst anyEmptyNestedRoutes = (routeObject) => {\n  let result = false;\n  if (Object.keys(routeObject).length === 0) {\n    return true;\n  }\n\n  if (routeObject.childRoute && Object.keys(routeObject.childRoute).length === 0) {\n    result = true;\n  } else if (routeObject.childRoute) {\n    result = anyEmptyNestedRoutes(routeObject.childRoute);\n  }\n\n  return result;\n};\n\n/**\n * Compare two routes ignoring named params\n * @param pathName string\n * @param routeName string\n **/\n\nconst compareRoutes = (pathName, routeName) => {\n  routeName = removeSlash(routeName);\n\n  if (routeName.includes(':')) {\n    return routeName.includes(pathName);\n  } else {\n    return routeName.startsWith(pathName);\n  }\n};\n\n/**\n * Returns a boolean indicating if the name of path exists in the route based on the language parameter\n * @param pathName string\n * @param route object\n * @param language string\n **/\n\nconst findLocalisedRoute = (pathName, route, language) => {\n  let exists = false;\n\n  if (language) {\n    return { exists: route.lang && route.lang[language] && route.lang[language].includes(pathName), language };\n  }\n\n  exists = compareRoutes(pathName, route.name);\n\n  if (!exists && route.lang && typeof route.lang === 'object') {\n    for (const [key, value] of Object.entries(route.lang)) {\n      if (compareRoutes(pathName, value)) {\n        exists = true;\n        language = key;\n      }\n    }\n  }\n\n  return { exists, language };\n};\n\n/**\n * Return all the consecutive named param (placeholders) of a pathname\n * @param pathname\n **/\nconst getNamedParams = (pathName = '') => {\n  if (pathName.trim().length === 0) return [];\n  const namedUrlParams = getPathNames(pathName);\n  return namedUrlParams.reduce((validParams, param) => {\n    if (param[0] === ':') {\n      validParams.push(param.slice(1));\n    }\n\n    return validParams;\n  }, []);\n};\n\n/**\n * Split a pathname based on /\n * @param pathName\n * Private method\n **/\nconst getPathNames = (pathName) => {\n  if (pathName === '/' || pathName.trim().length === 0) return [pathName];\n\n  pathName = removeSlash(pathName, 'both');\n\n  return pathName.split('/');\n};\n\n/**\n * Return the first part of a pathname until the first named param is found\n * @param name\n **/\nconst nameToPath = (name = '') => {\n  let routeName;\n  if (name === '/' || name.trim().length === 0) return name;\n  name = removeSlash(name, 'lead');\n  routeName = name.split(':')[0];\n  routeName = removeSlash(routeName, 'trail');\n\n  return routeName.toLowerCase();\n};\n\n/**\n * Return the path name excluding query params\n * @param name\n **/\nconst pathWithoutQueryParams = (currentRoute) => {\n  const path = currentRoute.path.split('?');\n  return path[0];\n};\n\n/**\n * Return the path name including query params\n * @param name\n **/\nconst pathWithQueryParams = (currentRoute) => {\n  let queryParams = [];\n  if (currentRoute.queryParams) {\n    for (let [key, value] of Object.entries(currentRoute.queryParams)) {\n      queryParams.push(`${key}=${value}`);\n    }\n  }\n\n  const hash = currentRoute.hash ? currentRoute.hash : '';\n\n  if (queryParams.length > 0) {\n    return `${currentRoute.path}?${queryParams.join('&')}${hash}`;\n  } else {\n    return currentRoute.path + hash;\n  }\n};\n\n/**\n * Returns a string with trailing or leading slash character removed\n * @param pathName string\n * @param position string - lead, trail, both\n **/\nconst removeExtraPaths = (pathNames, basePathNames) => {\n  const names = basePathNames.split('/');\n  if (names.length > 1) {\n    names.forEach(function (name, index) {\n      if (name.length > 0 && index > 0) {\n        pathNames.shift();\n      }\n    });\n  }\n\n  return pathNames;\n};\n\n/**\n * Returns a string with trailing or leading slash character removed\n * @param pathName string\n * @param position string - lead, trail, both\n **/\n\nconst removeSlash = (pathName, position = 'lead') => {\n  if (position === 'trail' || position === 'both') {\n    pathName = pathName.replace(/\\/$/, '');\n  }\n\n  if (position === 'lead' || position === 'both') {\n    pathName = pathName.replace(/^\\//, '');\n  }\n\n  return pathName;\n};\n\n/**\n * Returns the name of the route based on the language parameter\n * @param route object\n * @param language string\n **/\n\nconst routeNameLocalised = (route, language = null) => {\n  if (!language || !route.lang || !route.lang[language]) {\n    return route.name;\n  } else {\n    return route.lang[language];\n  }\n};\n\n/**\n * Return the path name excluding query params\n * @param name\n **/\nconst startsWithNamedParam = (currentRoute) => {\n  const routeName = removeSlash(currentRoute);\n\n  return routeName.startsWith(':');\n};\n\n/**\n * Updates the base route path.\n * Route objects can have nested routes (childRoutes) or just a long name like \"admin/employees/show/:id\"\n *\n * @param basePath string\n * @param pathNames array\n * @param route object\n * @param language string\n **/\n\nconst updateRoutePath = (basePath, pathNames, route, language, convert = false) => {\n  if (basePath === '/' || basePath.trim().length === 0) return { result: basePath, language: null };\n\n  let basePathResult = basePath;\n  let routeName = route.name;\n  let currentLanguage = language;\n\n  if (convert) {\n    currentLanguage = '';\n  }\n\n  routeName = removeSlash(routeName);\n  basePathResult = removeSlash(basePathResult);\n\n  if (!route.childRoute) {\n    let localisedRoute = findLocalisedRoute(basePathResult, route, currentLanguage);\n\n    if (localisedRoute.exists && convert) {\n      basePathResult = routeNameLocalised(route, language);\n    }\n\n    let routeNames = routeName.split(':')[0];\n    routeNames = removeSlash(routeNames, 'trail');\n    routeNames = routeNames.split('/');\n    routeNames.shift();\n    routeNames.forEach(() => {\n      const currentPathName = pathNames[0];\n      localisedRoute = findLocalisedRoute(`${basePathResult}/${currentPathName}`, route, currentLanguage);\n\n      if (currentPathName && localisedRoute.exists) {\n        if (convert) {\n          basePathResult = routeNameLocalised(route, language);\n        } else {\n          basePathResult = `${basePathResult}/${currentPathName}`;\n        }\n        pathNames.shift();\n      } else {\n        return { result: basePathResult, language: localisedRoute.language };\n      }\n    });\n    return { result: basePathResult, language: localisedRoute.language };\n  } else {\n    return { result: basePath, language: currentLanguage };\n  }\n};\n\nexport {\n  anyEmptyNestedRoutes,\n  compareRoutes,\n  findLocalisedRoute,\n  getNamedParams,\n  getPathNames,\n  nameToPath,\n  pathWithQueryParams,\n  pathWithoutQueryParams,\n  removeExtraPaths,\n  removeSlash,\n  routeNameLocalised,\n  startsWithNamedParam,\n  updateRoutePath,\n};\n","import { UrlParser } from './url_parser';\n\nimport { pathWithQueryParams, removeSlash } from '../lib/utils';\n\nconst RouterCurrent = (trackPage) => {\n  const trackPageview = trackPage || false;\n  let activeRoute = '';\n\n  const setActive = (newRoute, updateBrowserHistory) => {\n    activeRoute = newRoute.path;\n    pushActiveRoute(newRoute, updateBrowserHistory);\n  };\n\n  const active = () => {\n    return activeRoute;\n  };\n\n  /**\n   * Returns true if pathName is current active route\n   * @param pathName String The path name to check against the current route.\n   * @param includePath Boolean if true checks that pathName is included in current route. If false should match it.\n   **/\n  const isActive = (queryPath, includePath = false) => {\n    if (queryPath[0] !== '/') {\n      queryPath = '/' + queryPath;\n    }\n\n    // remove query params for comparison\n    let pathName = UrlParser(`http://fake.com${queryPath}`).pathname;\n    let activeRoutePath = UrlParser(`http://fake.com${activeRoute}`).pathname;\n\n    pathName = removeSlash(pathName, 'trail');\n\n    activeRoutePath = removeSlash(activeRoutePath, 'trail');\n\n    if (includePath) {\n      return activeRoutePath.includes(pathName);\n    } else {\n      return activeRoutePath === pathName;\n    }\n  };\n\n  const pushActiveRoute = (newRoute, updateBrowserHistory) => {\n    if (typeof window !== 'undefined') {\n      const pathAndSearch = pathWithQueryParams(newRoute);\n\n      if (updateBrowserHistory) {\n        window.history.pushState({ page: pathAndSearch }, '', pathAndSearch);\n      }\n      // Moving back in history does not update browser history but does update tracking.\n      if (trackPageview) {\n        gaTracking(pathAndSearch);\n      }\n    }\n  };\n\n  const gaTracking = (newPage) => {\n    if (typeof ga !== 'undefined') {\n      ga('set', 'page', newPage);\n      ga('send', 'pageview');\n    }\n  };\n\n  return Object.freeze({ active, isActive, setActive });\n};\n\nexport { RouterCurrent };\n","import { RouterGuard } from './guard';\n\nconst RouterRedirect = (route, currentPath) => {\n  const guard = RouterGuard(route.onlyIf);\n\n  const path = () => {\n    let redirectTo = currentPath;\n    if (route.redirectTo && route.redirectTo.length > 0) {\n      redirectTo = route.redirectTo;\n    }\n\n    if (guard.valid() && guard.redirect()) {\n      redirectTo = guard.redirectPath();\n    }\n\n    return redirectTo;\n  };\n\n  return Object.freeze({ path });\n};\n\nexport { RouterRedirect };\n","export const RouterGuard = (onlyIf) => {\n  const guardInfo = onlyIf;\n\n  const valid = () => {\n    return guardInfo && guardInfo.guard && typeof guardInfo.guard === 'function';\n  };\n\n  const redirect = () => {\n    return !guardInfo.guard();\n  };\n\n  const redirectPath = () => {\n    let destinationUrl = '/';\n    if (guardInfo.redirect && guardInfo.redirect.length > 0) {\n      destinationUrl = guardInfo.redirect;\n    }\n\n    return destinationUrl;\n  };\n\n  return Object.freeze({ valid, redirect, redirectPath });\n};\n","import {\n  getNamedParams,\n  nameToPath,\n  updateRoutePath,\n  removeExtraPaths,\n  routeNameLocalised\n} from '../lib/utils';\n\nfunction RouterPath({ basePath, basePathName, pathNames, convert, currentLanguage }) {\n  let updatedPathRoute;\n  let route;\n  let routePathLanguage = currentLanguage;\n\n  function updatedPath(currentRoute) {\n    route = currentRoute;\n    updatedPathRoute = updateRoutePath(basePathName, pathNames, route, routePathLanguage, convert);\n    routePathLanguage = convert ? currentLanguage : updatedPathRoute.language;\n\n    return updatedPathRoute;\n  }\n\n  function localisedPathName() {\n    return routeNameLocalised(route, routePathLanguage);\n  }\n\n  function localisedRouteWithoutNamedParams() {\n    return nameToPath(localisedPathName());\n  }\n\n  function basePathNameWithoutNamedParams() {\n    return nameToPath(updatedPathRoute.result);\n  }\n\n  function namedPath() {\n    let localisedPath = localisedPathName();\n    if (localisedPath && !localisedPath.startsWith('/')) {\n      localisedPath = '/' + localisedPath;\n    }\n\n    return basePath ? `${basePath}${localisedPath}` : localisedPath;\n  }\n\n  function routePath() {\n    let routePathValue = `${basePath}/${basePathNameWithoutNamedParams()}`;\n    if (routePathValue === '//') {\n      routePathValue = '/';\n    }\n\n    if (routePathLanguage) {\n      pathNames = removeExtraPaths(pathNames, localisedRouteWithoutNamedParams());\n    }\n\n    const namedParams = getNamedParams(localisedPathName());\n    if (namedParams && namedParams.length > 0) {\n      namedParams.forEach(function () {\n        if (pathNames.length > 0) {\n          routePathValue += `/${pathNames.shift()}`;\n        }\n      });\n    }\n\n    return routePathValue;\n  }\n\n  function routeLanguage() {\n    return routePathLanguage;\n  }\n\n  function basePathSameAsLocalised() {\n    return basePathNameWithoutNamedParams() === localisedRouteWithoutNamedParams();\n  }\n\n  return Object.freeze({\n    basePathSameAsLocalised,\n    updatedPath,\n    basePathNameWithoutNamedParams,\n    localisedPathName,\n    localisedRouteWithoutNamedParams,\n    namedPath,\n    pathNames,\n    routeLanguage,\n    routePath,\n  });\n}\n\nexport { RouterPath };\n","import { UrlParser } from './url_parser';\nimport { RouterRedirect } from './redirect';\nimport { RouterRoute } from './route';\nimport { RouterPath } from './path';\nimport { anyEmptyNestedRoutes, pathWithoutQueryParams, startsWithNamedParam } from '../lib/utils';\n\nconst NotFoundPage = '/404.html';\n\nfunction RouterFinder({ routes, currentUrl, routerOptions, convert }) {\n  const defaultLanguage = routerOptions.defaultLanguage;\n  const sitePrefix = routerOptions.prefix ? routerOptions.prefix.toLowerCase() : '';\n  const urlParser = parseCurrentUrl(currentUrl, sitePrefix);\n  let redirectTo = '';\n  let routeNamedParams = {};\n  let staticParamMatch = false;\n\n  function findActiveRoute() {\n    let searchActiveRoute = searchActiveRoutes(routes, '', urlParser.pathNames, routerOptions.lang, convert);\n\n    if (!searchActiveRoute || !Object.keys(searchActiveRoute).length || anyEmptyNestedRoutes(searchActiveRoute)) {\n      if (typeof window !== 'undefined') {\n        searchActiveRoute = routeNotFound(routerOptions.lang);\n      }\n    } else {\n      searchActiveRoute.path = pathWithoutQueryParams(searchActiveRoute);\n      if (sitePrefix) {\n        searchActiveRoute.path = `/${sitePrefix}${searchActiveRoute.path}`;\n      }\n    }\n\n    return searchActiveRoute;\n  }\n\n  /**\n   * Gets an array of routes and the browser pathname and return the active route\n   * @param routes\n   * @param basePath\n   * @param pathNames\n   **/\n  function searchActiveRoutes(routes, basePath, pathNames, currentLanguage, convert) {\n    let currentRoute = {};\n    let basePathName = pathNames.shift().toLowerCase();\n    const routerPath = RouterPath({ basePath, basePathName, pathNames, convert, currentLanguage });\n    staticParamMatch = false;\n\n    routes.forEach(function (route) {\n      routerPath.updatedPath(route);\n\n      if (matchRoute(routerPath, route.name)) {\n        let routePath = routerPath.routePath();\n        redirectTo = RouterRedirect(route, redirectTo).path();\n\n        if (currentRoute.name !== routePath) {\n          currentRoute = setCurrentRoute({\n            route,\n            routePath,\n            routeLanguage: routerPath.routeLanguage(),\n            urlParser,\n            namedPath: routerPath.namedPath(),\n          });\n        }\n\n        if (route.nestedRoutes && route.nestedRoutes.length > 0 && routerPath.pathNames.length > 0) {\n          currentRoute.childRoute = searchActiveRoutes(\n            route.nestedRoutes,\n            routePath,\n            routerPath.pathNames,\n            routerPath.routeLanguage(),\n            convert\n          );\n          currentRoute.path = currentRoute.childRoute.path;\n          currentRoute.language = currentRoute.childRoute.language;\n        } else if (nestedRoutesAndNoPath(route, routerPath.pathNames)) {\n          const indexRoute = searchActiveRoutes(\n            route.nestedRoutes,\n            routePath,\n            ['index'],\n            routerPath.routeLanguage(),\n            convert\n          );\n          if (indexRoute && Object.keys(indexRoute).length > 0) {\n            currentRoute.childRoute = indexRoute;\n            currentRoute.language = currentRoute.childRoute.language;\n          }\n        }\n      }\n    });\n\n    if (redirectTo) {\n      currentRoute.redirectTo = redirectTo;\n    }\n\n    return currentRoute;\n  }\n\n  function matchRoute(routerPath, routeName) {\n    const basePathSameAsLocalised = routerPath.basePathSameAsLocalised();\n    if (basePathSameAsLocalised) {\n      staticParamMatch = true;\n    }\n\n    return basePathSameAsLocalised || (!staticParamMatch && startsWithNamedParam(routeName));\n  }\n\n  function nestedRoutesAndNoPath(route, pathNames) {\n    return route.nestedRoutes && route.nestedRoutes.length > 0 && pathNames.length === 0;\n  }\n\n  function parseCurrentUrl(currentUrl, sitePrefix) {\n    if (sitePrefix && sitePrefix.trim().length > 0) {\n      const replacePattern = currentUrl.endsWith(sitePrefix) ? sitePrefix : sitePrefix + \"/\";\n      const noPrefixUrl = currentUrl.replace(replacePattern, '');\n      return UrlParser(noPrefixUrl);\n    } else {\n      return UrlParser(currentUrl);\n    }\n  }\n\n  function setCurrentRoute({ route, routePath, routeLanguage, urlParser, namedPath }) {\n    const routerRoute = RouterRoute({\n      routeInfo: route,\n      urlParser,\n      path: routePath,\n      routeNamedParams,\n      namedPath,\n      language: routeLanguage || defaultLanguage,\n    });\n    routeNamedParams = routerRoute.namedParams();\n\n    return routerRoute.get();\n  }\n\n  const routeNotFound = (customLanguage) => {\n    const custom404Page = routes.find((route) => route.name == '404');\n    const language = customLanguage || defaultLanguage || '';\n    if (custom404Page) {\n      return { ...custom404Page, language, path: '404' };\n    } else {\n      return { name: '404', component: '', path: '404', redirectTo: NotFoundPage };\n    }\n  };\n\n  return Object.freeze({ findActiveRoute });\n}\n\nexport { RouterFinder };\n","import { UrlParser } from './url_parser';\n\nfunction RouterRoute({ routeInfo, path, routeNamedParams, urlParser, namedPath, language }) {\n  const namedParams = () => {\n    const parsedParams = UrlParser(`https://fake.com${urlParser.pathname}`, namedPath).namedParams;\n\n    return { ...routeNamedParams, ...parsedParams };\n  };\n\n  const get = () => {\n    return {\n      name: path,\n      component: routeInfo.component,\n      hash: urlParser.hash,\n      layout: routeInfo.layout,\n      queryParams: urlParser.queryParams,\n      namedParams: namedParams(),\n      path,\n      language,\n    };\n  };\n\n  return Object.freeze({ get, namedParams });\n}\n\nexport { RouterRoute };\n","import { activeRoute } from './store';\nimport { RouterCurrent } from './router/current';\nimport { RouterFinder } from './router/finder';\nimport { removeSlash } from './lib/utils';\n\nconst NotFoundPage = '/404.html';\n\nlet userDefinedRoutes = [];\nlet routerOptions = {};\nlet routerCurrent;\n\n/**\n * Object exposes one single property: activeRoute\n * @param routes  Array of routes\n * @param currentUrl current url\n * @param options configuration options\n **/\nconst SpaRouter = (routes, currentUrl, options = {}) => {\n  routerOptions = { ...options };\n  if (typeof currentUrl === 'undefined' || currentUrl === '') {\n    currentUrl = document.location.href;\n  }\n\n  routerCurrent = RouterCurrent(routerOptions.gaPageviews);\n\n  currentUrl = removeSlash(currentUrl, 'trail');\n  userDefinedRoutes = routes;\n\n  const findActiveRoute = () => {\n    let convert = false;\n\n    if (routerOptions.langConvertTo) {\n      routerOptions.lang = routerOptions.langConvertTo;\n      convert = true;\n    }\n\n    return RouterFinder({ routes, currentUrl, routerOptions, convert }).findActiveRoute();\n  };\n\n  /**\n   * Redirect current route to another\n   * @param destinationUrl\n   **/\n  const navigateNow = (destinationUrl, updateBrowserHistory) => {\n    if (typeof window !== 'undefined') {\n      if (destinationUrl === NotFoundPage) {\n        routerCurrent.setActive({ path: NotFoundPage }, updateBrowserHistory);\n      } else {\n        navigateTo(destinationUrl);\n      }\n    }\n\n    return destinationUrl;\n  };\n\n  const setActiveRoute = (updateBrowserHistory = true) => {\n    const currentRoute = findActiveRoute();\n    if (currentRoute.redirectTo) {\n      return navigateNow(currentRoute.redirectTo, updateBrowserHistory);\n    }\n\n    routerCurrent.setActive(currentRoute, updateBrowserHistory);\n    activeRoute.set(currentRoute);\n\n    return currentRoute;\n  };\n\n  return Object.freeze({\n    setActiveRoute,\n    findActiveRoute,\n  });\n};\n\n/**\n * Converts a route to its localised version\n * @param pathName\n **/\nconst localisedRoute = (pathName, language) => {\n  pathName = removeSlash(pathName, 'lead');\n  routerOptions.langConvertTo = language;\n\n  return SpaRouter(userDefinedRoutes, 'http://fake.com/' + pathName, routerOptions).findActiveRoute();\n};\n\n/**\n * Updates the current active route and updates the browser pathname\n * @param pathName String\n * @param language String\n * @param updateBrowserHistory Boolean\n **/\nconst navigateTo = (pathName, language = null, updateBrowserHistory = true) => {\n  pathName = removeSlash(pathName, 'lead');\n\n  if (language) {\n    routerOptions.langConvertTo = language;\n  }\n\n  return SpaRouter(userDefinedRoutes, 'http://fake.com/' + pathName, routerOptions).setActiveRoute(\n    updateBrowserHistory\n  );\n};\n\n/**\n * Returns true if pathName is current active route\n * @param pathName String The path name to check against the current route.\n * @param includePath Boolean if true checks that pathName is included in current route. If false should match it.\n **/\nconst routeIsActive = (queryPath, includePath = false) => {\n  return routerCurrent.isActive(queryPath, includePath);\n};\n\nif (typeof window !== 'undefined') {\n  // Avoid full page reload on local routes\n  window.addEventListener('click', (event) => {\n    if (event.target.localName.toLowerCase() !== 'a') return;\n    if (event.metaKey || event.ctrlKey || event.shiftKey) return;\n\n    const sitePrefix = routerOptions.prefix ? `/${routerOptions.prefix.toLowerCase()}` : '';\n    const targetHostNameInternal = event.target.pathname && event.target.host === window.location.host;\n    const prefixMatchPath = sitePrefix.length > 1 ? event.target.pathname.startsWith(sitePrefix) : true;\n\n    if (targetHostNameInternal && prefixMatchPath) {\n      event.preventDefault();\n      let navigatePathname = event.target.pathname + event.target.search;\n\n      const destinationUrl = navigatePathname + event.target.search + event.target.hash;\n      if (event.target.target === '_blank') {\n        window.open(destinationUrl, 'newTab');\n      } else {\n        navigateTo(destinationUrl);\n      }\n    }\n  });\n\n  window.onpopstate = function (_event) {\n    let navigatePathname = window.location.pathname + window.location.search + window.location.hash;\n\n    navigateTo(navigatePathname, null, false);\n  };\n}\n\nexport { SpaRouter, localisedRoute, navigateTo, routeIsActive };\n","<script>\n  export let currentRoute = {};\n  export let params = {};\n</script>\n\n{#if currentRoute.layout}\n  <svelte:component this={currentRoute.layout} currentRoute={{ ...currentRoute, layout: '' }} {params} />\n{:else if currentRoute.component}\n  <svelte:component this={currentRoute.component} currentRoute={{ ...currentRoute, component: '' }} {params} />\n{:else if currentRoute.childRoute}\n  <svelte:self currentRoute={currentRoute.childRoute} {params} />\n{/if}\n","<script>\n  import { onMount } from 'svelte';\n\n  import { SpaRouter } from '../spa_router';\n  import Route from './route.svelte';\n  import { activeRoute } from '../store';\n\n  export let routes = [];\n  export let options = {};\n\n  onMount(() => {\n    SpaRouter(routes, document.location.href, options).setActiveRoute();\n  });\n</script>\n\n<Route currentRoute={$activeRoute} />\n","<script>\r\n    export let nick;\r\n    export let isReady=false;\r\n</script>\r\n\r\n<div id=\"root\">\r\n    <div id=\"box\">\r\n        <img src=\"./static/ava.png\" alt=\"ava\" />\r\n    </div>  \r\n    <h3>{nick}</h3>\r\n    {#if isReady == true}\r\n    <p>ready</p>\r\n    {/if}\r\n</div>\r\n\r\n<style>\r\n    #root {\r\n        width: 92%;\r\n        padding: 0.5em;\r\n        padding-left: 1em;\r\n        padding-top: 1em;\r\n    }\r\n    #box {\r\n        outline: 2px solid blue;\r\n        border-radius: 10px;\r\n        width: max-content;\r\n        padding: 0.5em;\r\n        height: max-content;\r\n        display: inline-block;\r\n    }\r\n    img {\r\n        width: 2.2em;\r\n        height: 2.2em;\r\n        margin-left: 50%;\r\n        transform: translateX(-50%);\r\n        margin-top: 0.1em;\r\n    }\r\n    h3 {\r\n        display: inline-block;\r\n        color: white;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 600;\r\n        font-size: 18px;\r\n        line-height: 14px;\r\n        margin-left: 0.5em;\r\n        transform: translateY(-1em);\r\n    }\r\n    P{\r\n        display: inline-block;\r\n        color: greenyellow;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 300;\r\n        font-size: 15px;\r\n        line-height: 14px;\r\n        margin-left: -3.5em;\r\n    }\r\n</style>\r\n","<script>\r\n    import ConnectedUser from \"./ConnectedUser.svelte\";\r\n    import { onMount } from 'svelte';\r\n    import {roomCode, HUB} from './signalr';\r\n    import { navigateTo } from \"svelte-router-spa\";\r\n    import * as signalR from \"@microsoft/signalr\";\r\n    // let hubConnection = new signalR.HubConnectionBuilder()\r\n    //         .withUrl(\"https://localhost:44300/game\")\r\n    //         .build();\r\n\t// \t\tconsole.log(\"lobby\");\r\n    onMount(() => gpir())\r\n    let playersInRoom=[];\r\n    $HUB.on(\"roomPlayers\", function (data) {\r\n         console.log(\"refreshRoomData\");\r\n         playersInRoom = data;\r\n         console.log(data[0]);\r\n         if(playersInRoom.length>=2)\r\n         var go = true;\r\n         for(var i=0;i<playersInRoom.length;i++)\r\n         if(playersInRoom[i].isReady == false)\r\n              go = false\r\n            console.log(go + ' go');\r\n            if(go)\r\n            navigateTo('play');\r\n    });\r\n    console.log('constructor '+$roomCode);\r\n    let nick ='';\r\n\r\n\r\n    function gpir(){\r\n        console.log('getPlayersInRoommount '+$roomCode);\r\n\t\t$HUB.invoke('getPlayersInRoom', $roomCode);\r\n    }\r\n    function changeNick(){\r\n        console.log('changenick '+$roomCode);\r\n\t\t$HUB.invoke('changeNick',  $roomCode, nick);\r\n    }\r\n</script>\r\n\r\n<main>\r\n    <div id=\"lobby\">\r\n        <div id=\"col1\">\r\n            {#each playersInRoom as item }\r\n            <ConnectedUser nick={item.nick} isReady={item.isReady}/>\r\n            {/each}\r\n        </div>\r\n        <div id=\"col2\">\r\n            <h3>{$roomCode}</h3>\r\n            <p>LOBBY CODE</p>\r\n            <input type=\"text\" placeholder=\"Enter nick\" bind:value={nick} id=\"input-code\" />\r\n            <input\r\n                type=\"button\"\r\n                id=\"input-create\"\r\n                value=\"Ready\"\r\n               on:click={changeNick}\r\n            />\r\n        </div>\r\n    </div>\r\n</main>\r\n\r\n<style>\r\n    main {\r\n        height: 100%;\r\n        width: 100%;\r\n        margin: 0%;\r\n        background-color: #2c2f33;\r\n        position: fixed;\r\n    }\r\n    #lobby {\r\n        margin-left: 50%;\r\n        transform: translateX(-50%);\r\n        margin-top: 10em;\r\n        width: 30em;\r\n        height: 22em;\r\n        background-color: #23272a;\r\n        border-radius: 10px;\r\n    }\r\n    #col1 {\r\n        width: 45%;\r\n        border-right:1px solid grey;\r\n        height: 100%;\r\n        position: relative;\r\n    }\r\n    #col2 {\r\n        width: 54%;\r\n        height: 99%;\r\n        transform: translateY(-100%);\r\n        display: inline-block;\r\n        margin-left: 45%;\r\n    }\r\n    h3 {\r\n        margin-left: 50%;\r\n        padding: 0.5em;\r\n        border-radius: 10px;\r\n        transform: translateX(-50%);\r\n        width: max-content;\r\n        border: white 2px dashed;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 500;\r\n        font-size: 1.5em;\r\n        line-height: 28px;\r\n        color: white;\r\n    }\r\n    #input-code {\r\n        width: 50%;\r\n        margin-top: 5em;\r\n        margin-left: 50%;\r\n        transform: translateX(-50%);\r\n        height: 10%;\r\n        background: #40454b;\r\n        border-radius: 10px;\r\n        color: white;\r\n        border: none;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: normal;\r\n    }\r\n    #input-code:focus {\r\n        outline: none;\r\n    }\r\n    #input-create {\r\n        width: 45%;\r\n        height: 12%;\r\n        margin-left: 50%;\r\n        transform: translateX(-50%);\r\n        margin-top: 1em;\r\n        background: rgb(34, 214, 28);\r\n        border-radius: 10px;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: normal;\r\n        font-size: 1em;\r\n        color: white;\r\n        border: none;\r\n    }\r\n\r\n    p{\r\n        margin-left: 50%;\r\n        transform: translateX(-50%);\r\n        width: max-content;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 400;\r\n        font-size: 1.2em;\r\n        line-height: 8px;\r\n        color: white; \r\n    }\r\n    #input-create:hover {\r\n        background: green;\r\n        cursor: pointer;\r\n    }\r\n    #input-create:active {\r\n        background: rgb(3, 75, 3);\r\n    }\r\n</style>\r\n","<script>\r\n    import { navigateTo } from \"svelte-router-spa\";\r\n    import * as signalR from \"@microsoft/signalr\";\r\n    import {ID, roomCode, HUB} from './signalr';\r\n    let codeConnection;\r\n    let isCodeWrong = false;\r\n    let isRoomFull = false;\r\n    let hubConnection = new signalR.HubConnectionBuilder()\r\n        .withUrl(\"https://localhost:44300/game\")\r\n        .build();\r\n    HUB.set(hubConnection);\r\n    console.log($HUB);\r\n    $HUB.on(\"getID\", function (data){\r\n         ID.set(data);\r\n    });\r\n   // localStorage.clear();\r\n   $HUB.on(\"FilledRoom\", function (data) {\r\n        console.log(\"fiiled room\");\r\n        isRoomFull = true;\r\n        setTimeout(() => {\r\n            isRoomFull = false;\r\n        }, 2000);\r\n    });\r\n    $HUB.on(\"GoInRoom\", function (data) {\r\n        console.log(\"GoInRoom\");\r\n        roomCode.set(codeConnection);\r\n        navigateTo(\"lobby\");\r\n        console.log('goinroom '+codeConnection);\r\n    });\r\n    $HUB.on(\"NotFoundRoom\", function (data) {\r\n        console.log(\"NotFoundRoom\");\r\n        isCodeWrong = true;\r\n        setTimeout(() => {\r\n            isCodeWrong = false;\r\n        }, 2000);\r\n    });\r\n\r\n    function createRoom() {\r\n        var xmlHttp = new XMLHttpRequest()\r\n        xmlHttp.open(\"GET\", \"https://localhost:44300/Main/bon\", false); // false for synchronous request\r\n        xmlHttp.send(null);\r\n        console.log(xmlHttp.responseText + 'roomrespone');\r\n        roomCode.set(xmlHttp.responseText);\r\n        console.log('setted '+$roomCode);\r\n        codeConnection = $roomCode;\r\n        $HUB.invoke(\"roomConnection\", xmlHttp.responseText);\r\n    }\r\n\r\n    function connect() {\r\n        console.log(\"sended\");\r\n        $HUB.invoke(\"roomConnection\", codeConnection);\r\n    }\r\n    $HUB.start();\r\n</script>\r\n\r\n<main>\r\n    <h1>TERVOB</h1>\r\n    <div id=\"box\">\r\n        <div class=\"connect\">\r\n            <p>Start game</p>\r\n            {#if isCodeWrong}\r\n                <i id=\"wrong\">Wrong code!</i>\r\n            {/if}\r\n            {#if isRoomFull}\r\n                <i id=\"wrong\">Room is full!</i>\r\n            {/if}\r\n            <input type=\"text\" id=\"input-code\" bind:value={codeConnection} />\r\n            <input\r\n                type=\"button\"\r\n                id=\"input-connect\"\r\n                value=\"Connect\"\r\n                on:click={connect}\r\n            />\r\n        </div>\r\n        <hr />\r\n        <div class=\"connect\">\r\n            <p>or</p>\r\n            <input type=\"button\" id=\"input-create\" value=\"Create room\" on:click={createRoom}/>\r\n            <input type=\"button\" id=\"input-instruction\" value=\"Instruction\" />\r\n            <select id=\"input-select\">\r\n                <option value=\"value1\">en</option>\r\n                <option value=\"value2\" selected>sk</option>\r\n                <option value=\"value3\">ru</option>\r\n            </select>\r\n        </div>\r\n        <div id=\"other\">\r\n            <a href=\"#\">Support author</a>\r\n            <i>Copyright 2022</i>\r\n        </div>\r\n    </div>\r\n</main>\r\n\r\n<style>\r\n    main {\r\n        height: 100%;\r\n        width: 100%;\r\n        margin: 0%;\r\n        background-color: #2c2f33;\r\n        position: fixed;\r\n    }\r\n    #wrong {\r\n        color: red;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 300;\r\n        font-size: 1em;\r\n        line-height: 48px;\r\n    }\r\n    h1 {\r\n        color: white;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 900;\r\n        font-size: 3em;\r\n        line-height: 48px;\r\n        text-align: center;\r\n        margin-top: 5%;\r\n    }\r\n    #other {\r\n        margin-top: 35%;\r\n    }\r\n    i {\r\n        display: block;\r\n    }\r\n    hr {\r\n        border: 1px solid #2c2f33;\r\n    }\r\n    #box {\r\n        width: 26.5em;\r\n        height: 30em;\r\n        text-align: center;\r\n        margin-left: 50%;\r\n        transform: translateX(-50%);\r\n        background: #23272a;\r\n        border-radius: 10px;\r\n        margin-top: 2em;\r\n    }\r\n    .connect {\r\n        padding-top: 10%;\r\n        padding-bottom: 5%;\r\n    }\r\n    #input-code {\r\n        width: 30%;\r\n        height: 10%;\r\n        background: #40454b;\r\n        border-radius: 10px;\r\n        color: white;\r\n        border: none;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: normal;\r\n    }\r\n    #input-code:focus {\r\n        outline: none;\r\n    }\r\n    #input-connect {\r\n        width: 25%;\r\n        height: 15%;\r\n        background: #ed4245;\r\n        border-radius: 10px;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: normal;\r\n        font-size: 1em;\r\n        margin-left: 5%;\r\n        color: white;\r\n        border: none;\r\n    }\r\n    #input-connect:hover {\r\n        background: rgb(192, 28, 31);\r\n        cursor: pointer;\r\n    }\r\n    #input-connect:active {\r\n        background: rgb(124, 2, 4);\r\n    }\r\n    #input-create {\r\n        width: 25%;\r\n        height: 10%;\r\n        background: #2686fb;\r\n        border-radius: 10px;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: normal;\r\n        font-size: 1em;\r\n        color: white;\r\n        border: none;\r\n    }\r\n    #input-create:hover {\r\n        background: #1064ca;\r\n        cursor: pointer;\r\n    }\r\n    #input-create:active {\r\n        background: #033470;\r\n    }\r\n    #input-instruction {\r\n        width: 25%;\r\n        height: 10%;\r\n        background: #40454b;\r\n        border-radius: 10px;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: normal;\r\n        font-size: 1em;\r\n        margin-left: 5%;\r\n        color: white;\r\n        border: none;\r\n    }\r\n    #input-instruction:hover {\r\n        background: #3a3d41;\r\n        cursor: pointer;\r\n    }\r\n    #input-instruction:active {\r\n        background: rgb(40, 41, 43);\r\n    }\r\n    p {\r\n        margin-top: -10%;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 500;\r\n        font-size: 1.5em;\r\n        line-height: 48px;\r\n        color: #717981;\r\n    }\r\n    #input-select {\r\n        width: 20%;\r\n        height: 10%;\r\n        background: #40454b;\r\n        border-radius: 10px;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: normal;\r\n        font-size: 1em;\r\n        margin-left: 5%;\r\n        color: white;\r\n        border: none;\r\n    }\r\n    #input-select:hover {\r\n        background: #3a3d41;\r\n        cursor: pointer;\r\n    }\r\n    #input-select:active {\r\n        background: rgb(40, 41, 43);\r\n    }\r\n    #input-select:focus {\r\n        outline: none;\r\n    }\r\n    option {\r\n        border: none;\r\n        outline: none;\r\n    }\r\n</style>\r\n","<script>\r\n    import Card from \"./Card.svelte\";\r\n\r\n    export let attack=null;\r\n    export let defend=null;\r\n\r\n    console.log(attack);\r\n</script>\r\n\r\n<div id=\"root\">\r\n    <div id=\"first\">\r\n        {#if attack!=null}\r\n            \r\n        <Card xp={attack.points} type={attack.type} />\r\n        {/if}\r\n    </div>\r\n    <i>VS</i>\r\n    <div id=\"second\">\r\n        {#if defend!=null}\r\n            \r\n        <Card xp={defend.points} type={defend.type} />\r\n        {/if}\r\n    </div>\r\n</div>\r\n\r\n<style>\r\n    #root {\r\n        padding: 1em;\r\n    }\r\n    i {\r\n        display: inline-block;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 900;\r\n        font-size: 6em;\r\n        line-height: 72px;\r\n        color: white;\r\n        vertical-align: middle;\r\n    }\r\n    #first{\r\n        margin: 0.75em;\r\n        display: inline-block;\r\n        vertical-align: middle;\r\n        height: 11em;\r\n        width: 7em;\r\n        border: 7px dashed  grey;\r\n        border-radius: 15px;\r\n    }\r\n    #second{\r\n         margin: 0.75em;\r\n        display: inline-block;\r\n        vertical-align: middle;\r\n        height: 11em;\r\n        width: 7em;\r\n        border: 7px dashed  grey;\r\n        border-radius: 15px;\r\n    }\r\n</style>\r\n","<script>\r\n    import Card from \"./Card.svelte\";\r\n    import Player from \"./Player.svelte\";\r\n    import Chat from \"./Chat.svelte\";\r\n    import Battlefield from \"./Battlefield.svelte\";\r\n    import Timer from \"./Timer.svelte\";\r\n    import Info from \"./Info.svelte\"\r\n    import { onMount } from 'svelte';\r\n    import {roomCode, HUB, ID} from './signalr';\r\n    import { navigateTo } from \"svelte-router-spa\";\r\n    import * as signalR from \"@microsoft/signalr\";\r\n\r\n    let players=[];\r\n    let cards=[];\r\n    let attack=null;\r\n    let defend=null;\r\n    let roomDeck=null;\r\n    let seconds = 30;\r\n    let yt=\"nil\";\r\n       onMount(() => {\r\n           $HUB.invoke('PlayInit', $roomCode);\r\n       })\r\n       $HUB.on(\"clientInit\", function (d) {\r\n         console.log(\"clieninit \"+$ID);\r\n          cards=[];\r\n          for(var i = 0;i<d.players.length;i++)\r\n          if(d.players[i].id == $ID)\r\n          if(d.players[i].isLoser == true)\r\n          alert('Loser!');\r\n          else if(d.players[i].isWiner == true)\r\n          alert('Winner!');\r\n         players=d.players;\r\n         for(var i = 0;i<d.players.length;i++)\r\n         if(d.players[i].id == $ID)\r\n         cards=d.players[i].cards;\r\n         roomDeck=d.roomDeck.length;\r\n         attack=d.attack;\r\n         defend=d.defend;\r\n         seconds = d.counter.seconds;\r\n         if(d.current.id == $ID)\r\n         yt=\"cur\";\r\n         else if(d.next.id == $ID)\r\n         yt=\"nxt\";\r\n         else\r\n         yt=\"nil\";\r\n         console.log(\"crnt \"+yt)\r\n         console.log(d);\r\n         \r\n    });\r\n\r\n    \r\n</script>\r\n\r\n<main>\r\n    <header>\r\n        {#each players as player, i}\r\n        {#if i == 0}\r\n        <Player nomarg=\"1\" xp={player.xp} isMe={player.id == $ID ? true : false} nick={player.nick}/>\r\n        {:else}\r\n        <Player xp={player.xp} isMe={player.id == $ID ? true : false} nick={player.nick}/>\r\n        {/if}\r\n     {/each}\r\n    </header>\r\n    <aside>\r\n        <Chat />\r\n    </aside>\r\n    <section>\r\n        <Battlefield attack={attack} defend={defend}/>\r\n    </section>\r\n    <div>\r\n        <Timer seconds={seconds} yt={yt}/>\r\n        <Info roomDeck={roomDeck}/>\r\n    </div>\r\n    <footer>\r\n        {#each cards as card, i}\r\n           {#if i == 0}\r\n           <Card nomarg=\"1\"  xp={card.points} type={card.type} />\r\n           {:else}\r\n           <Card xp={card.points} type={card.type} />\r\n           {/if}\r\n        {/each}\r\n    </footer>\r\n</main>\r\n\r\n<style>\r\n    main {\r\n        height: 100%;\r\n        width: 100%;\r\n        margin: 0%;\r\n        background-color: #2c2f33;\r\n        position: fixed;\r\n    }\r\n    header {\r\n        text-align: center;\r\n        width: max-content;\r\n        margin-left: 50%;\r\n        transform: translateX(-50%);\r\n    }\r\n    footer {\r\n        width: max-content;\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n        position: fixed;\r\n        bottom: 1em;\r\n    }\r\n    aside {\r\n        display: inline-block;\r\n    }\r\n    section {\r\n        display: inline-block;\r\n        margin-top: 4em;\r\n        position: absolute;\r\n        left: 50%;\r\n        transform: translate(-50%, 0);\r\n    }\r\n    div{\r\n        float: right;\r\n        margin-right: 1em;\r\n        margin-top: -10%;\r\n    }\r\n</style>\r\n","<script>\n    import Card from \"./Card.svelte\";\n    import Player from \"./Player.svelte\";\n\timport Chat from \"./Chat.svelte\";\n\timport Timer from \"./Timer.svelte\";\n\timport Info from \"./Info.svelte\";\n\timport { Router } from 'svelte-router-spa'\n    import Lobby from \"./Lobby.svelte\";\n\timport Index from \"./Index.svelte\";\n  import Play from \"./Play.svelte\";\n\tconst routes = [\n  {\n    name: '/',\n    component: Index,\n  },\n  {\n    name: '/lobby',\n    component: Lobby,\n  },\n  {\n    name: '/play',\n    component: Play,\n  }\n  ];\n</script>\n\n<main>\n\t<Router {routes} />\n\t\n</main>\n\n","import App from './App.svelte';\nimport Play from './Play.svelte';\nimport Index from './Index.svelte';\nimport Lobby from './Lobby.svelte';\nconst app = new App({\n\ttarget: document.body\n});\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","src_url_equal_anchor","current_component","src_url_equal","element_src","url","document","createElement","href","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","null_to_empty","value","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","set_current_component","onMount","Error","get_current_component","on_mount","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","seen_callbacks","Set","flushidx","flush","saved_component","update","pop","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","create_component","mount_component","customElement","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","type","index","indexOf","splice","$set","$$props","obj","$$set","keys","HttpError","constructor","errorMessage","statusCode","trueProto","prototype","super","__proto__","TimeoutError","AbortError","UnsupportedTransportError","message","transport","errorType","DisabledTransportError","FailedToStartTransportError","FailedToNegotiateWithServerError","AggregateErrors","innerErrors","HttpResponse","statusText","content","HttpClient","get","send","method","post","getCookieString","LogLevel","NullLogger","log","_logLevel","_message","Arg","static","val","match","values","Platform","isBrowser","window","isWebWorker","self","isNode","getDataDetail","includeContent","detail","isArrayBuffer","byteLength","view","Uint8Array","str","num","toString","substr","formatArrayBuffer","ArrayBuffer","async","sendMessage","logger","transportName","httpClient","accessTokenFactory","headers","token","Authorization","getUserAgentHeader","Trace","logMessageContent","responseType","response","timeout","withCredentials","SubjectSubscription","subject","observer","_subject","_observer","dispose","observers","cancelCallback","catch","_","ConsoleLogger","minimumLogLevel","_minLevel","out","console","logLevel","msg","Date","toISOString","Critical","error","Warning","warn","Information","info","userAgentHeaderName","constructUserAgent","getOsName","getRuntime","getRuntimeVersion","version","os","runtime","runtimeVersion","userAgent","majorAndMinor","split","process","platform","versions","getErrorString","e","stack","FetchHttpClient","_logger","fetch","requireFunc","__webpack_require__","__non_webpack_require__","require","_jar","CookieJar","_fetchType","bind","globalThis","global","getGlobalThis","AbortController","_abortControllerType","request","abortSignal","aborted","abortController","onabort","abort","timeoutId","msTimeout","setTimeout","body","cache","credentials","mode","redirect","signal","clearTimeout","ok","deserializeContent","status","payload","cookies","getCookies","join","arrayBuffer","XhrHttpClient","reject","xhr","XMLHttpRequest","open","undefined","setRequestHeader","header","onload","responseText","onerror","ontimeout","DefaultHttpClient","_httpClient","TextMessageFormat","output","RecordSeparator","messages","RecordSeparatorCode","String","fromCharCode","HandshakeProtocol","writeHandshakeRequest","handshakeRequest","write","JSON","stringify","parseHandshakeResponse","messageData","remainingData","binaryData","separatorIndex","responseLength","apply","slice","call","buffer","textData","substring","parse","MessageType","Subject","next","item","err","complete","HubConnectionState","HubConnection","connection","protocol","reconnectPolicy","_nextKeepAlive","_freezeEventListener","isRequired","serverTimeoutInMilliseconds","keepAliveIntervalInMilliseconds","_protocol","_reconnectPolicy","_handshakeProtocol","onreceive","_processIncomingData","onclose","_connectionClosed","_callbacks","_methods","_closedCallbacks","_reconnectingCallbacks","_reconnectedCallbacks","_invocationId","_receivedHandshakeResponse","_connectionState","Disconnected","_connectionStarted","_cachedPingMessage","writeMessage","Ping","state","connectionId","baseUrl","Reconnecting","start","_startPromise","_startWithStateTransitions","Connecting","Debug","_startInternal","Connected","_stopDuringStartError","handshakePromise","_handshakeResolver","_handshakeRejecter","transferFormat","_sendMessage","_cleanupTimeout","_resetTimeoutPeriod","_resetKeepAliveInterval","_cleanupPingTimer","stop","startPromise","_stopPromise","_stopInternal","Disconnecting","_reconnectDelayHandle","_completeClose","stream","methodName","args","streams","streamIds","_replaceStreamingParams","invocationDescriptor","_createStreamInvocation","promiseQueue","cancelInvocation","_createCancelInvocation","invocationId","_sendWithProtocol","invocationEvent","Completion","_launchStreams","sendPromise","_createInvocation","invoke","result","on","newMethod","toLowerCase","off","handlers","removeIdx","onreconnecting","onreconnected","_processHandshakeResponse","parseMessages","Invocation","_invokeClientMethod","StreamItem","Close","allowReconnect","responseMessage","features","inherentKeepAlive","getTime","_timeoutHandle","serverTimeout","_pingServerHandle","nextPing","invocationMessage","methods","arguments","_cancelCallbacksWithError","_reconnect","reconnectStartTime","now","previousReconnectAttempts","retryError","nextRetryDelay","_getNextRetryDelay","previousRetryCount","elapsedMilliseconds","retryReason","nextRetryDelayInMilliseconds","key","nonblocking","streamId","_createCompletionMessage","_createStreamItemMessage","argument","_isObservable","arg","StreamInvocation","id","CancelInvocation","DEFAULT_RETRY_DELAYS_IN_MILLISECONDS","DefaultReconnectPolicy","retryDelays","_retryDelays","retryContext","HeaderNames","HttpTransportType","TransferFormat","Cookie","_isAborted","LongPollingTransport","_accessTokenFactory","_pollAbort","_options","_running","pollAborted","isIn","_url","Binary","pollOptions","_getAccessToken","_updateHeaderToken","pollUrl","_closeError","_receiving","_poll","_raiseOnClose","deleteOptions","logMessage","ServerSentEventsTransport","encodeURIComponent","eventSource","opened","Text","EventSource","onmessage","_close","onopen","_eventSource","close","WebSocketTransport","webSocketConstructor","_logMessageContent","_webSocketConstructor","_headers","webSocket","replace","binaryType","_event","_webSocket","ErrorEvent","readyState","OPEN","_isCloseEvent","wasClean","code","reason","HttpConnection","_stopPromiseResolver","_negotiateVersion","_resolveUrl","webSocketModule","eventSourceModule","WebSocket","_startInternalPromise","_sendQueue","TransportSendQueue","_stopError","_stopConnection","skipNegotiation","WebSockets","_constructTransport","_startTransport","negotiateResponse","redirects","_getNegotiationResponse","ProtocolVersion","accessToken","_createTransport","negotiateUrl","_resolveNegotiateUrl","negotiateVersion","connectionToken","_createConnectUrl","requestedTransport","requestedTransferFormat","connectUrl","_isITransport","transportExceptions","transports","availableTransports","negotiate","endpoint","transportOrError","_resolveTransportOrError","ex","ServerSentEvents","LongPolling","connect","actualTransport","transportMatches","transferFormats","s","lastIndexOf","aTag","_transport","_buffer","_executing","_sendBufferedData","PromiseSource","_transportResult","_sendLoopPromise","_sendLoop","_bufferData","promise","transportResult","_concatBuffers","arrayBuffers","totalLength","reduce","offset","set","_resolver","_rejecter","JsonHubProtocol","hubMessages","parsedMessage","_isInvocationMessage","_isStreamItemMessage","_isCompletionMessage","_assertNotEmptyString","LogLevelNameMapping","trace","debug","information","warning","critical","none","None","HubConnectionBuilder","configureLogging","logging","mapping","parseLogLevel","withUrl","transportTypeOrOptions","isNotEmpty","httpConnectionOptions","withHubProtocol","withAutomaticReconnect","retryDelaysOrReconnectPolicy","isArray","build","subscriber_queue","writable","subscribers","new_value","run_queue","subscriber","invalidate","size","roomCode","HUB","ID","nomarg","xp","$HUB","$roomCode","nick","isMe","visible","seconds","yt","roomDeck","activeRoute","remove","UrlParser","urlString","namedUrl","urlBase","URL","namedParamsWithIndex","getPathNames","validParams","param","pathNames","pathname","pathName","trim","freeze","hash","host","hostname","namedParams","allPathName","paramKey","namedParamsKeys","namedParamsValues","port","search","queryParams","params","searchParams","queryParamsKeys","_value","queryParamsValues","anyEmptyNestedRoutes","routeObject","childRoute","compareRoutes","routeName","removeSlash","includes","startsWith","findLocalisedRoute","route","language","exists","lang","entries","nameToPath","position","routeNameLocalised","RouterCurrent","trackPage","trackPageview","pushActiveRoute","newRoute","updateBrowserHistory","pathAndSearch","currentRoute","path","pathWithQueryParams","history","pushState","page","gaTracking","newPage","ga","active","isActive","queryPath","includePath","activeRoutePath","setActive","RouterRedirect","currentPath","guard","onlyIf","guardInfo","valid","redirectPath","destinationUrl","RouterGuard","redirectTo","RouterPath","basePath","basePathName","convert","currentLanguage","updatedPathRoute","routePathLanguage","localisedPathName","localisedRouteWithoutNamedParams","basePathNameWithoutNamedParams","basePathSameAsLocalised","updatedPath","basePathResult","localisedRoute","routeNames","shift","currentPathName","updateRoutePath","namedPath","localisedPath","routeLanguage","routePath","routePathValue","basePathNames","names","removeExtraPaths","getNamedParams","RouterFinder","routes","currentUrl","routerOptions","defaultLanguage","sitePrefix","prefix","urlParser","replacePattern","endsWith","noPrefixUrl","parseCurrentUrl","routeNamedParams","staticParamMatch","searchActiveRoutes","routerPath","startsWithNamedParam","matchRoute","routerRoute","routeInfo","parsedParams","layout","RouterRoute","setCurrentRoute","nestedRoutes","nestedRoutesAndNoPath","indexRoute","routeNotFound","customLanguage","custom404Page","find","findActiveRoute","searchActiveRoute","NotFoundPage","routerCurrent","userDefinedRoutes","SpaRouter","location","gaPageviews","langConvertTo","setActiveRoute","navigateTo","navigateNow","localName","metaKey","ctrlKey","shiftKey","targetHostNameInternal","prefixMatchPath","preventDefault","onpopstate","navigatePathname","isReady","playersInRoom","go","codeConnection","isCodeWrong","isRoomFull","hubConnection","signalR.HubConnectionBuilder","xmlHttp","points","attack","defend","players","cards","$ID","isLoser","alert","isWiner","counter","current","Index","Lobby","Play"],"mappings":"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"}