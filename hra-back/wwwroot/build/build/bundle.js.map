{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/@microsoft/signalr/dist/esm/Errors.js","../../node_modules/@microsoft/signalr/dist/esm/HttpClient.js","../../node_modules/@microsoft/signalr/dist/esm/ILogger.js","../../node_modules/@microsoft/signalr/dist/esm/Loggers.js","../../node_modules/@microsoft/signalr/dist/esm/Utils.js","../../node_modules/@microsoft/signalr/dist/esm/FetchHttpClient.js","../../node_modules/@microsoft/signalr/dist/esm/XhrHttpClient.js","../../node_modules/@microsoft/signalr/dist/esm/DefaultHttpClient.js","../../node_modules/@microsoft/signalr/dist/esm/TextMessageFormat.js","../../node_modules/@microsoft/signalr/dist/esm/HandshakeProtocol.js","../../node_modules/@microsoft/signalr/dist/esm/IHubProtocol.js","../../node_modules/@microsoft/signalr/dist/esm/Subject.js","../../node_modules/@microsoft/signalr/dist/esm/HubConnection.js","../../node_modules/@microsoft/signalr/dist/esm/DefaultReconnectPolicy.js","../../node_modules/@microsoft/signalr/dist/esm/HeaderNames.js","../../node_modules/@microsoft/signalr/dist/esm/ITransport.js","../../node_modules/@microsoft/signalr/dist/esm/AbortController.js","../../node_modules/@microsoft/signalr/dist/esm/LongPollingTransport.js","../../node_modules/@microsoft/signalr/dist/esm/ServerSentEventsTransport.js","../../node_modules/@microsoft/signalr/dist/esm/WebSocketTransport.js","../../node_modules/@microsoft/signalr/dist/esm/HttpConnection.js","../../node_modules/@microsoft/signalr/dist/esm/JsonHubProtocol.js","../../node_modules/@microsoft/signalr/dist/esm/HubConnectionBuilder.js","../../src/Index.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true && boolean_attributes.has(name) ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.45.0' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n/** Error thrown when an HTTP request fails. */\r\nexport class HttpError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     * @param {number} statusCode The HTTP status code represented by this error.\r\n     */\r\n    constructor(errorMessage, statusCode) {\r\n        const trueProto = new.target.prototype;\r\n        super(`${errorMessage}: Status code '${statusCode}'`);\r\n        this.statusCode = statusCode;\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when a timeout elapses. */\r\nexport class TimeoutError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.TimeoutError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage = \"A timeout occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when an action is aborted. */\r\nexport class AbortError extends Error {\r\n    /** Constructs a new instance of {@link AbortError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage = \"An abort occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when the selected transport is unsupported by the browser. */\r\n/** @private */\r\nexport class UnsupportedTransportError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.UnsupportedTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occured on.\r\n     */\r\n    constructor(message, transport) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'UnsupportedTransportError';\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when the selected transport is disabled by the browser. */\r\n/** @private */\r\nexport class DisabledTransportError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.DisabledTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occured on.\r\n     */\r\n    constructor(message, transport) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'DisabledTransportError';\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when the selected transport cannot be started. */\r\n/** @private */\r\nexport class FailedToStartTransportError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToStartTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occured on.\r\n     */\r\n    constructor(message, transport) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'FailedToStartTransportError';\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when the negotiation with the server failed to complete. */\r\n/** @private */\r\nexport class FailedToNegotiateWithServerError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToNegotiateWithServerError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     */\r\n    constructor(message) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.errorType = 'FailedToNegotiateWithServerError';\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when multiple errors have occured. */\r\n/** @private */\r\nexport class AggregateErrors extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.AggregateErrors}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {Error[]} innerErrors The collection of errors this error is aggregating.\r\n     */\r\n    constructor(message, innerErrors) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.innerErrors = innerErrors;\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n//# sourceMappingURL=Errors.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n/** Represents an HTTP response. */\r\nexport class HttpResponse {\r\n    constructor(statusCode, statusText, content) {\r\n        this.statusCode = statusCode;\r\n        this.statusText = statusText;\r\n        this.content = content;\r\n    }\r\n}\r\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\r\nexport class HttpClient {\r\n    get(url, options) {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n    post(url, options) {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n    delete(url, options) {\r\n        return this.send({\r\n            ...options,\r\n            method: \"DELETE\",\r\n            url,\r\n        });\r\n    }\r\n    /** Gets all cookies that apply to the specified URL.\r\n     *\r\n     * @param url The URL that the cookies are valid for.\r\n     * @returns {string} A string containing all the key-value cookie pairs for the specified URL.\r\n     */\r\n    // @ts-ignore\r\n    getCookieString(url) {\r\n        return \"\";\r\n    }\r\n}\r\n//# sourceMappingURL=HttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\r\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\r\nexport var LogLevel;\r\n(function (LogLevel) {\r\n    /** Log level for very low severity diagnostic messages. */\r\n    LogLevel[LogLevel[\"Trace\"] = 0] = \"Trace\";\r\n    /** Log level for low severity diagnostic messages. */\r\n    LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\r\n    /** Log level for informational diagnostic messages. */\r\n    LogLevel[LogLevel[\"Information\"] = 2] = \"Information\";\r\n    /** Log level for diagnostic messages that indicate a non-fatal problem. */\r\n    LogLevel[LogLevel[\"Warning\"] = 3] = \"Warning\";\r\n    /** Log level for diagnostic messages that indicate a failure in the current operation. */\r\n    LogLevel[LogLevel[\"Error\"] = 4] = \"Error\";\r\n    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\r\n    LogLevel[LogLevel[\"Critical\"] = 5] = \"Critical\";\r\n    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\r\n    LogLevel[LogLevel[\"None\"] = 6] = \"None\";\r\n})(LogLevel || (LogLevel = {}));\r\n//# sourceMappingURL=ILogger.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n/** A logger that does nothing when log messages are sent to it. */\r\nexport class NullLogger {\r\n    constructor() { }\r\n    /** @inheritDoc */\r\n    // eslint-disable-next-line\r\n    log(_logLevel, _message) {\r\n    }\r\n}\r\n/** The singleton instance of the {@link @microsoft/signalr.NullLogger}. */\r\nNullLogger.instance = new NullLogger();\r\n//# sourceMappingURL=Loggers.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { NullLogger } from \"./Loggers\";\r\n// Version token that will be replaced by the prepack command\r\n/** The version of the SignalR client. */\r\nexport const VERSION = \"6.0.1\";\r\n/** @private */\r\nexport class Arg {\r\n    static isRequired(val, name) {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n    static isNotEmpty(val, name) {\r\n        if (!val || val.match(/^\\s*$/)) {\r\n            throw new Error(`The '${name}' argument should not be empty.`);\r\n        }\r\n    }\r\n    static isIn(val, values, name) {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n/** @private */\r\nexport class Platform {\r\n    static get isBrowser() {\r\n        return typeof window === \"object\";\r\n    }\r\n    static get isWebWorker() {\r\n        return typeof self === \"object\" && \"importScripts\" in self;\r\n    }\r\n    static get isNode() {\r\n        return !this.isBrowser && !this.isWebWorker;\r\n    }\r\n}\r\n/** @private */\r\nexport function getDataDetail(data, includeContent) {\r\n    let detail = \"\";\r\n    if (isArrayBuffer(data)) {\r\n        detail = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    }\r\n    else if (typeof data === \"string\") {\r\n        detail = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${data}'`;\r\n        }\r\n    }\r\n    return detail;\r\n}\r\n/** @private */\r\nexport function formatArrayBuffer(data) {\r\n    const view = new Uint8Array(data);\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n// Also in signalr-protocol-msgpack/Utils.ts\r\n/** @private */\r\nexport function isArrayBuffer(val) {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}\r\n/** @private */\r\nexport async function sendMessage(logger, transportName, httpClient, url, accessTokenFactory, content, options) {\r\n    let headers = {};\r\n    if (accessTokenFactory) {\r\n        const token = await accessTokenFactory();\r\n        if (token) {\r\n            headers = {\r\n                [\"Authorization\"]: `Bearer ${token}`,\r\n            };\r\n        }\r\n    }\r\n    const [name, value] = getUserAgentHeader();\r\n    headers[name] = value;\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, options.logMessageContent)}.`);\r\n    const responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers: { ...headers, ...options.headers },\r\n        responseType,\r\n        timeout: options.timeout,\r\n        withCredentials: options.withCredentials,\r\n    });\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n/** @private */\r\nexport function createLogger(logger) {\r\n    if (logger === undefined) {\r\n        return new ConsoleLogger(LogLevel.Information);\r\n    }\r\n    if (logger === null) {\r\n        return NullLogger.instance;\r\n    }\r\n    if (logger.log !== undefined) {\r\n        return logger;\r\n    }\r\n    return new ConsoleLogger(logger);\r\n}\r\n/** @private */\r\nexport class SubjectSubscription {\r\n    constructor(subject, observer) {\r\n        this._subject = subject;\r\n        this._observer = observer;\r\n    }\r\n    dispose() {\r\n        const index = this._subject.observers.indexOf(this._observer);\r\n        if (index > -1) {\r\n            this._subject.observers.splice(index, 1);\r\n        }\r\n        if (this._subject.observers.length === 0 && this._subject.cancelCallback) {\r\n            this._subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n/** @private */\r\nexport class ConsoleLogger {\r\n    constructor(minimumLogLevel) {\r\n        this._minLevel = minimumLogLevel;\r\n        this.out = console;\r\n    }\r\n    log(logLevel, message) {\r\n        if (logLevel >= this._minLevel) {\r\n            const msg = `[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`;\r\n            switch (logLevel) {\r\n                case LogLevel.Critical:\r\n                case LogLevel.Error:\r\n                    this.out.error(msg);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    this.out.warn(msg);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    this.out.info(msg);\r\n                    break;\r\n                default:\r\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n                    this.out.log(msg);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n/** @private */\r\nexport function getUserAgentHeader() {\r\n    let userAgentHeaderName = \"X-SignalR-User-Agent\";\r\n    if (Platform.isNode) {\r\n        userAgentHeaderName = \"User-Agent\";\r\n    }\r\n    return [userAgentHeaderName, constructUserAgent(VERSION, getOsName(), getRuntime(), getRuntimeVersion())];\r\n}\r\n/** @private */\r\nexport function constructUserAgent(version, os, runtime, runtimeVersion) {\r\n    // Microsoft SignalR/[Version] ([Detailed Version]; [Operating System]; [Runtime]; [Runtime Version])\r\n    let userAgent = \"Microsoft SignalR/\";\r\n    const majorAndMinor = version.split(\".\");\r\n    userAgent += `${majorAndMinor[0]}.${majorAndMinor[1]}`;\r\n    userAgent += ` (${version}; `;\r\n    if (os && os !== \"\") {\r\n        userAgent += `${os}; `;\r\n    }\r\n    else {\r\n        userAgent += \"Unknown OS; \";\r\n    }\r\n    userAgent += `${runtime}`;\r\n    if (runtimeVersion) {\r\n        userAgent += `; ${runtimeVersion}`;\r\n    }\r\n    else {\r\n        userAgent += \"; Unknown Runtime Version\";\r\n    }\r\n    userAgent += \")\";\r\n    return userAgent;\r\n}\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getOsName() {\r\n    if (Platform.isNode) {\r\n        switch (process.platform) {\r\n            case \"win32\":\r\n                return \"Windows NT\";\r\n            case \"darwin\":\r\n                return \"macOS\";\r\n            case \"linux\":\r\n                return \"Linux\";\r\n            default:\r\n                return process.platform;\r\n        }\r\n    }\r\n    else {\r\n        return \"\";\r\n    }\r\n}\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getRuntimeVersion() {\r\n    if (Platform.isNode) {\r\n        return process.versions.node;\r\n    }\r\n    return undefined;\r\n}\r\nfunction getRuntime() {\r\n    if (Platform.isNode) {\r\n        return \"NodeJS\";\r\n    }\r\n    else {\r\n        return \"Browser\";\r\n    }\r\n}\r\n/** @private */\r\nexport function getErrorString(e) {\r\n    if (e.stack) {\r\n        return e.stack;\r\n    }\r\n    else if (e.message) {\r\n        return e.message;\r\n    }\r\n    return `${e}`;\r\n}\r\n/** @private */\r\nexport function getGlobalThis() {\r\n    // globalThis is semi-new and not available in Node until v12\r\n    if (typeof globalThis !== \"undefined\") {\r\n        return globalThis;\r\n    }\r\n    if (typeof self !== \"undefined\") {\r\n        return self;\r\n    }\r\n    if (typeof window !== \"undefined\") {\r\n        return window;\r\n    }\r\n    if (typeof global !== \"undefined\") {\r\n        return global;\r\n    }\r\n    throw new Error(\"could not find global\");\r\n}\r\n//# sourceMappingURL=Utils.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { Platform, getGlobalThis } from \"./Utils\";\r\nexport class FetchHttpClient extends HttpClient {\r\n    constructor(logger) {\r\n        super();\r\n        this._logger = logger;\r\n        if (typeof fetch === \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests\r\n            this._jar = new (requireFunc(\"tough-cookie\")).CookieJar();\r\n            this._fetchType = requireFunc(\"node-fetch\");\r\n            // node-fetch doesn't have a nice API for getting and setting cookies\r\n            // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one\r\n            this._fetchType = requireFunc(\"fetch-cookie\")(this._fetchType, this._jar);\r\n        }\r\n        else {\r\n            this._fetchType = fetch.bind(getGlobalThis());\r\n        }\r\n        if (typeof AbortController === \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide\r\n            this._abortControllerType = requireFunc(\"abort-controller\");\r\n        }\r\n        else {\r\n            this._abortControllerType = AbortController;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    async send(request) {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            throw new AbortError();\r\n        }\r\n        if (!request.method) {\r\n            throw new Error(\"No method defined.\");\r\n        }\r\n        if (!request.url) {\r\n            throw new Error(\"No url defined.\");\r\n        }\r\n        const abortController = new this._abortControllerType();\r\n        let error;\r\n        // Hook our abortSignal into the abort controller\r\n        if (request.abortSignal) {\r\n            request.abortSignal.onabort = () => {\r\n                abortController.abort();\r\n                error = new AbortError();\r\n            };\r\n        }\r\n        // If a timeout has been passed in, setup a timeout to call abort\r\n        // Type needs to be any to fit window.setTimeout and NodeJS.setTimeout\r\n        let timeoutId = null;\r\n        if (request.timeout) {\r\n            const msTimeout = request.timeout;\r\n            timeoutId = setTimeout(() => {\r\n                abortController.abort();\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                error = new TimeoutError();\r\n            }, msTimeout);\r\n        }\r\n        let response;\r\n        try {\r\n            response = await this._fetchType(request.url, {\r\n                body: request.content,\r\n                cache: \"no-cache\",\r\n                credentials: request.withCredentials === true ? \"include\" : \"same-origin\",\r\n                headers: {\r\n                    \"Content-Type\": \"text/plain;charset=UTF-8\",\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                    ...request.headers,\r\n                },\r\n                method: request.method,\r\n                mode: \"cors\",\r\n                redirect: \"follow\",\r\n                signal: abortController.signal,\r\n            });\r\n        }\r\n        catch (e) {\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            this._logger.log(LogLevel.Warning, `Error from HTTP request. ${e}.`);\r\n            throw e;\r\n        }\r\n        finally {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = null;\r\n            }\r\n        }\r\n        if (!response.ok) {\r\n            const errorMessage = await deserializeContent(response, \"text\");\r\n            throw new HttpError(errorMessage || response.statusText, response.status);\r\n        }\r\n        const content = deserializeContent(response, request.responseType);\r\n        const payload = await content;\r\n        return new HttpResponse(response.status, response.statusText, payload);\r\n    }\r\n    getCookieString(url) {\r\n        let cookies = \"\";\r\n        if (Platform.isNode && this._jar) {\r\n            // @ts-ignore: unused variable\r\n            this._jar.getCookies(url, (e, c) => cookies = c.join(\"; \"));\r\n        }\r\n        return cookies;\r\n    }\r\n}\r\nfunction deserializeContent(response, responseType) {\r\n    let content;\r\n    switch (responseType) {\r\n        case \"arraybuffer\":\r\n            content = response.arrayBuffer();\r\n            break;\r\n        case \"text\":\r\n            content = response.text();\r\n            break;\r\n        case \"blob\":\r\n        case \"document\":\r\n        case \"json\":\r\n            throw new Error(`${responseType} is not supported.`);\r\n        default:\r\n            content = response.text();\r\n            break;\r\n    }\r\n    return content;\r\n}\r\n//# sourceMappingURL=FetchHttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\r\nimport { LogLevel } from \"./ILogger\";\r\nexport class XhrHttpClient extends HttpClient {\r\n    constructor(logger) {\r\n        super();\r\n        this._logger = logger;\r\n    }\r\n    /** @inheritDoc */\r\n    send(request) {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.open(request.method, request.url, true);\r\n            xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                    xhr.setRequestHeader(header, headers[header]);\r\n                });\r\n            }\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                }\r\n                else {\r\n                    reject(new HttpError(xhr.response || xhr.responseText || xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n            xhr.onerror = () => {\r\n                this._logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n            xhr.ontimeout = () => {\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n            xhr.send(request.content || \"\");\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=XhrHttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortError } from \"./Errors\";\r\nimport { FetchHttpClient } from \"./FetchHttpClient\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { Platform } from \"./Utils\";\r\nimport { XhrHttpClient } from \"./XhrHttpClient\";\r\n/** Default implementation of {@link @microsoft/signalr.HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */\r\n    constructor(logger) {\r\n        super();\r\n        if (typeof fetch !== \"undefined\" || Platform.isNode) {\r\n            this._httpClient = new FetchHttpClient(logger);\r\n        }\r\n        else if (typeof XMLHttpRequest !== \"undefined\") {\r\n            this._httpClient = new XhrHttpClient(logger);\r\n        }\r\n        else {\r\n            throw new Error(\"No usable HttpClient found.\");\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    send(request) {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n        return this._httpClient.send(request);\r\n    }\r\n    getCookieString(url) {\r\n        return this._httpClient.getCookieString(url);\r\n    }\r\n}\r\n//# sourceMappingURL=DefaultHttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// Not exported from index\r\n/** @private */\r\nexport class TextMessageFormat {\r\n    static write(output) {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n    static parse(input) {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\nTextMessageFormat.RecordSeparatorCode = 0x1e;\r\nTextMessageFormat.RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n//# sourceMappingURL=TextMessageFormat.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    writeHandshakeRequest(handshakeRequest) {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n    parseHandshakeResponse(data) {\r\n        let messageData;\r\n        let remainingData;\r\n        if (isArrayBuffer(data)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, Array.prototype.slice.call(binaryData.slice(0, responseLength)));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        }\r\n        else {\r\n            const textData = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        const responseMessage = response;\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n//# sourceMappingURL=HandshakeProtocol.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n/** Defines the type of a Hub Message. */\r\nexport var MessageType;\r\n(function (MessageType) {\r\n    /** Indicates the message is an Invocation message and implements the {@link @microsoft/signalr.InvocationMessage} interface. */\r\n    MessageType[MessageType[\"Invocation\"] = 1] = \"Invocation\";\r\n    /** Indicates the message is a StreamItem message and implements the {@link @microsoft/signalr.StreamItemMessage} interface. */\r\n    MessageType[MessageType[\"StreamItem\"] = 2] = \"StreamItem\";\r\n    /** Indicates the message is a Completion message and implements the {@link @microsoft/signalr.CompletionMessage} interface. */\r\n    MessageType[MessageType[\"Completion\"] = 3] = \"Completion\";\r\n    /** Indicates the message is a Stream Invocation message and implements the {@link @microsoft/signalr.StreamInvocationMessage} interface. */\r\n    MessageType[MessageType[\"StreamInvocation\"] = 4] = \"StreamInvocation\";\r\n    /** Indicates the message is a Cancel Invocation message and implements the {@link @microsoft/signalr.CancelInvocationMessage} interface. */\r\n    MessageType[MessageType[\"CancelInvocation\"] = 5] = \"CancelInvocation\";\r\n    /** Indicates the message is a Ping message and implements the {@link @microsoft/signalr.PingMessage} interface. */\r\n    MessageType[MessageType[\"Ping\"] = 6] = \"Ping\";\r\n    /** Indicates the message is a Close message and implements the {@link @microsoft/signalr.CloseMessage} interface. */\r\n    MessageType[MessageType[\"Close\"] = 7] = \"Close\";\r\n})(MessageType || (MessageType = {}));\r\n//# sourceMappingURL=IHubProtocol.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { SubjectSubscription } from \"./Utils\";\r\n/** Stream implementation to stream items to the server. */\r\nexport class Subject {\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n    next(item) {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n    error(err) {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n    complete() {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n    subscribe(observer) {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n//# sourceMappingURL=Subject.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { HandshakeProtocol } from \"./HandshakeProtocol\";\r\nimport { MessageType } from \"./IHubProtocol\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { Subject } from \"./Subject\";\r\nimport { Arg, getErrorString, Platform } from \"./Utils\";\r\nconst DEFAULT_TIMEOUT_IN_MS = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS = 15 * 1000;\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport var HubConnectionState;\r\n(function (HubConnectionState) {\r\n    /** The hub connection is disconnected. */\r\n    HubConnectionState[\"Disconnected\"] = \"Disconnected\";\r\n    /** The hub connection is connecting. */\r\n    HubConnectionState[\"Connecting\"] = \"Connecting\";\r\n    /** The hub connection is connected. */\r\n    HubConnectionState[\"Connected\"] = \"Connected\";\r\n    /** The hub connection is disconnecting. */\r\n    HubConnectionState[\"Disconnecting\"] = \"Disconnecting\";\r\n    /** The hub connection is reconnecting. */\r\n    HubConnectionState[\"Reconnecting\"] = \"Reconnecting\";\r\n})(HubConnectionState || (HubConnectionState = {}));\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    constructor(connection, logger, protocol, reconnectPolicy) {\r\n        this._nextKeepAlive = 0;\r\n        this._freezeEventListener = () => {\r\n            this._logger.log(LogLevel.Warning, \"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://docs.microsoft.com/aspnet/core/signalr/javascript-client#bsleep\");\r\n        };\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\r\n        this._logger = logger;\r\n        this._protocol = protocol;\r\n        this.connection = connection;\r\n        this._reconnectPolicy = reconnectPolicy;\r\n        this._handshakeProtocol = new HandshakeProtocol();\r\n        this.connection.onreceive = (data) => this._processIncomingData(data);\r\n        this.connection.onclose = (error) => this._connectionClosed(error);\r\n        this._callbacks = {};\r\n        this._methods = {};\r\n        this._closedCallbacks = [];\r\n        this._reconnectingCallbacks = [];\r\n        this._reconnectedCallbacks = [];\r\n        this._invocationId = 0;\r\n        this._receivedHandshakeResponse = false;\r\n        this._connectionState = HubConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n        this._cachedPingMessage = this._protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    static create(connection, logger, protocol, reconnectPolicy) {\r\n        return new HubConnection(connection, logger, protocol, reconnectPolicy);\r\n    }\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state() {\r\n        return this._connectionState;\r\n    }\r\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */\r\n    get connectionId() {\r\n        return this.connection ? (this.connection.connectionId || null) : null;\r\n    }\r\n    /** Indicates the url of the {@link HubConnection} to the server. */\r\n    get baseUrl() {\r\n        return this.connection.baseUrl || \"\";\r\n    }\r\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */\r\n    set baseUrl(url) {\r\n        if (this._connectionState !== HubConnectionState.Disconnected && this._connectionState !== HubConnectionState.Reconnecting) {\r\n            throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\r\n        }\r\n        if (!url) {\r\n            throw new Error(\"The HubConnection url must be a valid url.\");\r\n        }\r\n        this.connection.baseUrl = url;\r\n    }\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    start() {\r\n        this._startPromise = this._startWithStateTransitions();\r\n        return this._startPromise;\r\n    }\r\n    async _startWithStateTransitions() {\r\n        if (this._connectionState !== HubConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n        this._connectionState = HubConnectionState.Connecting;\r\n        this._logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n        try {\r\n            await this._startInternal();\r\n            if (Platform.isBrowser) {\r\n                if (document) {\r\n                    // Log when the browser freezes the tab so users know why their connection unexpectedly stopped working\r\n                    document.addEventListener(\"freeze\", this._freezeEventListener);\r\n                }\r\n            }\r\n            this._connectionState = HubConnectionState.Connected;\r\n            this._connectionStarted = true;\r\n            this._logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\r\n        }\r\n        catch (e) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    async _startInternal() {\r\n        this._stopDuringStartError = undefined;\r\n        this._receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is (re)started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this._handshakeResolver = resolve;\r\n            this._handshakeRejecter = reject;\r\n        });\r\n        await this.connection.start(this._protocol.transferFormat);\r\n        try {\r\n            const handshakeRequest = {\r\n                protocol: this._protocol.name,\r\n                version: this._protocol.version,\r\n            };\r\n            this._logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n            await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n            this._logger.log(LogLevel.Information, `Using HubProtocol '${this._protocol.name}'.`);\r\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n            this._cleanupTimeout();\r\n            this._resetTimeoutPeriod();\r\n            this._resetKeepAliveInterval();\r\n            await handshakePromise;\r\n            // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\r\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\r\n            // and the connection was closed.\r\n            if (this._stopDuringStartError) {\r\n                // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\r\n                // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\r\n                // will cause the calling continuation to get scheduled to run later.\r\n                // eslint-disable-next-line @typescript-eslint/no-throw-literal\r\n                throw this._stopDuringStartError;\r\n            }\r\n        }\r\n        catch (e) {\r\n            this._logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\r\n            this._cleanupTimeout();\r\n            this._cleanupPingTimer();\r\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\r\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\r\n            await this.connection.stop(e);\r\n            throw e;\r\n        }\r\n    }\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    async stop() {\r\n        // Capture the start promise before the connection might be restarted in an onclose callback.\r\n        const startPromise = this._startPromise;\r\n        this._stopPromise = this._stopInternal();\r\n        await this._stopPromise;\r\n        try {\r\n            // Awaiting undefined continues immediately\r\n            await startPromise;\r\n        }\r\n        catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n    }\r\n    _stopInternal(error) {\r\n        if (this._connectionState === HubConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n        this._connectionState = HubConnectionState.Disconnecting;\r\n        this._logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n        if (this._reconnectDelayHandle) {\r\n            // We're in a reconnect delay which means the underlying connection is currently already stopped.\r\n            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\r\n            // fire the onclose callbacks.\r\n            this._logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\r\n            clearTimeout(this._reconnectDelayHandle);\r\n            this._reconnectDelayHandle = undefined;\r\n            this._completeClose();\r\n            return Promise.resolve();\r\n        }\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        this._stopDuringStartError = error || new Error(\"The connection was stopped before the hub handshake could complete.\");\r\n        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\r\n        // or the onclose callback is invoked. The onclose callback will transition the HubConnection\r\n        // to the disconnected state if need be before HttpConnection.stop() completes.\r\n        return this.connection.stop(error);\r\n    }\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    stream(methodName, ...args) {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createStreamInvocation(methodName, args, streamIds);\r\n        // eslint-disable-next-line prefer-const\r\n        let promiseQueue;\r\n        const subject = new Subject();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation = this._createCancelInvocation(invocationDescriptor.invocationId);\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n            return promiseQueue.then(() => {\r\n                return this._sendWithProtocol(cancelInvocation);\r\n            });\r\n        };\r\n        this._callbacks[invocationDescriptor.invocationId] = (invocationEvent, error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            }\r\n            else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    }\r\n                    else {\r\n                        subject.complete();\r\n                    }\r\n                }\r\n                else {\r\n                    subject.next((invocationEvent.item));\r\n                }\r\n            }\r\n        };\r\n        promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n            .catch((e) => {\r\n            subject.error(e);\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n        });\r\n        this._launchStreams(streams, promiseQueue);\r\n        return subject;\r\n    }\r\n    _sendMessage(message) {\r\n        this._resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n    /**\r\n     * Sends a js object to the server.\r\n     * @param message The js object to serialize and send.\r\n     */\r\n    _sendWithProtocol(message) {\r\n        return this._sendMessage(this._protocol.writeMessage(message));\r\n    }\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    send(methodName, ...args) {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const sendPromise = this._sendWithProtocol(this._createInvocation(methodName, args, true, streamIds));\r\n        this._launchStreams(streams, sendPromise);\r\n        return sendPromise;\r\n    }\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    invoke(methodName, ...args) {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createInvocation(methodName, args, false, streamIds);\r\n        const p = new Promise((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this._callbacks[invocationDescriptor.invocationId] = (invocationEvent, error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n                else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        }\r\n                        else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    }\r\n                    else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n            const promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n                .catch((e) => {\r\n                reject(e);\r\n                // invocationId will always have a value for a non-blocking invocation\r\n                delete this._callbacks[invocationDescriptor.invocationId];\r\n            });\r\n            this._launchStreams(streams, promiseQueue);\r\n        });\r\n        return p;\r\n    }\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    on(methodName, newMethod) {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n        methodName = methodName.toLowerCase();\r\n        if (!this._methods[methodName]) {\r\n            this._methods[methodName] = [];\r\n        }\r\n        // Preventing adding the same handler multiple times.\r\n        if (this._methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n        this._methods[methodName].push(newMethod);\r\n    }\r\n    off(methodName, method) {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this._methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this._methods[methodName];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            delete this._methods[methodName];\r\n        }\r\n    }\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    onclose(callback) {\r\n        if (callback) {\r\n            this._closedCallbacks.push(callback);\r\n        }\r\n    }\r\n    /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n     */\r\n    onreconnecting(callback) {\r\n        if (callback) {\r\n            this._reconnectingCallbacks.push(callback);\r\n        }\r\n    }\r\n    /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n     */\r\n    onreconnected(callback) {\r\n        if (callback) {\r\n            this._reconnectedCallbacks.push(callback);\r\n        }\r\n    }\r\n    _processIncomingData(data) {\r\n        this._cleanupTimeout();\r\n        if (!this._receivedHandshakeResponse) {\r\n            data = this._processHandshakeResponse(data);\r\n            this._receivedHandshakeResponse = true;\r\n        }\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this._protocol.parseMessages(data, this._logger);\r\n            for (const message of messages) {\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this._invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion: {\r\n                        const callback = this._callbacks[message.invocationId];\r\n                        if (callback) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this._callbacks[message.invocationId];\r\n                            }\r\n                            try {\r\n                                callback(message);\r\n                            }\r\n                            catch (e) {\r\n                                this._logger.log(LogLevel.Error, `Stream callback threw error: ${getErrorString(e)}`);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close: {\r\n                        this._logger.log(LogLevel.Information, \"Close message received from server.\");\r\n                        const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\r\n                        if (message.allowReconnect === true) {\r\n                            // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\r\n                            // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\r\n                            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                            this.connection.stop(error);\r\n                        }\r\n                        else {\r\n                            // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\r\n                            this._stopPromise = this._stopInternal(error);\r\n                        }\r\n                        break;\r\n                    }\r\n                    default:\r\n                        this._logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        this._resetTimeoutPeriod();\r\n    }\r\n    _processHandshakeResponse(data) {\r\n        let responseMessage;\r\n        let remainingData;\r\n        try {\r\n            [remainingData, responseMessage] = this._handshakeProtocol.parseHandshakeResponse(data);\r\n        }\r\n        catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this._logger.log(LogLevel.Error, message);\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this._logger.log(LogLevel.Error, message);\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n        this._handshakeResolver();\r\n        return remainingData;\r\n    }\r\n    _resetKeepAliveInterval() {\r\n        if (this.connection.features.inherentKeepAlive) {\r\n            return;\r\n        }\r\n        // Set the time we want the next keep alive to be sent\r\n        // Timer will be setup on next message receive\r\n        this._nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;\r\n        this._cleanupPingTimer();\r\n    }\r\n    _resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this._timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n            // Set keepAlive timer if there isn't one\r\n            if (this._pingServerHandle === undefined) {\r\n                let nextPing = this._nextKeepAlive - new Date().getTime();\r\n                if (nextPing < 0) {\r\n                    nextPing = 0;\r\n                }\r\n                // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute\r\n                this._pingServerHandle = setTimeout(async () => {\r\n                    if (this._connectionState === HubConnectionState.Connected) {\r\n                        try {\r\n                            await this._sendMessage(this._cachedPingMessage);\r\n                        }\r\n                        catch {\r\n                            // We don't care about the error. It should be seen elsewhere in the client.\r\n                            // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                            this._cleanupPingTimer();\r\n                        }\r\n                    }\r\n                }, nextPing);\r\n            }\r\n        }\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n    _invokeClientMethod(invocationMessage) {\r\n        const methods = this._methods[invocationMessage.target.toLowerCase()];\r\n        if (methods) {\r\n            try {\r\n                methods.forEach((m) => m.apply(this, invocationMessage.arguments));\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `A callback for the method ${invocationMessage.target.toLowerCase()} threw error '${e}'.`);\r\n            }\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                const message = \"Server requested a response, which is not supported in this version of the client.\";\r\n                this._logger.log(LogLevel.Error, message);\r\n                // We don't want to wait on the stop itself.\r\n                this._stopPromise = this._stopInternal(new Error(message));\r\n            }\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\r\n        }\r\n    }\r\n    _connectionClosed(error) {\r\n        this._logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this._connectionState}.`);\r\n        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\r\n        this._stopDuringStartError = this._stopDuringStartError || error || new Error(\"The underlying connection was closed before the hub handshake could complete.\");\r\n        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\r\n        // If it has already completed, this should just noop.\r\n        if (this._handshakeResolver) {\r\n            this._handshakeResolver();\r\n        }\r\n        this._cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._completeClose(error);\r\n        }\r\n        else if (this._connectionState === HubConnectionState.Connected && this._reconnectPolicy) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._reconnect(error);\r\n        }\r\n        else if (this._connectionState === HubConnectionState.Connected) {\r\n            this._completeClose(error);\r\n        }\r\n        // If none of the above if conditions were true were called the HubConnection must be in either:\r\n        // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\r\n        // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\r\n        //    and potentially continue the reconnect() loop.\r\n        // 3. The Disconnected state in which case we're already done.\r\n    }\r\n    _completeClose(error) {\r\n        if (this._connectionStarted) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._connectionStarted = false;\r\n            if (Platform.isBrowser) {\r\n                if (document) {\r\n                    document.removeEventListener(\"freeze\", this._freezeEventListener);\r\n                }\r\n            }\r\n            try {\r\n                this._closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n    async _reconnect(error) {\r\n        const reconnectStartTime = Date.now();\r\n        let previousReconnectAttempts = 0;\r\n        let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\r\n        let nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\r\n        if (nextRetryDelay === null) {\r\n            this._logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\r\n            this._completeClose(error);\r\n            return;\r\n        }\r\n        this._connectionState = HubConnectionState.Reconnecting;\r\n        if (error) {\r\n            this._logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Information, \"Connection reconnecting.\");\r\n        }\r\n        if (this._reconnectingCallbacks.length !== 0) {\r\n            try {\r\n                this._reconnectingCallbacks.forEach((c) => c.apply(this, [error]));\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n            // Exit early if an onreconnecting callback called connection.stop().\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\r\n                return;\r\n            }\r\n        }\r\n        while (nextRetryDelay !== null) {\r\n            this._logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\r\n            await new Promise((resolve) => {\r\n                this._reconnectDelayHandle = setTimeout(resolve, nextRetryDelay);\r\n            });\r\n            this._reconnectDelayHandle = undefined;\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\r\n                return;\r\n            }\r\n            try {\r\n                await this._startInternal();\r\n                this._connectionState = HubConnectionState.Connected;\r\n                this._logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\r\n                if (this._reconnectedCallbacks.length !== 0) {\r\n                    try {\r\n                        this._reconnectedCallbacks.forEach((c) => c.apply(this, [this.connection.connectionId]));\r\n                    }\r\n                    catch (e) {\r\n                        this._logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\r\n                if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                    this._logger.log(LogLevel.Debug, `Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`);\r\n                    // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\r\n                    if (this._connectionState === HubConnectionState.Disconnecting) {\r\n                        this._completeClose();\r\n                    }\r\n                    return;\r\n                }\r\n                retryError = e instanceof Error ? e : new Error(e.toString());\r\n                nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\r\n            }\r\n        }\r\n        this._logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\r\n        this._completeClose();\r\n    }\r\n    _getNextRetryDelay(previousRetryCount, elapsedMilliseconds, retryReason) {\r\n        try {\r\n            return this._reconnectPolicy.nextRetryDelayInMilliseconds({\r\n                elapsedMilliseconds,\r\n                previousRetryCount,\r\n                retryReason,\r\n            });\r\n        }\r\n        catch (e) {\r\n            this._logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\r\n            return null;\r\n        }\r\n    }\r\n    _cancelCallbacksWithError(error) {\r\n        const callbacks = this._callbacks;\r\n        this._callbacks = {};\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n            const callback = callbacks[key];\r\n            try {\r\n                callback(null, error);\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `Stream 'error' callback called with '${error}' threw error: ${getErrorString(e)}`);\r\n            }\r\n        });\r\n    }\r\n    _cleanupPingTimer() {\r\n        if (this._pingServerHandle) {\r\n            clearTimeout(this._pingServerHandle);\r\n            this._pingServerHandle = undefined;\r\n        }\r\n    }\r\n    _cleanupTimeout() {\r\n        if (this._timeoutHandle) {\r\n            clearTimeout(this._timeoutHandle);\r\n        }\r\n    }\r\n    _createInvocation(methodName, args, nonblocking, streamIds) {\r\n        if (nonblocking) {\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    arguments: args,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n        else {\r\n            const invocationId = this._invocationId;\r\n            this._invocationId++;\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n    }\r\n    _launchStreams(streams, promiseQueue) {\r\n        if (streams.length === 0) {\r\n            return;\r\n        }\r\n        // Synchronize stream data so they arrive in-order on the server\r\n        if (!promiseQueue) {\r\n            promiseQueue = Promise.resolve();\r\n        }\r\n        // We want to iterate over the keys, since the keys are the stream ids\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const streamId in streams) {\r\n            streams[streamId].subscribe({\r\n                complete: () => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId)));\r\n                },\r\n                error: (err) => {\r\n                    let message;\r\n                    if (err instanceof Error) {\r\n                        message = err.message;\r\n                    }\r\n                    else if (err && err.toString) {\r\n                        message = err.toString();\r\n                    }\r\n                    else {\r\n                        message = \"Unknown error\";\r\n                    }\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId, message)));\r\n                },\r\n                next: (item) => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createStreamItemMessage(streamId, item)));\r\n                },\r\n            });\r\n        }\r\n    }\r\n    _replaceStreamingParams(args) {\r\n        const streams = [];\r\n        const streamIds = [];\r\n        for (let i = 0; i < args.length; i++) {\r\n            const argument = args[i];\r\n            if (this._isObservable(argument)) {\r\n                const streamId = this._invocationId;\r\n                this._invocationId++;\r\n                // Store the stream for later use\r\n                streams[streamId] = argument;\r\n                streamIds.push(streamId.toString());\r\n                // remove stream from args\r\n                args.splice(i, 1);\r\n            }\r\n        }\r\n        return [streams, streamIds];\r\n    }\r\n    _isObservable(arg) {\r\n        // This allows other stream implementations to just work (like rxjs)\r\n        return arg && arg.subscribe && typeof arg.subscribe === \"function\";\r\n    }\r\n    _createStreamInvocation(methodName, args, streamIds) {\r\n        const invocationId = this._invocationId;\r\n        this._invocationId++;\r\n        if (streamIds.length !== 0) {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n    }\r\n    _createCancelInvocation(id) {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n    _createStreamItemMessage(id, item) {\r\n        return {\r\n            invocationId: id,\r\n            item,\r\n            type: MessageType.StreamItem,\r\n        };\r\n    }\r\n    _createCompletionMessage(id, error, result) {\r\n        if (error) {\r\n            return {\r\n                error,\r\n                invocationId: id,\r\n                type: MessageType.Completion,\r\n            };\r\n        }\r\n        return {\r\n            invocationId: id,\r\n            result,\r\n            type: MessageType.Completion,\r\n        };\r\n    }\r\n}\r\n//# sourceMappingURL=HubConnection.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// 0, 2, 10, 30 second delays before reconnect attempts.\r\nconst DEFAULT_RETRY_DELAYS_IN_MILLISECONDS = [0, 2000, 10000, 30000, null];\r\n/** @private */\r\nexport class DefaultReconnectPolicy {\r\n    constructor(retryDelays) {\r\n        this._retryDelays = retryDelays !== undefined ? [...retryDelays, null] : DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;\r\n    }\r\n    nextRetryDelayInMilliseconds(retryContext) {\r\n        return this._retryDelays[retryContext.previousRetryCount];\r\n    }\r\n}\r\n//# sourceMappingURL=DefaultReconnectPolicy.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nexport class HeaderNames {\r\n}\r\nHeaderNames.Authorization = \"Authorization\";\r\nHeaderNames.Cookie = \"Cookie\";\r\n//# sourceMappingURL=HeaderNames.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// This will be treated as a bit flag in the future, so we keep it using power-of-two values.\r\n/** Specifies a specific HTTP transport type. */\r\nexport var HttpTransportType;\r\n(function (HttpTransportType) {\r\n    /** Specifies no transport preference. */\r\n    HttpTransportType[HttpTransportType[\"None\"] = 0] = \"None\";\r\n    /** Specifies the WebSockets transport. */\r\n    HttpTransportType[HttpTransportType[\"WebSockets\"] = 1] = \"WebSockets\";\r\n    /** Specifies the Server-Sent Events transport. */\r\n    HttpTransportType[HttpTransportType[\"ServerSentEvents\"] = 2] = \"ServerSentEvents\";\r\n    /** Specifies the Long Polling transport. */\r\n    HttpTransportType[HttpTransportType[\"LongPolling\"] = 4] = \"LongPolling\";\r\n})(HttpTransportType || (HttpTransportType = {}));\r\n/** Specifies the transfer format for a connection. */\r\nexport var TransferFormat;\r\n(function (TransferFormat) {\r\n    /** Specifies that only text data will be transmitted over the connection. */\r\n    TransferFormat[TransferFormat[\"Text\"] = 1] = \"Text\";\r\n    /** Specifies that binary data will be transmitted over the connection. */\r\n    TransferFormat[TransferFormat[\"Binary\"] = 2] = \"Binary\";\r\n})(TransferFormat || (TransferFormat = {}));\r\n//# sourceMappingURL=ITransport.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n// Not exported from index.\r\n/** @private */\r\nexport class AbortController {\r\n    constructor() {\r\n        this._isAborted = false;\r\n        this.onabort = null;\r\n    }\r\n    abort() {\r\n        if (!this._isAborted) {\r\n            this._isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n    get signal() {\r\n        return this;\r\n    }\r\n    get aborted() {\r\n        return this._isAborted;\r\n    }\r\n}\r\n//# sourceMappingURL=AbortController.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport {\r\n    constructor(httpClient, accessTokenFactory, logger, options) {\r\n        this._httpClient = httpClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logger = logger;\r\n        this._pollAbort = new AbortController();\r\n        this._options = options;\r\n        this._running = false;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    get pollAborted() {\r\n        return this._pollAbort.aborted;\r\n    }\r\n    async connect(url, transferFormat) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._url = url;\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n        const [name, value] = getUserAgentHeader();\r\n        const headers = { [name]: value, ...this._options.headers };\r\n        const pollOptions = {\r\n            abortSignal: this._pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this._options.withCredentials,\r\n        };\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n        const token = await this._getAccessToken();\r\n        this._updateHeaderToken(pollOptions, token);\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this._httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this._running = false;\r\n        }\r\n        else {\r\n            this._running = true;\r\n        }\r\n        this._receiving = this._poll(this._url, pollOptions);\r\n    }\r\n    async _getAccessToken() {\r\n        if (this._accessTokenFactory) {\r\n            return await this._accessTokenFactory();\r\n        }\r\n        return null;\r\n    }\r\n    _updateHeaderToken(request, token) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (token) {\r\n            request.headers[HeaderNames.Authorization] = `Bearer ${token}`;\r\n            return;\r\n        }\r\n        if (request.headers[HeaderNames.Authorization]) {\r\n            delete request.headers[HeaderNames.Authorization];\r\n        }\r\n    }\r\n    async _poll(url, pollOptions) {\r\n        try {\r\n            while (this._running) {\r\n                // We have to get the access token on each poll, in case it changes\r\n                const token = await this._getAccessToken();\r\n                this._updateHeaderToken(pollOptions, token);\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this._httpClient.get(pollUrl, pollOptions);\r\n                    if (response.statusCode === 204) {\r\n                        this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n                        this._running = false;\r\n                    }\r\n                    else if (response.statusCode !== 200) {\r\n                        this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n                        // Unexpected status code\r\n                        this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this._running = false;\r\n                    }\r\n                    else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._options.logMessageContent)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        }\r\n                        else {\r\n                            // This is another way timeout manifest.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    if (!this._running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    }\r\n                    else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                        else {\r\n                            // Close the connection with the error as the result.\r\n                            this._closeError = e;\r\n                            this._running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this._raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n    async send(data) {\r\n        if (!this._running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url, this._accessTokenFactory, data, this._options);\r\n    }\r\n    async stop() {\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this._running = false;\r\n        this._pollAbort.abort();\r\n        try {\r\n            await this._receiving;\r\n            // Send DELETE to clean up long polling on the server\r\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\r\n            const headers = {};\r\n            const [name, value] = getUserAgentHeader();\r\n            headers[name] = value;\r\n            const deleteOptions = {\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            };\r\n            const token = await this._getAccessToken();\r\n            this._updateHeaderToken(deleteOptions, token);\r\n            await this._httpClient.delete(this._url, deleteOptions);\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\r\n        }\r\n        finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this._raiseOnClose();\r\n        }\r\n    }\r\n    _raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this._closeError) {\r\n                logMessage += \" Error: \" + this._closeError;\r\n            }\r\n            this._logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this._closeError);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=LongPollingTransport.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform, sendMessage } from \"./Utils\";\r\n/** @private */\r\nexport class ServerSentEventsTransport {\r\n    constructor(httpClient, accessTokenFactory, logger, options) {\r\n        this._httpClient = httpClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logger = logger;\r\n        this._options = options;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    async connect(url, transferFormat) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\");\r\n        // set url before accessTokenFactory because this.url is only for send and we set the auth header instead of the query string for send\r\n        this._url = url;\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n                return;\r\n            }\r\n            let eventSource;\r\n            if (Platform.isBrowser || Platform.isWebWorker) {\r\n                eventSource = new this._options.EventSource(url, { withCredentials: this._options.withCredentials });\r\n            }\r\n            else {\r\n                // Non-browser passes cookies via the dictionary\r\n                const cookies = this._httpClient.getCookieString(url);\r\n                const headers = {};\r\n                headers.Cookie = cookies;\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n                eventSource = new this._options.EventSource(url, { withCredentials: this._options.withCredentials, headers: { ...headers, ...this._options.headers } });\r\n            }\r\n            try {\r\n                eventSource.onmessage = (e) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this._logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this._options.logMessageContent)}.`);\r\n                            this.onreceive(e.data);\r\n                        }\r\n                        catch (error) {\r\n                            this._close(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n                // @ts-ignore: not using event on purpose\r\n                eventSource.onerror = (e) => {\r\n                    // EventSource doesn't give any useful information about server side closes.\r\n                    if (opened) {\r\n                        this._close();\r\n                    }\r\n                    else {\r\n                        reject(new Error(\"EventSource failed to connect. The connection could not be found on the server,\"\r\n                            + \" either the connection ID is not present on the server, or a proxy is refusing/buffering the connection.\"\r\n                            + \" If you have multiple servers check that sticky sessions are enabled.\"));\r\n                    }\r\n                };\r\n                eventSource.onopen = () => {\r\n                    this._logger.log(LogLevel.Information, `SSE connected to ${this._url}`);\r\n                    this._eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n    async send(data) {\r\n        if (!this._eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"SSE\", this._httpClient, this._url, this._accessTokenFactory, data, this._options);\r\n    }\r\n    stop() {\r\n        this._close();\r\n        return Promise.resolve();\r\n    }\r\n    _close(e) {\r\n        if (this._eventSource) {\r\n            this._eventSource.close();\r\n            this._eventSource = undefined;\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=ServerSentEventsTransport.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform } from \"./Utils\";\r\n/** @private */\r\nexport class WebSocketTransport {\r\n    constructor(httpClient, accessTokenFactory, logger, logMessageContent, webSocketConstructor, headers) {\r\n        this._logger = logger;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logMessageContent = logMessageContent;\r\n        this._webSocketConstructor = webSocketConstructor;\r\n        this._httpClient = httpClient;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n        this._headers = headers;\r\n    }\r\n    async connect(url, transferFormat) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            let webSocket;\r\n            const cookies = this._httpClient.getCookieString(url);\r\n            let opened = false;\r\n            if (Platform.isNode) {\r\n                const headers = {};\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n                if (cookies) {\r\n                    headers[HeaderNames.Cookie] = `${cookies}`;\r\n                }\r\n                // Only pass headers when in non-browser environments\r\n                webSocket = new this._webSocketConstructor(url, undefined, {\r\n                    headers: { ...headers, ...this._headers },\r\n                });\r\n            }\r\n            if (!webSocket) {\r\n                // Chrome is not happy with passing 'undefined' as protocol\r\n                webSocket = new this._webSocketConstructor(url);\r\n            }\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n            webSocket.onopen = (_event) => {\r\n                this._logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\r\n                this._webSocket = webSocket;\r\n                opened = true;\r\n                resolve();\r\n            };\r\n            webSocket.onerror = (event) => {\r\n                let error = null;\r\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                    error = event.error;\r\n                }\r\n                else {\r\n                    error = \"There was an error with the transport\";\r\n                }\r\n                this._logger.log(LogLevel.Information, `(WebSockets transport) ${error}.`);\r\n            };\r\n            webSocket.onmessage = (message) => {\r\n                this._logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this._logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    try {\r\n                        this.onreceive(message.data);\r\n                    }\r\n                    catch (error) {\r\n                        this._close(error);\r\n                        return;\r\n                    }\r\n                }\r\n            };\r\n            webSocket.onclose = (event) => {\r\n                // Don't call close handler if connection was never established\r\n                // We'll reject the connect call instead\r\n                if (opened) {\r\n                    this._close(event);\r\n                }\r\n                else {\r\n                    let error = null;\r\n                    // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                    if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                        error = event.error;\r\n                    }\r\n                    else {\r\n                        error = \"WebSocket failed to connect. The connection could not be found on the server,\"\r\n                            + \" either the endpoint may not be a SignalR endpoint,\"\r\n                            + \" the connection ID is not present on the server, or there is a proxy blocking WebSockets.\"\r\n                            + \" If you have multiple servers check that sticky sessions are enabled.\";\r\n                    }\r\n                    reject(new Error(error));\r\n                }\r\n            };\r\n        });\r\n    }\r\n    send(data) {\r\n        if (this._webSocket && this._webSocket.readyState === this._webSocketConstructor.OPEN) {\r\n            this._logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this._logMessageContent)}.`);\r\n            this._webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n    stop() {\r\n        if (this._webSocket) {\r\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\r\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\r\n            this._close(undefined);\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _close(event) {\r\n        // webSocket will be null if the transport did not start successfully\r\n        if (this._webSocket) {\r\n            // Clear websocket handlers because we are considering the socket closed now\r\n            this._webSocket.onclose = () => { };\r\n            this._webSocket.onmessage = () => { };\r\n            this._webSocket.onerror = () => { };\r\n            this._webSocket.close();\r\n            this._webSocket = undefined;\r\n        }\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n        if (this.onclose) {\r\n            if (this._isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {\r\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason || \"no reason given\"}).`));\r\n            }\r\n            else if (event instanceof Error) {\r\n                this.onclose(event);\r\n            }\r\n            else {\r\n                this.onclose();\r\n            }\r\n        }\r\n    }\r\n    _isCloseEvent(event) {\r\n        return event && typeof event.wasClean === \"boolean\" && typeof event.code === \"number\";\r\n    }\r\n}\r\n//# sourceMappingURL=WebSocketTransport.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { AggregateErrors, DisabledTransportError, FailedToNegotiateWithServerError, FailedToStartTransportError, HttpError, UnsupportedTransportError } from \"./Errors\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\nconst MAX_REDIRECTS = 100;\r\n/** @private */\r\nexport class HttpConnection {\r\n    constructor(url, options = {}) {\r\n        this._stopPromiseResolver = () => { };\r\n        this.features = {};\r\n        this._negotiateVersion = 1;\r\n        Arg.isRequired(url, \"url\");\r\n        this._logger = createLogger(options.logger);\r\n        this.baseUrl = this._resolveUrl(url);\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\r\n        if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\r\n            options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\r\n        }\r\n        else {\r\n            throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\r\n        }\r\n        options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\r\n        let webSocketModule = null;\r\n        let eventSourceModule = null;\r\n        if (Platform.isNode && typeof require !== \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            webSocketModule = requireFunc(\"ws\");\r\n            eventSourceModule = requireFunc(\"eventsource\");\r\n        }\r\n        if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        }\r\n        else if (Platform.isNode && !options.WebSocket) {\r\n            if (webSocketModule) {\r\n                options.WebSocket = webSocketModule;\r\n            }\r\n        }\r\n        if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        }\r\n        else if (Platform.isNode && !options.EventSource) {\r\n            if (typeof eventSourceModule !== \"undefined\") {\r\n                options.EventSource = eventSourceModule;\r\n            }\r\n        }\r\n        this._httpClient = options.httpClient || new DefaultHttpClient(this._logger);\r\n        this._connectionState = \"Disconnected\" /* Disconnected */;\r\n        this._connectionStarted = false;\r\n        this._options = options;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    async start(transferFormat) {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n        if (this._connectionState !== \"Disconnected\" /* Disconnected */) {\r\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n        this._connectionState = \"Connecting\" /* Connecting */;\r\n        this._startInternalPromise = this._startInternal(transferFormat);\r\n        await this._startInternalPromise;\r\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\r\n        if (this._connectionState === \"Disconnecting\" /* Disconnecting */) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\r\n            await this._stopPromise;\r\n            return Promise.reject(new Error(message));\r\n        }\r\n        else if (this._connectionState !== \"Connected\" /* Connected */) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            return Promise.reject(new Error(message));\r\n        }\r\n        this._connectionStarted = true;\r\n    }\r\n    send(data) {\r\n        if (this._connectionState !== \"Connected\" /* Connected */) {\r\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\r\n        }\r\n        if (!this._sendQueue) {\r\n            this._sendQueue = new TransportSendQueue(this.transport);\r\n        }\r\n        // Transport will not be null if state is connected\r\n        return this._sendQueue.send(data);\r\n    }\r\n    async stop(error) {\r\n        if (this._connectionState === \"Disconnected\" /* Disconnected */) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n        if (this._connectionState === \"Disconnecting\" /* Disconnecting */) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n        this._connectionState = \"Disconnecting\" /* Disconnecting */;\r\n        this._stopPromise = new Promise((resolve) => {\r\n            // Don't complete stop() until stopConnection() completes.\r\n            this._stopPromiseResolver = resolve;\r\n        });\r\n        // stopInternal should never throw so just observe it.\r\n        await this._stopInternal(error);\r\n        await this._stopPromise;\r\n    }\r\n    async _stopInternal(error) {\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this._stopError = error;\r\n        try {\r\n            await this._startInternalPromise;\r\n        }\r\n        catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\r\n        // stop was called during start() and start() failed.\r\n        if (this.transport) {\r\n            try {\r\n                await this.transport.stop();\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\r\n                this._stopConnection();\r\n            }\r\n            this.transport = undefined;\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\r\n        }\r\n    }\r\n    async _startInternal(transferFormat) {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this._accessTokenFactory = this._options.accessTokenFactory;\r\n        try {\r\n            if (this._options.skipNegotiation) {\r\n                if (this._options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this._constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this._startTransport(url, transferFormat);\r\n                }\r\n                else {\r\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            }\r\n            else {\r\n                let negotiateResponse = null;\r\n                let redirects = 0;\r\n                do {\r\n                    negotiateResponse = await this._getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this._connectionState === \"Disconnecting\" /* Disconnecting */ || this._connectionState === \"Disconnected\" /* Disconnected */) {\r\n                        throw new Error(\"The connection was stopped during negotiation.\");\r\n                    }\r\n                    if (negotiateResponse.error) {\r\n                        throw new Error(negotiateResponse.error);\r\n                    }\r\n                    if (negotiateResponse.ProtocolVersion) {\r\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this._accessTokenFactory = () => accessToken;\r\n                    }\r\n                    redirects++;\r\n                } while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n                await this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\r\n            }\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n            if (this._connectionState === \"Connecting\" /* Connecting */) {\r\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\r\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\r\n                this._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\r\n                this._connectionState = \"Connected\" /* Connected */;\r\n            }\r\n            // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\r\n            // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\r\n            // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\r\n        }\r\n        catch (e) {\r\n            this._logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this._connectionState = \"Disconnected\" /* Disconnected */;\r\n            this.transport = undefined;\r\n            // if start fails, any active calls to stop assume that start will complete the stop promise\r\n            this._stopPromiseResolver();\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    async _getNegotiationResponse(url) {\r\n        const headers = {};\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                headers[HeaderNames.Authorization] = `Bearer ${token}`;\r\n            }\r\n        }\r\n        const [name, value] = getUserAgentHeader();\r\n        headers[name] = value;\r\n        const negotiateUrl = this._resolveNegotiateUrl(url);\r\n        this._logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this._httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            });\r\n            if (response.statusCode !== 200) {\r\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\r\n            }\r\n            const negotiateResponse = JSON.parse(response.content);\r\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\r\n                // Negotiate version 0 doesn't use connectionToken\r\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\r\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\r\n            }\r\n            return negotiateResponse;\r\n        }\r\n        catch (e) {\r\n            let errorMessage = \"Failed to complete negotiation with the server: \" + e;\r\n            if (e instanceof HttpError) {\r\n                if (e.statusCode === 404) {\r\n                    errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\r\n                }\r\n            }\r\n            this._logger.log(LogLevel.Error, errorMessage);\r\n            return Promise.reject(new FailedToNegotiateWithServerError(errorMessage));\r\n        }\r\n    }\r\n    _createConnectUrl(url, connectionToken) {\r\n        if (!connectionToken) {\r\n            return url;\r\n        }\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\r\n    }\r\n    async _createTransport(url, requestedTransport, negotiateResponse, requestedTransferFormat) {\r\n        let connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\r\n        if (this._isITransport(requestedTransport)) {\r\n            this._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this._startTransport(connectUrl, requestedTransferFormat);\r\n            this.connectionId = negotiateResponse.connectionId;\r\n            return;\r\n        }\r\n        const transportExceptions = [];\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        let negotiate = negotiateResponse;\r\n        for (const endpoint of transports) {\r\n            const transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat);\r\n            if (transportOrError instanceof Error) {\r\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\r\n                transportExceptions.push(`${endpoint.transport} failed:`);\r\n                transportExceptions.push(transportOrError);\r\n            }\r\n            else if (this._isITransport(transportOrError)) {\r\n                this.transport = transportOrError;\r\n                if (!negotiate) {\r\n                    try {\r\n                        negotiate = await this._getNegotiationResponse(url);\r\n                    }\r\n                    catch (ex) {\r\n                        return Promise.reject(ex);\r\n                    }\r\n                    connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\r\n                }\r\n                try {\r\n                    await this._startTransport(connectUrl, requestedTransferFormat);\r\n                    this.connectionId = negotiate.connectionId;\r\n                    return;\r\n                }\r\n                catch (ex) {\r\n                    this._logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\r\n                    negotiate = undefined;\r\n                    transportExceptions.push(new FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, HttpTransportType[endpoint.transport]));\r\n                    if (this._connectionState !== \"Connecting\" /* Connecting */) {\r\n                        const message = \"Failed to select transport before stop() was called.\";\r\n                        this._logger.log(LogLevel.Debug, message);\r\n                        return Promise.reject(new Error(message));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (transportExceptions.length > 0) {\r\n            return Promise.reject(new AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\r\n        }\r\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\r\n    }\r\n    _constructTransport(transport) {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this._options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent, this._options.WebSocket, this._options.headers || {});\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this._options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options);\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n    _startTransport(url, transferFormat) {\r\n        this.transport.onreceive = this.onreceive;\r\n        this.transport.onclose = (e) => this._stopConnection(e);\r\n        return this.transport.connect(url, transferFormat);\r\n    }\r\n    _resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat) {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this._logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        }\r\n        else {\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this._options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this._options.EventSource)) {\r\n                        this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                        return new UnsupportedTransportError(`'${HttpTransportType[transport]}' is not supported in your environment.`, transport);\r\n                    }\r\n                    else {\r\n                        this._logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        try {\r\n                            return this._constructTransport(transport);\r\n                        }\r\n                        catch (ex) {\r\n                            return ex;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                    return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\r\n                }\r\n            }\r\n            else {\r\n                this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n                return new DisabledTransportError(`'${HttpTransportType[transport]}' is disabled by the client.`, transport);\r\n            }\r\n        }\r\n    }\r\n    _isITransport(transport) {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n    _stopConnection(error) {\r\n        this._logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\r\n        this.transport = undefined;\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this._stopError || error;\r\n        this._stopError = undefined;\r\n        if (this._connectionState === \"Disconnected\" /* Disconnected */) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\r\n            return;\r\n        }\r\n        if (this._connectionState === \"Connecting\" /* Connecting */) {\r\n            this._logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\r\n            throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\r\n        }\r\n        if (this._connectionState === \"Disconnecting\" /* Disconnecting */) {\r\n            // A call to stop() induced this call to stopConnection and needs to be completed.\r\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\r\n            this._stopPromiseResolver();\r\n        }\r\n        if (error) {\r\n            this._logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n        if (this._sendQueue) {\r\n            this._sendQueue.stop().catch((e) => {\r\n                this._logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\r\n            });\r\n            this._sendQueue = undefined;\r\n        }\r\n        this.connectionId = undefined;\r\n        this._connectionState = \"Disconnected\" /* Disconnected */;\r\n        if (this._connectionStarted) {\r\n            this._connectionStarted = false;\r\n            try {\r\n                if (this.onclose) {\r\n                    this.onclose(error);\r\n                }\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n    _resolveUrl(url) {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n        if (!Platform.isBrowser || !window.document) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n        this._logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n    _resolveNegotiateUrl(url) {\r\n        const index = url.indexOf(\"?\");\r\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\r\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\r\n            negotiateUrl += \"/\";\r\n        }\r\n        negotiateUrl += \"negotiate\";\r\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\r\n        if (negotiateUrl.indexOf(\"negotiateVersion\") === -1) {\r\n            negotiateUrl += index === -1 ? \"?\" : \"&\";\r\n            negotiateUrl += \"negotiateVersion=\" + this._negotiateVersion;\r\n        }\r\n        return negotiateUrl;\r\n    }\r\n}\r\nfunction transportMatches(requestedTransport, actualTransport) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n/** @private */\r\nexport class TransportSendQueue {\r\n    constructor(_transport) {\r\n        this._transport = _transport;\r\n        this._buffer = [];\r\n        this._executing = true;\r\n        this._sendBufferedData = new PromiseSource();\r\n        this._transportResult = new PromiseSource();\r\n        this._sendLoopPromise = this._sendLoop();\r\n    }\r\n    send(data) {\r\n        this._bufferData(data);\r\n        if (!this._transportResult) {\r\n            this._transportResult = new PromiseSource();\r\n        }\r\n        return this._transportResult.promise;\r\n    }\r\n    stop() {\r\n        this._executing = false;\r\n        this._sendBufferedData.resolve();\r\n        return this._sendLoopPromise;\r\n    }\r\n    _bufferData(data) {\r\n        if (this._buffer.length && typeof (this._buffer[0]) !== typeof (data)) {\r\n            throw new Error(`Expected data to be of type ${typeof (this._buffer)} but was of type ${typeof (data)}`);\r\n        }\r\n        this._buffer.push(data);\r\n        this._sendBufferedData.resolve();\r\n    }\r\n    async _sendLoop() {\r\n        while (true) {\r\n            await this._sendBufferedData.promise;\r\n            if (!this._executing) {\r\n                if (this._transportResult) {\r\n                    this._transportResult.reject(\"Connection stopped.\");\r\n                }\r\n                break;\r\n            }\r\n            this._sendBufferedData = new PromiseSource();\r\n            const transportResult = this._transportResult;\r\n            this._transportResult = undefined;\r\n            const data = typeof (this._buffer[0]) === \"string\" ?\r\n                this._buffer.join(\"\") :\r\n                TransportSendQueue._concatBuffers(this._buffer);\r\n            this._buffer.length = 0;\r\n            try {\r\n                await this._transport.send(data);\r\n                transportResult.resolve();\r\n            }\r\n            catch (error) {\r\n                transportResult.reject(error);\r\n            }\r\n        }\r\n    }\r\n    static _concatBuffers(arrayBuffers) {\r\n        const totalLength = arrayBuffers.map((b) => b.byteLength).reduce((a, b) => a + b);\r\n        const result = new Uint8Array(totalLength);\r\n        let offset = 0;\r\n        for (const item of arrayBuffers) {\r\n            result.set(new Uint8Array(item), offset);\r\n            offset += item.byteLength;\r\n        }\r\n        return result.buffer;\r\n    }\r\n}\r\nclass PromiseSource {\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\r\n    }\r\n    resolve() {\r\n        this._resolver();\r\n    }\r\n    reject(reason) {\r\n        this._rejecter(reason);\r\n    }\r\n}\r\n//# sourceMappingURL=HttpConnection.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { MessageType } from \"./IHubProtocol\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nconst JSON_HUB_PROTOCOL_NAME = \"json\";\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol {\r\n    constructor() {\r\n        /** @inheritDoc */\r\n        this.name = JSON_HUB_PROTOCOL_NAME;\r\n        /** @inheritDoc */\r\n        this.version = 1;\r\n        /** @inheritDoc */\r\n        this.transferFormat = TransferFormat.Text;\r\n    }\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    parseMessages(input, logger) {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n        if (!input) {\r\n            return [];\r\n        }\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message);\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this._isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this._isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this._isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n        return hubMessages;\r\n    }\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    writeMessage(message) {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n    _isInvocationMessage(message) {\r\n        this._assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n        if (message.invocationId !== undefined) {\r\n            this._assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n    _isStreamItemMessage(message) {\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n    _isCompletionMessage(message) {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n        if (!message.result && message.error) {\r\n            this._assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n    _assertNotEmptyString(value, errorMessage) {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=JsonHubProtocol.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\nconst LogLevelNameMapping = {\r\n    trace: LogLevel.Trace,\r\n    debug: LogLevel.Debug,\r\n    info: LogLevel.Information,\r\n    information: LogLevel.Information,\r\n    warn: LogLevel.Warning,\r\n    warning: LogLevel.Warning,\r\n    error: LogLevel.Error,\r\n    critical: LogLevel.Critical,\r\n    none: LogLevel.None,\r\n};\r\nfunction parseLogLevel(name) {\r\n    // Case-insensitive matching via lower-casing\r\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\r\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\r\n    const mapping = LogLevelNameMapping[name.toLowerCase()];\r\n    if (typeof mapping !== \"undefined\") {\r\n        return mapping;\r\n    }\r\n    else {\r\n        throw new Error(`Unknown log level: ${name}`);\r\n    }\r\n}\r\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    configureLogging(logging) {\r\n        Arg.isRequired(logging, \"logging\");\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        }\r\n        else if (typeof logging === \"string\") {\r\n            const logLevel = parseLogLevel(logging);\r\n            this.logger = new ConsoleLogger(logLevel);\r\n        }\r\n        else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n        return this;\r\n    }\r\n    withUrl(url, transportTypeOrOptions) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isNotEmpty(url, \"url\");\r\n        this.url = url;\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = { ...this.httpConnectionOptions, ...transportTypeOrOptions };\r\n        }\r\n        else {\r\n            this.httpConnectionOptions = {\r\n                ...this.httpConnectionOptions,\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n        return this;\r\n    }\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    withHubProtocol(protocol) {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n    withAutomaticReconnect(retryDelaysOrReconnectPolicy) {\r\n        if (this.reconnectPolicy) {\r\n            throw new Error(\"A reconnectPolicy has already been set.\");\r\n        }\r\n        if (!retryDelaysOrReconnectPolicy) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy();\r\n        }\r\n        else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\r\n        }\r\n        else {\r\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\r\n        }\r\n        return this;\r\n    }\r\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\r\n    build() {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n        return HubConnection.create(connection, this.logger || NullLogger.instance, this.protocol || new JsonHubProtocol(), this.reconnectPolicy);\r\n    }\r\n}\r\nfunction isLogger(logger) {\r\n    return logger.log !== undefined;\r\n}\r\n//# sourceMappingURL=HubConnectionBuilder.js.map","<script>\r\n    import { onMount } from \"svelte\";\r\n    import * as signalR from \"@microsoft/signalr\";\r\n    let hubConnection = new signalR.HubConnectionBuilder()\r\n            .withUrl(\"/game\")\r\n            .build();\r\n    console.log(hubConnection)\r\n    hubConnection.on(\"FilledRoom\", function (data) {\r\n         console.log(\"fiiled room\");\r\n    });\r\n    hubConnection.on(\"GoInRoom\", function (data) {\r\n         console.log(\"GoInRoom\");\r\n    });\r\n    hubConnection.on(\"NotFoundRoom\", function (data) {\r\n         console.log(\"NotFoundRoom\");\r\n    });\r\n\r\n    function connect() {\r\n        console.log('sended')\r\n        hubConnection.invoke(\"Send\", \"message\");\r\n        // var xmlHttp = new XMLHttpRequest();\r\n        // xmlHttp.open(\"GET\", \"https://localhost:44300/Main/bon\", false); // false for synchronous request\r\n        // xmlHttp.send(null);\r\n        // console.log(xmlHttp.responseText);\r\n    }\r\n    hubConnection.start();\r\n</script>\r\n\r\n<main>\r\n    <h1>TERVOB</h1>\r\n    <div id=\"box\">\r\n        <div class=\"connect\">\r\n            <p>Start game</p>\r\n            <input type=\"text\" id=\"input-code\" />\r\n            <input type=\"button\" id=\"input-connect\" value=\"Connect\" on:click={connect}/>\r\n        </div>\r\n        <hr />\r\n        <div class=\"connect\">\r\n            <p>or</p>\r\n            <input\r\n                type=\"button\"\r\n                id=\"input-create\"\r\n                value=\"Create room\"\r\n            />\r\n            <input type=\"button\" id=\"input-instruction\" value=\"Instruction\" />\r\n            <select id=\"input-select\">\r\n                <option value=\"value1\">en</option>\r\n                <option value=\"value2\" selected>sk</option>\r\n                <option value=\"value3\">ru</option>\r\n            </select>\r\n        </div>\r\n        <div id=\"other\">\r\n            <a href=\"#\">Support author</a>\r\n            <i>Copyright 2022</i>\r\n        </div>\r\n    </div>\r\n</main>\r\n\r\n<style>\r\n    main {\r\n        height: 100%;\r\n        width: 100%;\r\n        margin: 0%;\r\n        background-color: #2c2f33;\r\n        position: fixed;\r\n    }\r\n    h1 {\r\n        color: white;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 900;\r\n        font-size: 3em;\r\n        line-height: 48px;\r\n        text-align: center;\r\n        margin-top: 5%;\r\n    }\r\n    #other {\r\n        margin-top: 35%;\r\n    }\r\n    i {\r\n        display: block;\r\n    }\r\n    hr {\r\n        border: 1px solid #2c2f33;\r\n    }\r\n    #box {\r\n        width: 26.5em;\r\n        height: 30em;\r\n        text-align: center;\r\n        margin-left: 50%;\r\n        transform: translateX(-50%);\r\n        background: #23272a;\r\n        border-radius: 10px;\r\n        margin-top: 2em;\r\n    }\r\n    .connect {\r\n        padding-top: 10%;\r\n        padding-bottom: 5%;\r\n    }\r\n    #input-code {\r\n        width: 30%;\r\n        height: 10%;\r\n        background: #40454b;\r\n        border-radius: 10px;\r\n        color: white;\r\n        border: none;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: normal;\r\n    }\r\n    #input-code:focus {\r\n        outline: none;\r\n    }\r\n    #input-connect {\r\n        width: 25%;\r\n        height: 15%;\r\n        background: #ed4245;\r\n        border-radius: 10px;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: normal;\r\n        font-size: 1em;\r\n        margin-left: 5%;\r\n        color: white;\r\n        border: none;\r\n    }\r\n    #input-connect:hover {\r\n        background: rgb(192, 28, 31);\r\n        cursor: pointer;\r\n    }\r\n    #input-connect:active {\r\n        background: rgb(124, 2, 4);\r\n    }\r\n    #input-create {\r\n        width: 25%;\r\n        height: 10%;\r\n        background: #2686fb;\r\n        border-radius: 10px;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: normal;\r\n        font-size: 1em;\r\n        color: white;\r\n        border: none;\r\n    }\r\n    #input-create:hover {\r\n        background: #1064ca;\r\n        cursor: pointer;\r\n    }\r\n    #input-create:active {\r\n        background: #033470;\r\n    }\r\n    #input-instruction {\r\n        width: 25%;\r\n        height: 10%;\r\n        background: #40454b;\r\n        border-radius: 10px;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: normal;\r\n        font-size: 1em;\r\n        margin-left: 5%;\r\n        color: white;\r\n        border: none;\r\n    }\r\n    #input-instruction:hover {\r\n        background: #3a3d41;\r\n        cursor: pointer;\r\n    }\r\n    #input-instruction:active {\r\n        background: rgb(40, 41, 43);\r\n    }\r\n    p {\r\n        margin-top: -10%;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 500;\r\n        font-size: 1.5em;\r\n        line-height: 48px;\r\n        color: #717981;\r\n    }\r\n    #input-select {\r\n        width: 20%;\r\n        height: 10%;\r\n        background: #40454b;\r\n        border-radius: 10px;\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: normal;\r\n        font-size: 1em;\r\n        margin-left: 5%;\r\n        color: white;\r\n        border: none;\r\n    }\r\n    #input-select:hover {\r\n        background: #3a3d41;\r\n        cursor: pointer;\r\n    }\r\n    #input-select:active {\r\n        background: rgb(40, 41, 43);\r\n    }\r\n    #input-select:focus {\r\n        outline: none;\r\n    }\r\n    option {\r\n        border: none;\r\n        outline: none;\r\n    }\r\n</style>\r\n","import App from './App.svelte';\nimport Play from './Play.svelte';\nimport Index from './Index.svelte';\nimport Lobby from './Lobby.svelte';\n\nconst app = new Index({\n\ttarget: document.body\n});\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","detach","parentNode","removeChild","element","name","document","createElement","space","data","createTextNode","attr","attribute","value","removeAttribute","getAttribute","setAttribute","current_component","set_current_component","component","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","seen_callbacks","Set","flushidx","flush","saved_component","length","update","$$","pop","i","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","make_dirty","then","fill","init","options","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_mount","on_destroy","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","c","intro","block","delete","local","anchor","customElement","m","new_on_destroy","map","filter","mount_component","HttpError","Error","constructor","errorMessage","statusCode","trueProto","prototype","super","this","__proto__","TimeoutError","AbortError","UnsupportedTransportError","message","transport","errorType","DisabledTransportError","FailedToStartTransportError","FailedToNegotiateWithServerError","AggregateErrors","innerErrors","HttpResponse","statusText","content","HttpClient","get","url","send","method","post","getCookieString","LogLevel","NullLogger","log","_logLevel","_message","Arg","static","val","match","values","Platform","isBrowser","window","isWebWorker","self","isNode","getDataDetail","includeContent","detail","isArrayBuffer","byteLength","view","Uint8Array","str","num","toString","substr","formatArrayBuffer","ArrayBuffer","async","sendMessage","logger","transportName","httpClient","accessTokenFactory","headers","token","Authorization","getUserAgentHeader","Trace","logMessageContent","responseType","response","timeout","withCredentials","SubjectSubscription","subject","observer","_subject","_observer","dispose","index","observers","indexOf","splice","cancelCallback","catch","_","ConsoleLogger","minimumLogLevel","_minLevel","out","console","logLevel","msg","Date","toISOString","Critical","error","Warning","warn","Information","info","userAgentHeaderName","constructUserAgent","getOsName","getRuntime","getRuntimeVersion","version","os","runtime","runtimeVersion","userAgent","majorAndMinor","split","process","platform","versions","getErrorString","e","stack","FetchHttpClient","_logger","fetch","requireFunc","__webpack_require__","__non_webpack_require__","require","_jar","CookieJar","_fetchType","bind","globalThis","global","getGlobalThis","AbortController","_abortControllerType","request","abortSignal","aborted","abortController","onabort","abort","timeoutId","msTimeout","setTimeout","body","cache","credentials","mode","redirect","signal","clearTimeout","ok","deserializeContent","status","payload","cookies","getCookies","join","arrayBuffer","text","XhrHttpClient","reject","xhr","XMLHttpRequest","open","undefined","setRequestHeader","keys","header","onload","responseText","onerror","ontimeout","DefaultHttpClient","_httpClient","TextMessageFormat","output","RecordSeparator","input","messages","RecordSeparatorCode","String","fromCharCode","HandshakeProtocol","writeHandshakeRequest","handshakeRequest","write","JSON","stringify","parseHandshakeResponse","messageData","remainingData","binaryData","separatorIndex","responseLength","apply","slice","call","buffer","textData","substring","parse","type","MessageType","Subject","next","item","err","complete","subscribe","HubConnectionState","HubConnection","connection","protocol","reconnectPolicy","_nextKeepAlive","_freezeEventListener","isRequired","serverTimeoutInMilliseconds","keepAliveIntervalInMilliseconds","_protocol","_reconnectPolicy","_handshakeProtocol","onreceive","_processIncomingData","onclose","_connectionClosed","_callbacks","_methods","_closedCallbacks","_reconnectingCallbacks","_reconnectedCallbacks","_invocationId","_receivedHandshakeResponse","_connectionState","Disconnected","_connectionStarted","_cachedPingMessage","writeMessage","Ping","state","connectionId","baseUrl","Reconnecting","start","_startPromise","_startWithStateTransitions","Connecting","Debug","_startInternal","addEventListener","Connected","_stopDuringStartError","handshakePromise","_handshakeResolver","_handshakeRejecter","transferFormat","_sendMessage","_cleanupTimeout","_resetTimeoutPeriod","_resetKeepAliveInterval","_cleanupPingTimer","stop","startPromise","_stopPromise","_stopInternal","Disconnecting","_reconnectDelayHandle","_completeClose","stream","methodName","args","streams","streamIds","_replaceStreamingParams","invocationDescriptor","_createStreamInvocation","promiseQueue","cancelInvocation","_createCancelInvocation","invocationId","_sendWithProtocol","invocationEvent","Completion","_launchStreams","sendPromise","_createInvocation","invoke","result","on","newMethod","toLowerCase","off","handlers","removeIdx","onreconnecting","onreconnected","_processHandshakeResponse","parseMessages","Invocation","_invokeClientMethod","StreamItem","Close","allowReconnect","responseMessage","features","inherentKeepAlive","getTime","_timeoutHandle","serverTimeout","_pingServerHandle","nextPing","invocationMessage","methods","arguments","_cancelCallbacksWithError","_reconnect","removeEventListener","reconnectStartTime","now","previousReconnectAttempts","retryError","nextRetryDelay","_getNextRetryDelay","previousRetryCount","elapsedMilliseconds","retryReason","nextRetryDelayInMilliseconds","key","nonblocking","streamId","_createCompletionMessage","_createStreamItemMessage","argument","_isObservable","arg","StreamInvocation","id","CancelInvocation","DEFAULT_RETRY_DELAYS_IN_MILLISECONDS","DefaultReconnectPolicy","retryDelays","_retryDelays","retryContext","HeaderNames","HttpTransportType","TransferFormat","Cookie","_isAborted","LongPollingTransport","_accessTokenFactory","_pollAbort","_options","_running","pollAborted","isIn","_url","Binary","pollOptions","_getAccessToken","_updateHeaderToken","pollUrl","_closeError","_receiving","_poll","_raiseOnClose","deleteOptions","logMessage","ServerSentEventsTransport","encodeURIComponent","eventSource","opened","Text","EventSource","onmessage","_close","onopen","_eventSource","close","WebSocketTransport","webSocketConstructor","_logMessageContent","_webSocketConstructor","_headers","webSocket","replace","binaryType","_event","_webSocket","event","ErrorEvent","readyState","OPEN","_isCloseEvent","wasClean","code","reason","HttpConnection","_stopPromiseResolver","_negotiateVersion","_resolveUrl","webSocketModule","eventSourceModule","WebSocket","_startInternalPromise","_sendQueue","TransportSendQueue","_stopError","_stopConnection","skipNegotiation","WebSockets","_constructTransport","_startTransport","negotiateResponse","redirects","_getNegotiationResponse","ProtocolVersion","accessToken","_createTransport","negotiateUrl","_resolveNegotiateUrl","negotiateVersion","connectionToken","_createConnectUrl","requestedTransport","requestedTransferFormat","connectUrl","_isITransport","transportExceptions","transports","availableTransports","negotiate","endpoint","transportOrError","_resolveTransportOrError","ex","ServerSentEvents","LongPolling","connect","actualTransport","transportMatches","transferFormats","s","lastIndexOf","aTag","href","_transport","_buffer","_executing","_sendBufferedData","PromiseSource","_transportResult","_sendLoopPromise","_sendLoop","_bufferData","promise","transportResult","_concatBuffers","arrayBuffers","totalLength","reduce","offset","set","_resolver","_rejecter","JsonHubProtocol","hubMessages","parsedMessage","_isInvocationMessage","_isStreamItemMessage","_isCompletionMessage","_assertNotEmptyString","LogLevelNameMapping","trace","debug","information","warning","critical","none","None","HubConnectionBuilder","configureLogging","logging","mapping","parseLogLevel","withUrl","transportTypeOrOptions","isNotEmpty","httpConnectionOptions","withHubProtocol","withAutomaticReconnect","retryDelaysOrReconnectPolicy","isArray","build","handler","insertBefore","insert","hubConnection","signalR.HubConnectionBuilder","$destroy","detaching","d","destroy_component","$on","$set","$$props","obj","$$set"],"mappings":"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"}