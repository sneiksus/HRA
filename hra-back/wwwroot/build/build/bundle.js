var app=function(){"use strict";function t(){}function e(t){return t()}function o(){return Object.create(null)}function n(t){t.forEach(e)}function r(t){return"function"==typeof t}function s(t,e){return t!=t?e==e:t!==e||t&&"object"==typeof t||"function"==typeof t}function i(t,e){t.appendChild(e)}function c(t){t.parentNode.removeChild(t)}function a(t){return document.createElement(t)}function l(){return t=" ",document.createTextNode(t);var t}function h(t,e,o){null==o?t.removeAttribute(e):t.getAttribute(e)!==o&&t.setAttribute(e,o)}let u;function g(t){u=t}const d=[],p=[],_=[],f=[],m=Promise.resolve();let w=!1;function b(t){_.push(t)}const v=new Set;let y=0;function C(){const t=u;do{for(;y<d.length;){const t=d[y];y++,g(t),S(t.$$)}for(g(null),d.length=0,y=0;p.length;)p.pop()();for(let t=0;t<_.length;t+=1){const e=_[t];v.has(e)||(v.add(e),e())}_.length=0}while(d.length);for(;f.length;)f.pop()();w=!1,v.clear(),g(t)}function S(t){if(null!==t.fragment){t.update(),n(t.before_update);const e=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,e),t.after_update.forEach(b)}}const k=new Set;function E(t,e){-1===t.$$.dirty[0]&&(d.push(t),w||(w=!0,m.then(C)),t.$$.dirty.fill(0)),t.$$.dirty[e/31|0]|=1<<e%31}function T(s,i,a,l,h,d,p,_=[-1]){const f=u;g(s);const m=s.$$={fragment:null,ctx:null,props:d,update:t,not_equal:h,bound:o(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(i.context||(f?f.$$.context:[])),callbacks:o(),dirty:_,skip_bound:!1,root:i.target||f.$$.root};p&&p(m.root);let w=!1;if(m.ctx=a?a(s,i.props||{},((t,e,...o)=>{const n=o.length?o[0]:e;return m.ctx&&h(m.ctx[t],m.ctx[t]=n)&&(!m.skip_bound&&m.bound[t]&&m.bound[t](n),w&&E(s,t)),e})):[],m.update(),w=!0,n(m.before_update),m.fragment=!!l&&l(m.ctx),i.target){if(i.hydrate){const t=function(t){return Array.from(t.childNodes)}(i.target);m.fragment&&m.fragment.l(t),t.forEach(c)}else m.fragment&&m.fragment.c();i.intro&&((v=s.$$.fragment)&&v.i&&(k.delete(v),v.i(y))),function(t,o,s,i){const{fragment:c,on_mount:a,on_destroy:l,after_update:h}=t.$$;c&&c.m(o,s),i||b((()=>{const o=a.map(e).filter(r);l?l.push(...o):n(o),t.$$.on_mount=[]})),h.forEach(b)}(s,i.target,i.anchor,i.customElement),C()}var v,y;g(f)}class $ extends Error{constructor(t,e){const o=new.target.prototype;super(`${t}: Status code '${e}'`),this.statusCode=e,this.__proto__=o}}class I extends Error{constructor(t="A timeout occurred."){const e=new.target.prototype;super(t),this.__proto__=e}}class P extends Error{constructor(t="An abort occurred."){const e=new.target.prototype;super(t),this.__proto__=e}}class D extends Error{constructor(t,e){const o=new.target.prototype;super(t),this.transport=e,this.errorType="UnsupportedTransportError",this.__proto__=o}}class R extends Error{constructor(t,e){const o=new.target.prototype;super(t),this.transport=e,this.errorType="DisabledTransportError",this.__proto__=o}}class x extends Error{constructor(t,e){const o=new.target.prototype;super(t),this.transport=e,this.errorType="FailedToStartTransportError",this.__proto__=o}}class H extends Error{constructor(t){const e=new.target.prototype;super(t),this.errorType="FailedToNegotiateWithServerError",this.__proto__=e}}class N extends Error{constructor(t,e){const o=new.target.prototype;super(t),this.innerErrors=e,this.__proto__=o}}class W{constructor(t,e,o){this.statusCode=t,this.statusText=e,this.content=o}}class A{get(t,e){return this.send({...e,method:"GET",url:t})}post(t,e){return this.send({...e,method:"POST",url:t})}delete(t,e){return this.send({...e,method:"DELETE",url:t})}getCookieString(t){return""}}var j;!function(t){t[t.Trace=0]="Trace",t[t.Debug=1]="Debug",t[t.Information=2]="Information",t[t.Warning=3]="Warning",t[t.Error=4]="Error",t[t.Critical=5]="Critical",t[t.None=6]="None"}(j||(j={}));class L{constructor(){}log(t,e){}}L.instance=new L;class M{static isRequired(t,e){if(null==t)throw new Error(`The '${e}' argument is required.`)}static isNotEmpty(t,e){if(!t||t.match(/^\s*$/))throw new Error(`The '${e}' argument should not be empty.`)}static isIn(t,e,o){if(!(t in e))throw new Error(`Unknown ${o} value: ${t}.`)}}class q{static get isBrowser(){return"object"==typeof window}static get isWebWorker(){return"object"==typeof self&&"importScripts"in self}static get isNode(){return!this.isBrowser&&!this.isWebWorker}}function F(t,e){let o="";return O(t)?(o=`Binary data of length ${t.byteLength}`,e&&(o+=`. Content: '${function(t){const e=new Uint8Array(t);let o="";return e.forEach((t=>{o+=`0x${t<16?"0":""}${t.toString(16)} `})),o.substr(0,o.length-1)}(t)}'`)):"string"==typeof t&&(o=`String data of length ${t.length}`,e&&(o+=`. Content: '${t}'`)),o}function O(t){return t&&"undefined"!=typeof ArrayBuffer&&(t instanceof ArrayBuffer||t.constructor&&"ArrayBuffer"===t.constructor.name)}async function U(t,e,o,n,r,s,i){let c={};if(r){const t=await r();t&&(c={Authorization:`Bearer ${t}`})}const[a,l]=X();c[a]=l,t.log(j.Trace,`(${e} transport) sending data. ${F(s,i.logMessageContent)}.`);const h=O(s)?"arraybuffer":"text",u=await o.post(n,{content:s,headers:{...c,...i.headers},responseType:h,timeout:i.timeout,withCredentials:i.withCredentials});t.log(j.Trace,`(${e} transport) request complete. Response status: ${u.statusCode}.`)}class z{constructor(t,e){this._subject=t,this._observer=e}dispose(){const t=this._subject.observers.indexOf(this._observer);t>-1&&this._subject.observers.splice(t,1),0===this._subject.observers.length&&this._subject.cancelCallback&&this._subject.cancelCallback().catch((t=>{}))}}class B{constructor(t){this._minLevel=t,this.out=console}log(t,e){if(t>=this._minLevel){const o=`[${(new Date).toISOString()}] ${j[t]}: ${e}`;switch(t){case j.Critical:case j.Error:this.out.error(o);break;case j.Warning:this.out.warn(o);break;case j.Information:this.out.info(o);break;default:this.out.log(o)}}}}function X(){let t="X-SignalR-User-Agent";return q.isNode&&(t="User-Agent"),[t,K("6.0.1",V(),Q(),J())]}function K(t,e,o,n){let r="Microsoft SignalR/";const s=t.split(".");return r+=`${s[0]}.${s[1]}`,r+=` (${t}; `,r+=e&&""!==e?`${e}; `:"Unknown OS; ",r+=`${o}`,r+=n?`; ${n}`:"; Unknown Runtime Version",r+=")",r}function V(){if(!q.isNode)return"";switch(process.platform){case"win32":return"Windows NT";case"darwin":return"macOS";case"linux":return"Linux";default:return process.platform}}function J(){if(q.isNode)return process.versions.node}function Q(){return q.isNode?"NodeJS":"Browser"}function G(t){return t.stack?t.stack:t.message?t.message:`${t}`}class Y extends A{constructor(t){if(super(),this._logger=t,"undefined"==typeof fetch){const t="function"==typeof __webpack_require__?__non_webpack_require__:require;this._jar=new(t("tough-cookie").CookieJar),this._fetchType=t("node-fetch"),this._fetchType=t("fetch-cookie")(this._fetchType,this._jar)}else this._fetchType=fetch.bind(function(){if("undefined"!=typeof globalThis)return globalThis;if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if("undefined"!=typeof global)return global;throw new Error("could not find global")}());if("undefined"==typeof AbortController){const t="function"==typeof __webpack_require__?__non_webpack_require__:require;this._abortControllerType=t("abort-controller")}else this._abortControllerType=AbortController}async send(t){if(t.abortSignal&&t.abortSignal.aborted)throw new P;if(!t.method)throw new Error("No method defined.");if(!t.url)throw new Error("No url defined.");const e=new this._abortControllerType;let o;t.abortSignal&&(t.abortSignal.onabort=()=>{e.abort(),o=new P});let n,r=null;if(t.timeout){const n=t.timeout;r=setTimeout((()=>{e.abort(),this._logger.log(j.Warning,"Timeout from HTTP request."),o=new I}),n)}try{n=await this._fetchType(t.url,{body:t.content,cache:"no-cache",credentials:!0===t.withCredentials?"include":"same-origin",headers:{"Content-Type":"text/plain;charset=UTF-8","X-Requested-With":"XMLHttpRequest",...t.headers},method:t.method,mode:"cors",redirect:"follow",signal:e.signal})}catch(t){if(o)throw o;throw this._logger.log(j.Warning,`Error from HTTP request. ${t}.`),t}finally{r&&clearTimeout(r),t.abortSignal&&(t.abortSignal.onabort=null)}if(!n.ok){const t=await Z(n,"text");throw new $(t||n.statusText,n.status)}const s=Z(n,t.responseType),i=await s;return new W(n.status,n.statusText,i)}getCookieString(t){let e="";return q.isNode&&this._jar&&this._jar.getCookies(t,((t,o)=>e=o.join("; "))),e}}function Z(t,e){let o;switch(e){case"arraybuffer":o=t.arrayBuffer();break;case"text":default:o=t.text();break;case"blob":case"document":case"json":throw new Error(`${e} is not supported.`)}return o}class tt extends A{constructor(t){super(),this._logger=t}send(t){return t.abortSignal&&t.abortSignal.aborted?Promise.reject(new P):t.method?t.url?new Promise(((e,o)=>{const n=new XMLHttpRequest;n.open(t.method,t.url,!0),n.withCredentials=void 0===t.withCredentials||t.withCredentials,n.setRequestHeader("X-Requested-With","XMLHttpRequest"),n.setRequestHeader("Content-Type","text/plain;charset=UTF-8");const r=t.headers;r&&Object.keys(r).forEach((t=>{n.setRequestHeader(t,r[t])})),t.responseType&&(n.responseType=t.responseType),t.abortSignal&&(t.abortSignal.onabort=()=>{n.abort(),o(new P)}),t.timeout&&(n.timeout=t.timeout),n.onload=()=>{t.abortSignal&&(t.abortSignal.onabort=null),n.status>=200&&n.status<300?e(new W(n.status,n.statusText,n.response||n.responseText)):o(new $(n.response||n.responseText||n.statusText,n.status))},n.onerror=()=>{this._logger.log(j.Warning,`Error from HTTP request. ${n.status}: ${n.statusText}.`),o(new $(n.statusText,n.status))},n.ontimeout=()=>{this._logger.log(j.Warning,"Timeout from HTTP request."),o(new I)},n.send(t.content||"")})):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}}class et extends A{constructor(t){if(super(),"undefined"!=typeof fetch||q.isNode)this._httpClient=new Y(t);else{if("undefined"==typeof XMLHttpRequest)throw new Error("No usable HttpClient found.");this._httpClient=new tt(t)}}send(t){return t.abortSignal&&t.abortSignal.aborted?Promise.reject(new P):t.method?t.url?this._httpClient.send(t):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}getCookieString(t){return this._httpClient.getCookieString(t)}}class ot{static write(t){return`${t}${ot.RecordSeparator}`}static parse(t){if(t[t.length-1]!==ot.RecordSeparator)throw new Error("Message is incomplete.");const e=t.split(ot.RecordSeparator);return e.pop(),e}}ot.RecordSeparatorCode=30,ot.RecordSeparator=String.fromCharCode(ot.RecordSeparatorCode);class nt{writeHandshakeRequest(t){return ot.write(JSON.stringify(t))}parseHandshakeResponse(t){let e,o;if(O(t)){const n=new Uint8Array(t),r=n.indexOf(ot.RecordSeparatorCode);if(-1===r)throw new Error("Message is incomplete.");const s=r+1;e=String.fromCharCode.apply(null,Array.prototype.slice.call(n.slice(0,s))),o=n.byteLength>s?n.slice(s).buffer:null}else{const n=t,r=n.indexOf(ot.RecordSeparator);if(-1===r)throw new Error("Message is incomplete.");const s=r+1;e=n.substring(0,s),o=n.length>s?n.substring(s):null}const n=ot.parse(e),r=JSON.parse(n[0]);if(r.type)throw new Error("Expected a handshake response from the server.");return[o,r]}}var rt;!function(t){t[t.Invocation=1]="Invocation",t[t.StreamItem=2]="StreamItem",t[t.Completion=3]="Completion",t[t.StreamInvocation=4]="StreamInvocation",t[t.CancelInvocation=5]="CancelInvocation",t[t.Ping=6]="Ping",t[t.Close=7]="Close"}(rt||(rt={}));class st{constructor(){this.observers=[]}next(t){for(const e of this.observers)e.next(t)}error(t){for(const e of this.observers)e.error&&e.error(t)}complete(){for(const t of this.observers)t.complete&&t.complete()}subscribe(t){return this.observers.push(t),new z(this,t)}}var it;!function(t){t.Disconnected="Disconnected",t.Connecting="Connecting",t.Connected="Connected",t.Disconnecting="Disconnecting",t.Reconnecting="Reconnecting"}(it||(it={}));class ct{constructor(t,e,o,n){this._nextKeepAlive=0,this._freezeEventListener=()=>{this._logger.log(j.Warning,"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://docs.microsoft.com/aspnet/core/signalr/javascript-client#bsleep")},M.isRequired(t,"connection"),M.isRequired(e,"logger"),M.isRequired(o,"protocol"),this.serverTimeoutInMilliseconds=3e4,this.keepAliveIntervalInMilliseconds=15e3,this._logger=e,this._protocol=o,this.connection=t,this._reconnectPolicy=n,this._handshakeProtocol=new nt,this.connection.onreceive=t=>this._processIncomingData(t),this.connection.onclose=t=>this._connectionClosed(t),this._callbacks={},this._methods={},this._closedCallbacks=[],this._reconnectingCallbacks=[],this._reconnectedCallbacks=[],this._invocationId=0,this._receivedHandshakeResponse=!1,this._connectionState=it.Disconnected,this._connectionStarted=!1,this._cachedPingMessage=this._protocol.writeMessage({type:rt.Ping})}static create(t,e,o,n){return new ct(t,e,o,n)}get state(){return this._connectionState}get connectionId(){return this.connection&&this.connection.connectionId||null}get baseUrl(){return this.connection.baseUrl||""}set baseUrl(t){if(this._connectionState!==it.Disconnected&&this._connectionState!==it.Reconnecting)throw new Error("The HubConnection must be in the Disconnected or Reconnecting state to change the url.");if(!t)throw new Error("The HubConnection url must be a valid url.");this.connection.baseUrl=t}start(){return this._startPromise=this._startWithStateTransitions(),this._startPromise}async _startWithStateTransitions(){if(this._connectionState!==it.Disconnected)return Promise.reject(new Error("Cannot start a HubConnection that is not in the 'Disconnected' state."));this._connectionState=it.Connecting,this._logger.log(j.Debug,"Starting HubConnection.");try{await this._startInternal(),q.isBrowser&&document&&document.addEventListener("freeze",this._freezeEventListener),this._connectionState=it.Connected,this._connectionStarted=!0,this._logger.log(j.Debug,"HubConnection connected successfully.")}catch(t){return this._connectionState=it.Disconnected,this._logger.log(j.Debug,`HubConnection failed to start successfully because of error '${t}'.`),Promise.reject(t)}}async _startInternal(){this._stopDuringStartError=void 0,this._receivedHandshakeResponse=!1;const t=new Promise(((t,e)=>{this._handshakeResolver=t,this._handshakeRejecter=e}));await this.connection.start(this._protocol.transferFormat);try{const e={protocol:this._protocol.name,version:this._protocol.version};if(this._logger.log(j.Debug,"Sending handshake request."),await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(e)),this._logger.log(j.Information,`Using HubProtocol '${this._protocol.name}'.`),this._cleanupTimeout(),this._resetTimeoutPeriod(),this._resetKeepAliveInterval(),await t,this._stopDuringStartError)throw this._stopDuringStartError}catch(t){throw this._logger.log(j.Debug,`Hub handshake failed with error '${t}' during start(). Stopping HubConnection.`),this._cleanupTimeout(),this._cleanupPingTimer(),await this.connection.stop(t),t}}async stop(){const t=this._startPromise;this._stopPromise=this._stopInternal(),await this._stopPromise;try{await t}catch(t){}}_stopInternal(t){return this._connectionState===it.Disconnected?(this._logger.log(j.Debug,`Call to HubConnection.stop(${t}) ignored because it is already in the disconnected state.`),Promise.resolve()):this._connectionState===it.Disconnecting?(this._logger.log(j.Debug,`Call to HttpConnection.stop(${t}) ignored because the connection is already in the disconnecting state.`),this._stopPromise):(this._connectionState=it.Disconnecting,this._logger.log(j.Debug,"Stopping HubConnection."),this._reconnectDelayHandle?(this._logger.log(j.Debug,"Connection stopped during reconnect delay. Done reconnecting."),clearTimeout(this._reconnectDelayHandle),this._reconnectDelayHandle=void 0,this._completeClose(),Promise.resolve()):(this._cleanupTimeout(),this._cleanupPingTimer(),this._stopDuringStartError=t||new Error("The connection was stopped before the hub handshake could complete."),this.connection.stop(t)))}stream(t,...e){const[o,n]=this._replaceStreamingParams(e),r=this._createStreamInvocation(t,e,n);let s;const i=new st;return i.cancelCallback=()=>{const t=this._createCancelInvocation(r.invocationId);return delete this._callbacks[r.invocationId],s.then((()=>this._sendWithProtocol(t)))},this._callbacks[r.invocationId]=(t,e)=>{e?i.error(e):t&&(t.type===rt.Completion?t.error?i.error(new Error(t.error)):i.complete():i.next(t.item))},s=this._sendWithProtocol(r).catch((t=>{i.error(t),delete this._callbacks[r.invocationId]})),this._launchStreams(o,s),i}_sendMessage(t){return this._resetKeepAliveInterval(),this.connection.send(t)}_sendWithProtocol(t){return this._sendMessage(this._protocol.writeMessage(t))}send(t,...e){const[o,n]=this._replaceStreamingParams(e),r=this._sendWithProtocol(this._createInvocation(t,e,!0,n));return this._launchStreams(o,r),r}invoke(t,...e){const[o,n]=this._replaceStreamingParams(e),r=this._createInvocation(t,e,!1,n);return new Promise(((t,e)=>{this._callbacks[r.invocationId]=(o,n)=>{n?e(n):o&&(o.type===rt.Completion?o.error?e(new Error(o.error)):t(o.result):e(new Error(`Unexpected message type: ${o.type}`)))};const n=this._sendWithProtocol(r).catch((t=>{e(t),delete this._callbacks[r.invocationId]}));this._launchStreams(o,n)}))}on(t,e){t&&e&&(t=t.toLowerCase(),this._methods[t]||(this._methods[t]=[]),-1===this._methods[t].indexOf(e)&&this._methods[t].push(e))}off(t,e){if(!t)return;t=t.toLowerCase();const o=this._methods[t];if(o)if(e){const n=o.indexOf(e);-1!==n&&(o.splice(n,1),0===o.length&&delete this._methods[t])}else delete this._methods[t]}onclose(t){t&&this._closedCallbacks.push(t)}onreconnecting(t){t&&this._reconnectingCallbacks.push(t)}onreconnected(t){t&&this._reconnectedCallbacks.push(t)}_processIncomingData(t){if(this._cleanupTimeout(),this._receivedHandshakeResponse||(t=this._processHandshakeResponse(t),this._receivedHandshakeResponse=!0),t){const e=this._protocol.parseMessages(t,this._logger);for(const t of e)switch(t.type){case rt.Invocation:this._invokeClientMethod(t);break;case rt.StreamItem:case rt.Completion:{const e=this._callbacks[t.invocationId];if(e){t.type===rt.Completion&&delete this._callbacks[t.invocationId];try{e(t)}catch(t){this._logger.log(j.Error,`Stream callback threw error: ${G(t)}`)}}break}case rt.Ping:break;case rt.Close:{this._logger.log(j.Information,"Close message received from server.");const e=t.error?new Error("Server returned an error on close: "+t.error):void 0;!0===t.allowReconnect?this.connection.stop(e):this._stopPromise=this._stopInternal(e);break}default:this._logger.log(j.Warning,`Invalid message type: ${t.type}.`)}}this._resetTimeoutPeriod()}_processHandshakeResponse(t){let e,o;try{[o,e]=this._handshakeProtocol.parseHandshakeResponse(t)}catch(t){const e="Error parsing handshake response: "+t;this._logger.log(j.Error,e);const o=new Error(e);throw this._handshakeRejecter(o),o}if(e.error){const t="Server returned handshake error: "+e.error;this._logger.log(j.Error,t);const o=new Error(t);throw this._handshakeRejecter(o),o}return this._logger.log(j.Debug,"Server handshake complete."),this._handshakeResolver(),o}_resetKeepAliveInterval(){this.connection.features.inherentKeepAlive||(this._nextKeepAlive=(new Date).getTime()+this.keepAliveIntervalInMilliseconds,this._cleanupPingTimer())}_resetTimeoutPeriod(){if(!(this.connection.features&&this.connection.features.inherentKeepAlive||(this._timeoutHandle=setTimeout((()=>this.serverTimeout()),this.serverTimeoutInMilliseconds),void 0!==this._pingServerHandle))){let t=this._nextKeepAlive-(new Date).getTime();t<0&&(t=0),this._pingServerHandle=setTimeout((async()=>{if(this._connectionState===it.Connected)try{await this._sendMessage(this._cachedPingMessage)}catch{this._cleanupPingTimer()}}),t)}}serverTimeout(){this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server."))}_invokeClientMethod(t){const e=this._methods[t.target.toLowerCase()];if(e){try{e.forEach((e=>e.apply(this,t.arguments)))}catch(e){this._logger.log(j.Error,`A callback for the method ${t.target.toLowerCase()} threw error '${e}'.`)}if(t.invocationId){const t="Server requested a response, which is not supported in this version of the client.";this._logger.log(j.Error,t),this._stopPromise=this._stopInternal(new Error(t))}}else this._logger.log(j.Warning,`No client method with the name '${t.target}' found.`)}_connectionClosed(t){this._logger.log(j.Debug,`HubConnection.connectionClosed(${t}) called while in state ${this._connectionState}.`),this._stopDuringStartError=this._stopDuringStartError||t||new Error("The underlying connection was closed before the hub handshake could complete."),this._handshakeResolver&&this._handshakeResolver(),this._cancelCallbacksWithError(t||new Error("Invocation canceled due to the underlying connection being closed.")),this._cleanupTimeout(),this._cleanupPingTimer(),this._connectionState===it.Disconnecting?this._completeClose(t):this._connectionState===it.Connected&&this._reconnectPolicy?this._reconnect(t):this._connectionState===it.Connected&&this._completeClose(t)}_completeClose(t){if(this._connectionStarted){this._connectionState=it.Disconnected,this._connectionStarted=!1,q.isBrowser&&document&&document.removeEventListener("freeze",this._freezeEventListener);try{this._closedCallbacks.forEach((e=>e.apply(this,[t])))}catch(e){this._logger.log(j.Error,`An onclose callback called with error '${t}' threw error '${e}'.`)}}}async _reconnect(t){const e=Date.now();let o=0,n=void 0!==t?t:new Error("Attempting to reconnect due to a unknown error."),r=this._getNextRetryDelay(o++,0,n);if(null===r)return this._logger.log(j.Debug,"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt."),void this._completeClose(t);if(this._connectionState=it.Reconnecting,t?this._logger.log(j.Information,`Connection reconnecting because of error '${t}'.`):this._logger.log(j.Information,"Connection reconnecting."),0!==this._reconnectingCallbacks.length){try{this._reconnectingCallbacks.forEach((e=>e.apply(this,[t])))}catch(e){this._logger.log(j.Error,`An onreconnecting callback called with error '${t}' threw error '${e}'.`)}if(this._connectionState!==it.Reconnecting)return void this._logger.log(j.Debug,"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.")}for(;null!==r;){if(this._logger.log(j.Information,`Reconnect attempt number ${o} will start in ${r} ms.`),await new Promise((t=>{this._reconnectDelayHandle=setTimeout(t,r)})),this._reconnectDelayHandle=void 0,this._connectionState!==it.Reconnecting)return void this._logger.log(j.Debug,"Connection left the reconnecting state during reconnect delay. Done reconnecting.");try{if(await this._startInternal(),this._connectionState=it.Connected,this._logger.log(j.Information,"HubConnection reconnected successfully."),0!==this._reconnectedCallbacks.length)try{this._reconnectedCallbacks.forEach((t=>t.apply(this,[this.connection.connectionId])))}catch(t){this._logger.log(j.Error,`An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${t}'.`)}return}catch(t){if(this._logger.log(j.Information,`Reconnect attempt failed because of error '${t}'.`),this._connectionState!==it.Reconnecting)return this._logger.log(j.Debug,`Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`),void(this._connectionState===it.Disconnecting&&this._completeClose());n=t instanceof Error?t:new Error(t.toString()),r=this._getNextRetryDelay(o++,Date.now()-e,n)}}this._logger.log(j.Information,`Reconnect retries have been exhausted after ${Date.now()-e} ms and ${o} failed attempts. Connection disconnecting.`),this._completeClose()}_getNextRetryDelay(t,e,o){try{return this._reconnectPolicy.nextRetryDelayInMilliseconds({elapsedMilliseconds:e,previousRetryCount:t,retryReason:o})}catch(o){return this._logger.log(j.Error,`IRetryPolicy.nextRetryDelayInMilliseconds(${t}, ${e}) threw error '${o}'.`),null}}_cancelCallbacksWithError(t){const e=this._callbacks;this._callbacks={},Object.keys(e).forEach((o=>{const n=e[o];try{n(null,t)}catch(e){this._logger.log(j.Error,`Stream 'error' callback called with '${t}' threw error: ${G(e)}`)}}))}_cleanupPingTimer(){this._pingServerHandle&&(clearTimeout(this._pingServerHandle),this._pingServerHandle=void 0)}_cleanupTimeout(){this._timeoutHandle&&clearTimeout(this._timeoutHandle)}_createInvocation(t,e,o,n){if(o)return 0!==n.length?{arguments:e,streamIds:n,target:t,type:rt.Invocation}:{arguments:e,target:t,type:rt.Invocation};{const o=this._invocationId;return this._invocationId++,0!==n.length?{arguments:e,invocationId:o.toString(),streamIds:n,target:t,type:rt.Invocation}:{arguments:e,invocationId:o.toString(),target:t,type:rt.Invocation}}}_launchStreams(t,e){if(0!==t.length){e||(e=Promise.resolve());for(const o in t)t[o].subscribe({complete:()=>{e=e.then((()=>this._sendWithProtocol(this._createCompletionMessage(o))))},error:t=>{let n;n=t instanceof Error?t.message:t&&t.toString?t.toString():"Unknown error",e=e.then((()=>this._sendWithProtocol(this._createCompletionMessage(o,n))))},next:t=>{e=e.then((()=>this._sendWithProtocol(this._createStreamItemMessage(o,t))))}})}}_replaceStreamingParams(t){const e=[],o=[];for(let n=0;n<t.length;n++){const r=t[n];if(this._isObservable(r)){const s=this._invocationId;this._invocationId++,e[s]=r,o.push(s.toString()),t.splice(n,1)}}return[e,o]}_isObservable(t){return t&&t.subscribe&&"function"==typeof t.subscribe}_createStreamInvocation(t,e,o){const n=this._invocationId;return this._invocationId++,0!==o.length?{arguments:e,invocationId:n.toString(),streamIds:o,target:t,type:rt.StreamInvocation}:{arguments:e,invocationId:n.toString(),target:t,type:rt.StreamInvocation}}_createCancelInvocation(t){return{invocationId:t,type:rt.CancelInvocation}}_createStreamItemMessage(t,e){return{invocationId:t,item:e,type:rt.StreamItem}}_createCompletionMessage(t,e,o){return e?{error:e,invocationId:t,type:rt.Completion}:{invocationId:t,result:o,type:rt.Completion}}}const at=[0,2e3,1e4,3e4,null];class lt{constructor(t){this._retryDelays=void 0!==t?[...t,null]:at}nextRetryDelayInMilliseconds(t){return this._retryDelays[t.previousRetryCount]}}class ht{}var ut,gt;ht.Authorization="Authorization",ht.Cookie="Cookie",function(t){t[t.None=0]="None",t[t.WebSockets=1]="WebSockets",t[t.ServerSentEvents=2]="ServerSentEvents",t[t.LongPolling=4]="LongPolling"}(ut||(ut={})),function(t){t[t.Text=1]="Text",t[t.Binary=2]="Binary"}(gt||(gt={}));class dt{constructor(){this._isAborted=!1,this.onabort=null}abort(){this._isAborted||(this._isAborted=!0,this.onabort&&this.onabort())}get signal(){return this}get aborted(){return this._isAborted}}class pt{constructor(t,e,o,n){this._httpClient=t,this._accessTokenFactory=e,this._logger=o,this._pollAbort=new dt,this._options=n,this._running=!1,this.onreceive=null,this.onclose=null}get pollAborted(){return this._pollAbort.aborted}async connect(t,e){if(M.isRequired(t,"url"),M.isRequired(e,"transferFormat"),M.isIn(e,gt,"transferFormat"),this._url=t,this._logger.log(j.Trace,"(LongPolling transport) Connecting."),e===gt.Binary&&"undefined"!=typeof XMLHttpRequest&&"string"!=typeof(new XMLHttpRequest).responseType)throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.");const[o,n]=X(),r={[o]:n,...this._options.headers},s={abortSignal:this._pollAbort.signal,headers:r,timeout:1e5,withCredentials:this._options.withCredentials};e===gt.Binary&&(s.responseType="arraybuffer");const i=await this._getAccessToken();this._updateHeaderToken(s,i);const c=`${t}&_=${Date.now()}`;this._logger.log(j.Trace,`(LongPolling transport) polling: ${c}.`);const a=await this._httpClient.get(c,s);200!==a.statusCode?(this._logger.log(j.Error,`(LongPolling transport) Unexpected response code: ${a.statusCode}.`),this._closeError=new $(a.statusText||"",a.statusCode),this._running=!1):this._running=!0,this._receiving=this._poll(this._url,s)}async _getAccessToken(){return this._accessTokenFactory?await this._accessTokenFactory():null}_updateHeaderToken(t,e){t.headers||(t.headers={}),e?t.headers[ht.Authorization]=`Bearer ${e}`:t.headers[ht.Authorization]&&delete t.headers[ht.Authorization]}async _poll(t,e){try{for(;this._running;){const o=await this._getAccessToken();this._updateHeaderToken(e,o);try{const o=`${t}&_=${Date.now()}`;this._logger.log(j.Trace,`(LongPolling transport) polling: ${o}.`);const n=await this._httpClient.get(o,e);204===n.statusCode?(this._logger.log(j.Information,"(LongPolling transport) Poll terminated by server."),this._running=!1):200!==n.statusCode?(this._logger.log(j.Error,`(LongPolling transport) Unexpected response code: ${n.statusCode}.`),this._closeError=new $(n.statusText||"",n.statusCode),this._running=!1):n.content?(this._logger.log(j.Trace,`(LongPolling transport) data received. ${F(n.content,this._options.logMessageContent)}.`),this.onreceive&&this.onreceive(n.content)):this._logger.log(j.Trace,"(LongPolling transport) Poll timed out, reissuing.")}catch(t){this._running?t instanceof I?this._logger.log(j.Trace,"(LongPolling transport) Poll timed out, reissuing."):(this._closeError=t,this._running=!1):this._logger.log(j.Trace,`(LongPolling transport) Poll errored after shutdown: ${t.message}`)}}}finally{this._logger.log(j.Trace,"(LongPolling transport) Polling complete."),this.pollAborted||this._raiseOnClose()}}async send(t){return this._running?U(this._logger,"LongPolling",this._httpClient,this._url,this._accessTokenFactory,t,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}async stop(){this._logger.log(j.Trace,"(LongPolling transport) Stopping polling."),this._running=!1,this._pollAbort.abort();try{await this._receiving,this._logger.log(j.Trace,`(LongPolling transport) sending DELETE request to ${this._url}.`);const t={},[e,o]=X();t[e]=o;const n={headers:{...t,...this._options.headers},timeout:this._options.timeout,withCredentials:this._options.withCredentials},r=await this._getAccessToken();this._updateHeaderToken(n,r),await this._httpClient.delete(this._url,n),this._logger.log(j.Trace,"(LongPolling transport) DELETE request sent.")}finally{this._logger.log(j.Trace,"(LongPolling transport) Stop finished."),this._raiseOnClose()}}_raiseOnClose(){if(this.onclose){let t="(LongPolling transport) Firing onclose event.";this._closeError&&(t+=" Error: "+this._closeError),this._logger.log(j.Trace,t),this.onclose(this._closeError)}}}class _t{constructor(t,e,o,n){this._httpClient=t,this._accessTokenFactory=e,this._logger=o,this._options=n,this.onreceive=null,this.onclose=null}async connect(t,e){if(M.isRequired(t,"url"),M.isRequired(e,"transferFormat"),M.isIn(e,gt,"transferFormat"),this._logger.log(j.Trace,"(SSE transport) Connecting."),this._url=t,this._accessTokenFactory){const e=await this._accessTokenFactory();e&&(t+=(t.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(e)}`)}return new Promise(((o,n)=>{let r,s=!1;if(e===gt.Text){if(q.isBrowser||q.isWebWorker)r=new this._options.EventSource(t,{withCredentials:this._options.withCredentials});else{const e=this._httpClient.getCookieString(t),o={};o.Cookie=e;const[n,s]=X();o[n]=s,r=new this._options.EventSource(t,{withCredentials:this._options.withCredentials,headers:{...o,...this._options.headers}})}try{r.onmessage=t=>{if(this.onreceive)try{this._logger.log(j.Trace,`(SSE transport) data received. ${F(t.data,this._options.logMessageContent)}.`),this.onreceive(t.data)}catch(t){return void this._close(t)}},r.onerror=t=>{s?this._close():n(new Error("EventSource failed to connect. The connection could not be found on the server, either the connection ID is not present on the server, or a proxy is refusing/buffering the connection. If you have multiple servers check that sticky sessions are enabled."))},r.onopen=()=>{this._logger.log(j.Information,`SSE connected to ${this._url}`),this._eventSource=r,s=!0,o()}}catch(t){return void n(t)}}else n(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"))}))}async send(t){return this._eventSource?U(this._logger,"SSE",this._httpClient,this._url,this._accessTokenFactory,t,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}stop(){return this._close(),Promise.resolve()}_close(t){this._eventSource&&(this._eventSource.close(),this._eventSource=void 0,this.onclose&&this.onclose(t))}}class ft{constructor(t,e,o,n,r,s){this._logger=o,this._accessTokenFactory=e,this._logMessageContent=n,this._webSocketConstructor=r,this._httpClient=t,this.onreceive=null,this.onclose=null,this._headers=s}async connect(t,e){if(M.isRequired(t,"url"),M.isRequired(e,"transferFormat"),M.isIn(e,gt,"transferFormat"),this._logger.log(j.Trace,"(WebSockets transport) Connecting."),this._accessTokenFactory){const e=await this._accessTokenFactory();e&&(t+=(t.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(e)}`)}return new Promise(((o,n)=>{let r;t=t.replace(/^http/,"ws");const s=this._httpClient.getCookieString(t);let i=!1;if(q.isNode){const e={},[o,n]=X();e[o]=n,s&&(e[ht.Cookie]=`${s}`),r=new this._webSocketConstructor(t,void 0,{headers:{...e,...this._headers}})}r||(r=new this._webSocketConstructor(t)),e===gt.Binary&&(r.binaryType="arraybuffer"),r.onopen=e=>{this._logger.log(j.Information,`WebSocket connected to ${t}.`),this._webSocket=r,i=!0,o()},r.onerror=t=>{let e=null;e="undefined"!=typeof ErrorEvent&&t instanceof ErrorEvent?t.error:"There was an error with the transport",this._logger.log(j.Information,`(WebSockets transport) ${e}.`)},r.onmessage=t=>{if(this._logger.log(j.Trace,`(WebSockets transport) data received. ${F(t.data,this._logMessageContent)}.`),this.onreceive)try{this.onreceive(t.data)}catch(t){return void this._close(t)}},r.onclose=t=>{if(i)this._close(t);else{let e=null;e="undefined"!=typeof ErrorEvent&&t instanceof ErrorEvent?t.error:"WebSocket failed to connect. The connection could not be found on the server, either the endpoint may not be a SignalR endpoint, the connection ID is not present on the server, or there is a proxy blocking WebSockets. If you have multiple servers check that sticky sessions are enabled.",n(new Error(e))}}}))}send(t){return this._webSocket&&this._webSocket.readyState===this._webSocketConstructor.OPEN?(this._logger.log(j.Trace,`(WebSockets transport) sending data. ${F(t,this._logMessageContent)}.`),this._webSocket.send(t),Promise.resolve()):Promise.reject("WebSocket is not in the OPEN state")}stop(){return this._webSocket&&this._close(void 0),Promise.resolve()}_close(t){this._webSocket&&(this._webSocket.onclose=()=>{},this._webSocket.onmessage=()=>{},this._webSocket.onerror=()=>{},this._webSocket.close(),this._webSocket=void 0),this._logger.log(j.Trace,"(WebSockets transport) socket closed."),this.onclose&&(!this._isCloseEvent(t)||!1!==t.wasClean&&1e3===t.code?t instanceof Error?this.onclose(t):this.onclose():this.onclose(new Error(`WebSocket closed with status code: ${t.code} (${t.reason||"no reason given"}).`)))}_isCloseEvent(t){return t&&"boolean"==typeof t.wasClean&&"number"==typeof t.code}}class mt{constructor(t,e={}){var o;if(this._stopPromiseResolver=()=>{},this.features={},this._negotiateVersion=1,M.isRequired(t,"url"),this._logger=void 0===(o=e.logger)?new B(j.Information):null===o?L.instance:void 0!==o.log?o:new B(o),this.baseUrl=this._resolveUrl(t),(e=e||{}).logMessageContent=void 0!==e.logMessageContent&&e.logMessageContent,"boolean"!=typeof e.withCredentials&&void 0!==e.withCredentials)throw new Error("withCredentials option was not a 'boolean' or 'undefined' value");e.withCredentials=void 0===e.withCredentials||e.withCredentials,e.timeout=void 0===e.timeout?1e5:e.timeout;let n=null,r=null;if(q.isNode&&"undefined"!=typeof require){const t="function"==typeof __webpack_require__?__non_webpack_require__:require;n=t("ws"),r=t("eventsource")}q.isNode||"undefined"==typeof WebSocket||e.WebSocket?q.isNode&&!e.WebSocket&&n&&(e.WebSocket=n):e.WebSocket=WebSocket,q.isNode||"undefined"==typeof EventSource||e.EventSource?q.isNode&&!e.EventSource&&void 0!==r&&(e.EventSource=r):e.EventSource=EventSource,this._httpClient=e.httpClient||new et(this._logger),this._connectionState="Disconnected",this._connectionStarted=!1,this._options=e,this.onreceive=null,this.onclose=null}async start(t){if(t=t||gt.Binary,M.isIn(t,gt,"transferFormat"),this._logger.log(j.Debug,`Starting connection with transfer format '${gt[t]}'.`),"Disconnected"!==this._connectionState)return Promise.reject(new Error("Cannot start an HttpConnection that is not in the 'Disconnected' state."));if(this._connectionState="Connecting",this._startInternalPromise=this._startInternal(t),await this._startInternalPromise,"Disconnecting"===this._connectionState){const t="Failed to start the HttpConnection before stop() was called.";return this._logger.log(j.Error,t),await this._stopPromise,Promise.reject(new Error(t))}if("Connected"!==this._connectionState){const t="HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!";return this._logger.log(j.Error,t),Promise.reject(new Error(t))}this._connectionStarted=!0}send(t){return"Connected"!==this._connectionState?Promise.reject(new Error("Cannot send data if the connection is not in the 'Connected' State.")):(this._sendQueue||(this._sendQueue=new wt(this.transport)),this._sendQueue.send(t))}async stop(t){return"Disconnected"===this._connectionState?(this._logger.log(j.Debug,`Call to HttpConnection.stop(${t}) ignored because the connection is already in the disconnected state.`),Promise.resolve()):"Disconnecting"===this._connectionState?(this._logger.log(j.Debug,`Call to HttpConnection.stop(${t}) ignored because the connection is already in the disconnecting state.`),this._stopPromise):(this._connectionState="Disconnecting",this._stopPromise=new Promise((t=>{this._stopPromiseResolver=t})),await this._stopInternal(t),void await this._stopPromise)}async _stopInternal(t){this._stopError=t;try{await this._startInternalPromise}catch(t){}if(this.transport){try{await this.transport.stop()}catch(t){this._logger.log(j.Error,`HttpConnection.transport.stop() threw error '${t}'.`),this._stopConnection()}this.transport=void 0}else this._logger.log(j.Debug,"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.")}async _startInternal(t){let e=this.baseUrl;this._accessTokenFactory=this._options.accessTokenFactory;try{if(this._options.skipNegotiation){if(this._options.transport!==ut.WebSockets)throw new Error("Negotiation can only be skipped when using the WebSocket transport directly.");this.transport=this._constructTransport(ut.WebSockets),await this._startTransport(e,t)}else{let o=null,n=0;do{if(o=await this._getNegotiationResponse(e),"Disconnecting"===this._connectionState||"Disconnected"===this._connectionState)throw new Error("The connection was stopped during negotiation.");if(o.error)throw new Error(o.error);if(o.ProtocolVersion)throw new Error("Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.");if(o.url&&(e=o.url),o.accessToken){const t=o.accessToken;this._accessTokenFactory=()=>t}n++}while(o.url&&n<100);if(100===n&&o.url)throw new Error("Negotiate redirection limit exceeded.");await this._createTransport(e,this._options.transport,o,t)}this.transport instanceof pt&&(this.features.inherentKeepAlive=!0),"Connecting"===this._connectionState&&(this._logger.log(j.Debug,"The HttpConnection connected successfully."),this._connectionState="Connected")}catch(t){return this._logger.log(j.Error,"Failed to start the connection: "+t),this._connectionState="Disconnected",this.transport=void 0,this._stopPromiseResolver(),Promise.reject(t)}}async _getNegotiationResponse(t){const e={};if(this._accessTokenFactory){const t=await this._accessTokenFactory();t&&(e[ht.Authorization]=`Bearer ${t}`)}const[o,n]=X();e[o]=n;const r=this._resolveNegotiateUrl(t);this._logger.log(j.Debug,`Sending negotiation request: ${r}.`);try{const t=await this._httpClient.post(r,{content:"",headers:{...e,...this._options.headers},timeout:this._options.timeout,withCredentials:this._options.withCredentials});if(200!==t.statusCode)return Promise.reject(new Error(`Unexpected status code returned from negotiate '${t.statusCode}'`));const o=JSON.parse(t.content);return(!o.negotiateVersion||o.negotiateVersion<1)&&(o.connectionToken=o.connectionId),o}catch(t){let e="Failed to complete negotiation with the server: "+t;return t instanceof $&&404===t.statusCode&&(e+=" Either this is not a SignalR endpoint or there is a proxy blocking the connection."),this._logger.log(j.Error,e),Promise.reject(new H(e))}}_createConnectUrl(t,e){return e?t+(-1===t.indexOf("?")?"?":"&")+`id=${e}`:t}async _createTransport(t,e,o,n){let r=this._createConnectUrl(t,o.connectionToken);if(this._isITransport(e))return this._logger.log(j.Debug,"Connection was provided an instance of ITransport, using that directly."),this.transport=e,await this._startTransport(r,n),void(this.connectionId=o.connectionId);const s=[],i=o.availableTransports||[];let c=o;for(const o of i){const i=this._resolveTransportOrError(o,e,n);if(i instanceof Error)s.push(`${o.transport} failed:`),s.push(i);else if(this._isITransport(i)){if(this.transport=i,!c){try{c=await this._getNegotiationResponse(t)}catch(t){return Promise.reject(t)}r=this._createConnectUrl(t,c.connectionToken)}try{return await this._startTransport(r,n),void(this.connectionId=c.connectionId)}catch(t){if(this._logger.log(j.Error,`Failed to start the transport '${o.transport}': ${t}`),c=void 0,s.push(new x(`${o.transport} failed: ${t}`,ut[o.transport])),"Connecting"!==this._connectionState){const t="Failed to select transport before stop() was called.";return this._logger.log(j.Debug,t),Promise.reject(new Error(t))}}}}return s.length>0?Promise.reject(new N(`Unable to connect to the server with any of the available transports. ${s.join(" ")}`,s)):Promise.reject(new Error("None of the transports supported by the client are supported by the server."))}_constructTransport(t){switch(t){case ut.WebSockets:if(!this._options.WebSocket)throw new Error("'WebSocket' is not supported in your environment.");return new ft(this._httpClient,this._accessTokenFactory,this._logger,this._options.logMessageContent,this._options.WebSocket,this._options.headers||{});case ut.ServerSentEvents:if(!this._options.EventSource)throw new Error("'EventSource' is not supported in your environment.");return new _t(this._httpClient,this._accessTokenFactory,this._logger,this._options);case ut.LongPolling:return new pt(this._httpClient,this._accessTokenFactory,this._logger,this._options);default:throw new Error(`Unknown transport: ${t}.`)}}_startTransport(t,e){return this.transport.onreceive=this.onreceive,this.transport.onclose=t=>this._stopConnection(t),this.transport.connect(t,e)}_resolveTransportOrError(t,e,o){const n=ut[t.transport];if(null==n)return this._logger.log(j.Debug,`Skipping transport '${t.transport}' because it is not supported by this client.`),new Error(`Skipping transport '${t.transport}' because it is not supported by this client.`);if(!function(t,e){return!t||0!=(e&t)}(e,n))return this._logger.log(j.Debug,`Skipping transport '${ut[n]}' because it was disabled by the client.`),new R(`'${ut[n]}' is disabled by the client.`,n);if(!(t.transferFormats.map((t=>gt[t])).indexOf(o)>=0))return this._logger.log(j.Debug,`Skipping transport '${ut[n]}' because it does not support the requested transfer format '${gt[o]}'.`),new Error(`'${ut[n]}' does not support ${gt[o]}.`);if(n===ut.WebSockets&&!this._options.WebSocket||n===ut.ServerSentEvents&&!this._options.EventSource)return this._logger.log(j.Debug,`Skipping transport '${ut[n]}' because it is not supported in your environment.'`),new D(`'${ut[n]}' is not supported in your environment.`,n);this._logger.log(j.Debug,`Selecting transport '${ut[n]}'.`);try{return this._constructTransport(n)}catch(t){return t}}_isITransport(t){return t&&"object"==typeof t&&"connect"in t}_stopConnection(t){if(this._logger.log(j.Debug,`HttpConnection.stopConnection(${t}) called while in state ${this._connectionState}.`),this.transport=void 0,t=this._stopError||t,this._stopError=void 0,"Disconnected"!==this._connectionState){if("Connecting"===this._connectionState)throw this._logger.log(j.Warning,`Call to HttpConnection.stopConnection(${t}) was ignored because the connection is still in the connecting state.`),new Error(`HttpConnection.stopConnection(${t}) was called while the connection is still in the connecting state.`);if("Disconnecting"===this._connectionState&&this._stopPromiseResolver(),t?this._logger.log(j.Error,`Connection disconnected with error '${t}'.`):this._logger.log(j.Information,"Connection disconnected."),this._sendQueue&&(this._sendQueue.stop().catch((t=>{this._logger.log(j.Error,`TransportSendQueue.stop() threw error '${t}'.`)})),this._sendQueue=void 0),this.connectionId=void 0,this._connectionState="Disconnected",this._connectionStarted){this._connectionStarted=!1;try{this.onclose&&this.onclose(t)}catch(e){this._logger.log(j.Error,`HttpConnection.onclose(${t}) threw error '${e}'.`)}}}else this._logger.log(j.Debug,`Call to HttpConnection.stopConnection(${t}) was ignored because the connection is already in the disconnected state.`)}_resolveUrl(t){if(0===t.lastIndexOf("https://",0)||0===t.lastIndexOf("http://",0))return t;if(!q.isBrowser||!window.document)throw new Error(`Cannot resolve '${t}'.`);const e=window.document.createElement("a");return e.href=t,this._logger.log(j.Information,`Normalizing '${t}' to '${e.href}'.`),e.href}_resolveNegotiateUrl(t){const e=t.indexOf("?");let o=t.substring(0,-1===e?t.length:e);return"/"!==o[o.length-1]&&(o+="/"),o+="negotiate",o+=-1===e?"":t.substring(e),-1===o.indexOf("negotiateVersion")&&(o+=-1===e?"?":"&",o+="negotiateVersion="+this._negotiateVersion),o}}class wt{constructor(t){this._transport=t,this._buffer=[],this._executing=!0,this._sendBufferedData=new bt,this._transportResult=new bt,this._sendLoopPromise=this._sendLoop()}send(t){return this._bufferData(t),this._transportResult||(this._transportResult=new bt),this._transportResult.promise}stop(){return this._executing=!1,this._sendBufferedData.resolve(),this._sendLoopPromise}_bufferData(t){if(this._buffer.length&&typeof this._buffer[0]!=typeof t)throw new Error(`Expected data to be of type ${typeof this._buffer} but was of type ${typeof t}`);this._buffer.push(t),this._sendBufferedData.resolve()}async _sendLoop(){for(;;){if(await this._sendBufferedData.promise,!this._executing){this._transportResult&&this._transportResult.reject("Connection stopped.");break}this._sendBufferedData=new bt;const t=this._transportResult;this._transportResult=void 0;const e="string"==typeof this._buffer[0]?this._buffer.join(""):wt._concatBuffers(this._buffer);this._buffer.length=0;try{await this._transport.send(e),t.resolve()}catch(e){t.reject(e)}}}static _concatBuffers(t){const e=t.map((t=>t.byteLength)).reduce(((t,e)=>t+e)),o=new Uint8Array(e);let n=0;for(const e of t)o.set(new Uint8Array(e),n),n+=e.byteLength;return o.buffer}}class bt{constructor(){this.promise=new Promise(((t,e)=>[this._resolver,this._rejecter]=[t,e]))}resolve(){this._resolver()}reject(t){this._rejecter(t)}}class vt{constructor(){this.name="json",this.version=1,this.transferFormat=gt.Text}parseMessages(t,e){if("string"!=typeof t)throw new Error("Invalid input for JSON hub protocol. Expected a string.");if(!t)return[];null===e&&(e=L.instance);const o=ot.parse(t),n=[];for(const t of o){const o=JSON.parse(t);if("number"!=typeof o.type)throw new Error("Invalid payload.");switch(o.type){case rt.Invocation:this._isInvocationMessage(o);break;case rt.StreamItem:this._isStreamItemMessage(o);break;case rt.Completion:this._isCompletionMessage(o);break;case rt.Ping:case rt.Close:break;default:e.log(j.Information,"Unknown message type '"+o.type+"' ignored.");continue}n.push(o)}return n}writeMessage(t){return ot.write(JSON.stringify(t))}_isInvocationMessage(t){this._assertNotEmptyString(t.target,"Invalid payload for Invocation message."),void 0!==t.invocationId&&this._assertNotEmptyString(t.invocationId,"Invalid payload for Invocation message.")}_isStreamItemMessage(t){if(this._assertNotEmptyString(t.invocationId,"Invalid payload for StreamItem message."),void 0===t.item)throw new Error("Invalid payload for StreamItem message.")}_isCompletionMessage(t){if(t.result&&t.error)throw new Error("Invalid payload for Completion message.");!t.result&&t.error&&this._assertNotEmptyString(t.error,"Invalid payload for Completion message."),this._assertNotEmptyString(t.invocationId,"Invalid payload for Completion message.")}_assertNotEmptyString(t,e){if("string"!=typeof t||""===t)throw new Error(e)}}const yt={trace:j.Trace,debug:j.Debug,info:j.Information,information:j.Information,warn:j.Warning,warning:j.Warning,error:j.Error,critical:j.Critical,none:j.None};class Ct{configureLogging(t){if(M.isRequired(t,"logging"),void 0!==t.log)this.logger=t;else if("string"==typeof t){const e=function(t){const e=yt[t.toLowerCase()];if(void 0!==e)return e;throw new Error(`Unknown log level: ${t}`)}(t);this.logger=new B(e)}else this.logger=new B(t);return this}withUrl(t,e){return M.isRequired(t,"url"),M.isNotEmpty(t,"url"),this.url=t,this.httpConnectionOptions="object"==typeof e?{...this.httpConnectionOptions,...e}:{...this.httpConnectionOptions,transport:e},this}withHubProtocol(t){return M.isRequired(t,"protocol"),this.protocol=t,this}withAutomaticReconnect(t){if(this.reconnectPolicy)throw new Error("A reconnectPolicy has already been set.");return t?Array.isArray(t)?this.reconnectPolicy=new lt(t):this.reconnectPolicy=t:this.reconnectPolicy=new lt,this}build(){const t=this.httpConnectionOptions||{};if(void 0===t.logger&&(t.logger=this.logger),!this.url)throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection.");const e=new mt(this.url,t);return ct.create(e,this.logger||L.instance,this.protocol||new vt,this.reconnectPolicy)}}function St(e){let o,n,r,s,u,g,d,p,_,f,m,w,b,v,y,C,S,k,E,T,$,I,P,D,R,x,H,N;return{c(){o=a("main"),n=a("h1"),n.textContent="TERVOB",r=l(),s=a("div"),u=a("div"),g=a("p"),g.textContent="Start game",d=l(),p=a("input"),_=l(),f=a("input"),m=l(),w=a("hr"),b=l(),v=a("div"),y=a("p"),y.textContent="or",C=l(),S=a("input"),k=l(),E=a("input"),T=l(),$=a("select"),I=a("option"),I.textContent="en",P=a("option"),P.textContent="sk",D=a("option"),D.textContent="ru",R=l(),x=a("div"),x.innerHTML='<a href="#">Support author</a> \n            <i class="svelte-15tohzk">Copyright 2022</i>',h(n,"class","svelte-15tohzk"),h(g,"class","svelte-15tohzk"),h(p,"type","text"),h(p,"id","input-code"),h(p,"class","svelte-15tohzk"),h(f,"type","button"),h(f,"id","input-connect"),f.value="Connect",h(f,"class","svelte-15tohzk"),h(u,"class","connect svelte-15tohzk"),h(w,"class","svelte-15tohzk"),h(y,"class","svelte-15tohzk"),h(S,"type","button"),h(S,"id","input-create"),S.value="Create room",h(S,"class","svelte-15tohzk"),h(E,"type","button"),h(E,"id","input-instruction"),E.value="Instruction",h(E,"class","svelte-15tohzk"),I.__value="value1",I.value=I.__value,h(I,"class","svelte-15tohzk"),P.__value="value2",P.value=P.__value,P.selected=!0,h(P,"class","svelte-15tohzk"),D.__value="value3",D.value=D.__value,h(D,"class","svelte-15tohzk"),h($,"id","input-select"),h($,"class","svelte-15tohzk"),h(v,"class","connect svelte-15tohzk"),h(x,"id","other"),h(x,"class","svelte-15tohzk"),h(s,"id","box"),h(s,"class","svelte-15tohzk"),h(o,"class","svelte-15tohzk")},m(t,c){var a,l,h,W;!function(t,e,o){t.insertBefore(e,o||null)}(t,o,c),i(o,n),i(o,r),i(o,s),i(s,u),i(u,g),i(u,d),i(u,p),i(u,_),i(u,f),i(s,m),i(s,w),i(s,b),i(s,v),i(v,y),i(v,C),i(v,S),i(v,k),i(v,E),i(v,T),i(v,$),i($,I),i($,P),i($,D),i(s,R),i(s,x),H||(a=f,l="click",h=e[0],a.addEventListener(l,h,W),N=()=>a.removeEventListener(l,h,W),H=!0)},p:t,i:t,o:t,d(t){t&&c(o),H=!1,N()}}}function kt(t){let e=(new Ct).withUrl("/game").build();return console.log(e),e.on("FilledRoom",(function(t){console.log("fiiled room")})),e.on("GoInRoom",(function(t){console.log("GoInRoom")})),e.on("NotFoundRoom",(function(t){console.log("NotFoundRoom")})),e.start(),[function(){console.log("sended"),e.invoke("Send","message")}]}return new class extends class{$destroy(){!function(t,e){const o=t.$$;null!==o.fragment&&(n(o.on_destroy),o.fragment&&o.fragment.d(e),o.on_destroy=o.fragment=null,o.ctx=[])}(this,1),this.$destroy=t}$on(t,e){const o=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return o.push(e),()=>{const t=o.indexOf(e);-1!==t&&o.splice(t,1)}}$set(t){var e;this.$$set&&(e=t,0!==Object.keys(e).length)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}}{constructor(t){super(),T(this,t,kt,St,s,{})}}({target:document.body})}();
//# sourceMappingURL=bundle.js.map
